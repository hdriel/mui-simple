{"version":3,"file":"components-_FIXED-Switch-__stories__-Switch-stories.3669fc8e.iframe.bundle.js","mappings":";;AAWA;AACA;;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;AASA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;AAsBA;;;;AAKA;;;;;;;;;;AAaA;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;;;;AAIA;;;;AAIA;;;;;;;;;;AAUA;;AAEA;;AAKA;ACjIA;AACA;AACA;AACA;;AAEA;;AAIA;;;;;AC1BA;;;;;AAMA;;;;;AAYA;;;;;AAMA;ACZA;;;AAGA;AACA;AACA;AAuBA","sources":["webpack://mui-simple/./src/components/_FIXED/Switch/Switch.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Switch/Switch.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styled.tsx"],"sourcesContent":["import { css } from '@mui/material/styles';\nimport type { SerializedStyles } from '@emotion/serialize';\nimport { SWITCH_STYLES } from './Switch.consts';\n\nexport function customColor(props): SerializedStyles {\n    if (!props.color) return css``;\n    const opacity = props.theme.palette?.action?.hoverOpacity;\n    const color = props.color;\n\n    return css`\n    & .MuiSwitch-switchBase.Mui-checked {\n      color: ${color};\n      &:hover { background-color: alpha(${color}, ${opacity}) },\n    },\n  & .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track {\n    background-color: ${color};\n  },`;\n}\n\nexport function antSwitchStyle(props): SerializedStyles {\n    if (props.switchStyle !== SWITCH_STYLES.ANT) return css``;\n\n    const { theme, color } = props;\n    const mode = theme?.palette?.mode;\n    const transitions = theme?.transitions;\n\n    return css`\n        width: 28px;\n        height: 16px;\n        padding: 0;\n        display: flex;\n        &:active {\n            & .MuiSwitch-thumb {\n                width: 15px;\n            }\n            & .MuiSwitch-switchBase.Mui-checked {\n                transform: translateX(9px);\n            }\n        }\n        & .MuiSwitch-switchBase {\n            padding: 2px;\n            &.Mui-checked {\n                transform: translateX(12px);\n                color: #fff;\n                & + .MuiSwitch-track {\n                    opacity: 1;\n                    background-color: ${color};\n                }\n            }\n        }\n        & .MuiSwitch-thumb {\n            box-shadow: 0 2px 4px 0 rgb(0 35 11 / 20%);\n            width: 12px;\n            height: 12px;\n            border-radius: 6px;\n            transition: ${transitions.create(['width'], { duration: 200 })};\n        }\n        & .MuiSwitch-track {\n            border-radius: 16 / 2;\n            opacity: 1;\n            background-color: ${mode === 'dark' ? 'rgba(255, 255, 255, .35)' : 'rgba(0, 0, 0, .25)'};\n            box-sizing: border-box;\n        }\n    `;\n}\n\nexport function androidSwitchStyle(props): SerializedStyles {\n    if (props.switchStyle !== SWITCH_STYLES.ANDROID12) return css``;\n\n    const { theme, color } = props;\n\n    return css`\n    padding: 8px;\n    & .MuiSwitch-track {\n      border-radius: 12px;\n      &:before, &:after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 16px;\n        height: 16px;\n      },\n      &:before {\n        left: 12px;\n        background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${\n            color ? encodeURIComponent(theme.palette.getContrastText(color)) : '#000000'\n        }\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"/></svg>');\n      },\n      &:after {\n        right: 12px;\n        background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\n            '#FFFFFF' // theme.palette.getContrastText(color)\n        )}\" d=\"M19,13H5V11H19V13Z\" /></svg>'); \n      },\n  },\n  & .MuiSwitch-thumb {\n    box-shadow: none;\n    border: 1px solid rgba(0, 0, 0, 0.15);\n    width: 16px;\n    height: 16px;\n    margin: 1px 2px 4px 1px;\n  }\n  `;\n}\n\nexport function iosSwitchStyle(props): SerializedStyles {\n    if (props.switchStyle !== SWITCH_STYLES.IOS) return css``;\n\n    const { theme, color } = props;\n\n    return css`\n        width: 42px;\n        height: 26px;\n        padding: 0;\n        & .MuiSwitch-switchBase {\n            padding: 0;\n            margin: 2px;\n            transition-duration: 300ms;\n            &.Mui-checked {\n                transform: translateX(16px);\n                color: #fff;\n                & + .MuiSwitch-track {\n                    background-color: ${color};\n                    opacity: 1;\n                    border: 0;\n                }\n                &.Mui-disabled + .MuiSwitch-track {\n                    opacity: 0.5;\n                }\n            }\n            &.Mui-focusVisible .MuiSwitch-thumb {\n                color: ${color};\n                border: 6px solid #fff;\n            }\n            &.Mui-disabled .MuiSwitch-thumb {\n                color: ${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]};\n            }\n            ,\n            &.Mui-disabled + .MuiSwitch-track {\n                opacity: ${theme.palette.mode === 'light' ? 0.7 : 0.3};\n            }\n        }\n        & .MuiSwitch-thumb {\n            box-sizing: border-box;\n            width: 22px;\n            height: 22px;\n        }\n        & .MuiSwitch-track {\n            border-radius: 20px;\n            background-color: ${theme.palette.mode === 'light' ? '#E9E9EA' : '#39393D'};\n            opacity: 1;\n            transition: ${theme.transitions.create(['background-color'], {\n                duration: 500,\n            })};\n        }\n    `;\n}\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    FormControlLabel,\n    FormHelperText as MuiFormHelperText,\n    Switch as MuiSwitch,\n    Stack as MuiStack,\n} from '@mui/material';\nimport MuiTypography from '../Typography/Typography';\nimport { SWITCH_STYLES } from './Switch.consts';\nimport { customColor, antSwitchStyle, androidSwitchStyle, iosSwitchStyle } from './Switch.styles';\nimport { isDefined } from '../../../utils/helpers';\n\nexport const FormHelperText = MuiFormHelperText;\nexport const Switch = styled(\n    ({ switchStyle, checked, color, scale, ...props }: any) => (\n        <MuiSwitch\n            {...props}\n            checked={checked}\n            focusVisibleClassName={switchStyle === SWITCH_STYLES.IOS ? '.Mui-focusVisible' : ''}\n            sx={{ ...props.sx }}\n        />\n    ),\n    {\n        shouldForwardProp: (prop: string) =>\n            !['textColor', 'fontSize', 'helperText', 'switchStyle', 'labelPlacement'].includes(prop),\n    }\n)`\n    ${(props: any) => customColor(props)}\n    ${(props: any) => antSwitchStyle(props)}\n    ${(props: any) => androidSwitchStyle(props)}\n    ${(props: any) => iosSwitchStyle(props)}\n    &.MuiSwitch-root {\n        scale: ${(props: any) => props.scale};\n    }\n`;\n\nexport const SwitchOnOff = styled(\n    ({ onOffLabelSide, ON_LABEL, OFF_LABEL, ...props }: any) => {\n        const offLabel = OFF_LABEL && <MuiTypography tooltip={false}>{OFF_LABEL}</MuiTypography>;\n        const onLabel = ON_LABEL && <MuiTypography tooltip={false}>{ON_LABEL}</MuiTypography>;\n        const label = props.checked ? onLabel : offLabel;\n\n        return isDefined(onOffLabelSide) && ['left', 'right'].includes(onOffLabelSide) ? (\n            <MuiStack direction=\"row\" spacing={0} alignItems=\"center\">\n                {onOffLabelSide === 'left' ? label : undefined}\n                <Switch {...props} />\n                {onOffLabelSide === 'right' ? label : undefined}\n            </MuiStack>\n        ) : (\n            <MuiStack direction=\"row\" spacing={0} alignItems=\"center\">\n                {offLabel}\n                <Switch {...props} />\n                {onLabel}\n            </MuiStack>\n        );\n    },\n    { shouldForwardProp: (prop: string) => ![].includes(prop) }\n)``;\n\nexport const SwitchControlled = styled(\n    ({ required, fontSize, disabled, labelPlacement, color, labelPadding, label = '', ...props }: any) => (\n        <FormControlLabel\n            required={required}\n            disabled={disabled}\n            labelPlacement={labelPlacement}\n            sx={{\n                m: 0,\n                userSelect: 'none',\n                '.MuiFormControlLabel-label': {\n                    color,\n                    fontSize,\n                    ...(labelPadding !== undefined && { paddingLeft: labelPadding }),\n                },\n            }}\n            label={label}\n            {...props}\n        />\n    ),\n    {\n        shouldForwardProp: (prop: string) => !['textColor', 'muiColor', 'fontSize'].includes(prop),\n    }\n)``;\n","import { css } from '@mui/material/styles';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nexport function ellipsisRow1(props): SerializedStyles {\n    if (props.noWrap || props.rows !== 1) return css``;\n\n    return css`\n        text-overflow: ellipsis;\n        white-space: normal;\n        overflow: hidden;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\n\nexport function ellipsisRows(props): SerializedStyles {\n    if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\n        return css``;\n    }\n\n    return css`\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: normal;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\n","import React from 'react';\nimport type { ComponentType } from 'react';\nimport { Box, Typography as MuiTypography } from '@mui/material';\nimport type { TypographyProps, BoxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport classNames from 'classnames';\n\nimport { ellipsisRow1, ellipsisRows } from './Typography.styles';\nimport { numberToPx } from '../../../utils/helpers';\n\ninterface TypographyBorderProps {\n    autoWidth?: boolean;\n    border?: boolean | string;\n    noWrap?: boolean;\n    rows?: number;\n    width?: string | number;\n    [key: string]: any;\n}\ntype TypographyBorderPropsType = Omit<BoxProps, 'border'> & TypographyBorderProps;\n\nexport const Border = styled(Box, {\n    shouldForwardProp: (propName: string) => !['autoWidth', 'noWrap', 'border', 'rows'].includes(propName as string),\n})<TypographyBorderPropsType>`\n    width: ${(props: any) => numberToPx(props.width) ?? (props.autoWidth ? 'auto' : '100%')};\n    display: flex;\n    align-items: center;\n    border: ${(props: any) => (props.border && typeof props.border === 'boolean' ? '1px solid black' : props.border)};\n    ${ellipsisRows}\n    ${ellipsisRow1}\n` as ComponentType<TypographyBorderPropsType>;\n\ninterface TypographyStyledProps {\n    bgColor?: string;\n    bold?: boolean | string;\n    charsCase?: string;\n    customColor?: string;\n    fontSize?: number | string;\n    italic?: boolean;\n    lineHeight?: string | number;\n    monospace?: boolean;\n    myClassName?: string | string[];\n    strike?: boolean;\n    sub?: boolean;\n    sup?: boolean;\n    underline?: boolean;\n\n    [key: string]: any;\n}\ntype TypographyStyledPropsType = Omit<TypographyProps, 'fontSize' | 'align' | 'border' | 'component'> &\n    TypographyStyledProps;\n\nexport const Typography = styled(\n    ({ className, myClassName, children, ...props }: TypographyStyledPropsType) => (\n        <MuiTypography className={classNames([className, myClassName])} component=\"span\" {...props}>\n            {children}\n        </MuiTypography>\n    ),\n    {\n        shouldForwardProp: (propName: string) =>\n            ![\n                'bgColor',\n                'bold',\n                'charsCase',\n                'customColor',\n                'font',\n                'fontSize',\n                'italic',\n                'lineHeight',\n                'monospace',\n                'strike',\n                'sub',\n                'sup',\n                'textDirection',\n                'textWidth',\n                'underline',\n            ].includes(propName),\n    }\n    // @ts-expect-error\n)<TypographyStyledPropsType>((props) => ({\n    position: 'relative',\n    display: props.display ?? 'unset',\n    color: props.customColor,\n    backgroundColor: props.bgColor,\n    fontWeight: props.bold && typeof props.bold === 'boolean' ? 'bold' : props.bold,\n    fontSize: numberToPx(props.fontSize),\n    fontStyle: props.italic ? 'italic' : undefined,\n    fontFamily: props.font ?? undefined,\n    textDecoration: props.strike ? 'line-through' : props.underline ? 'underline' : undefined,\n    textTransform: { upper: 'uppercase', lower: 'lowercase', capital: 'capitalize' }[props.charsCase],\n    verticalAlign: props.sup ? 'super' : props.sub ? 'sub' : undefined,\n    lineHeight: props.lineHeight,\n    direction: props.textDirection ? `${props.textDirection as string} /* @noflip */` : undefined,\n    whiteSpace: props.noWrap ? 'nowrap' : 'normal',\n    width: props.textWidth ?? 'inherit',\n    ...(props.justifyContent && { justifyContent: props.justifyContent }),\n    ...(props.monospace && { fontFamily: 'monospace' }),\n})) as ComponentType<TypographyStyledPropsType>;\n"],"names":[],"sourceRoot":""}