"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[4792],{"./src/components/Dialog/__stories__/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Actioned:()=>Actioned,Default:()=>Default,DisableAutoPadding:()=>DisableAutoPadding,Dividers:()=>Dividers,Draggabled:()=>Draggabled,Fullscreen:()=>Fullscreen,Info:()=>Info,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dialog_stories});var react=__webpack_require__("./node_modules/react/index.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),Select=__webpack_require__("./node_modules/@mui/material/Select/Select.js"),MenuItem=__webpack_require__("./node_modules/@mui/material/MenuItem/MenuItem.js"),FormControlLabel=__webpack_require__("./node_modules/@mui/material/FormControlLabel/FormControlLabel.js"),Switch=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js"),TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js"),Typography=__webpack_require__("./node_modules/@mui/material/Typography/Typography.js"),List=__webpack_require__("./node_modules/@mui/material/List/List.js"),ListItem=__webpack_require__("./node_modules/@mui/material/ListItem/ListItem.js"),ListItemButton=__webpack_require__("./node_modules/@mui/material/ListItemButton/ListItemButton.js"),ListItemAvatar=__webpack_require__("./node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js"),Avatar=__webpack_require__("./node_modules/@mui/material/Avatar/Avatar.js"),ListItemText=__webpack_require__("./node_modules/@mui/material/ListItemText/ListItemText.js"),blue=__webpack_require__("./node_modules/@mui/material/colors/blue.js"),Person=__webpack_require__("./node_modules/@mui/icons-material/esm/Person.js"),Add=__webpack_require__("./node_modules/@mui/icons-material/esm/Add.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Slide=__webpack_require__("./node_modules/@mui/material/Slide/Slide.js"),Paper=__webpack_require__("./node_modules/@mui/material/Paper/Paper.js"),useMediaQuery=__webpack_require__("./node_modules/@mui/material/useMediaQuery/useMediaQuery.js"),Dialog=__webpack_require__("./node_modules/@mui/material/Dialog/Dialog.js"),DialogTitle=__webpack_require__("./node_modules/@mui/material/DialogTitle/DialogTitle.js"),DialogContent=__webpack_require__("./node_modules/@mui/material/DialogContent/DialogContent.js"),DialogContentText=__webpack_require__("./node_modules/@mui/material/DialogContentText/DialogContentText.js"),DialogActions=__webpack_require__("./node_modules/@mui/material/DialogActions/DialogActions.js"),useTheme=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js"),cjs=__webpack_require__("./node_modules/react-draggable/build/cjs/cjs.js"),cjs_default=__webpack_require__.n(cjs),Button_Button=__webpack_require__("./src/components/Button/Button.tsx"),_excluded=["children"],_excluded2=["titleId"],_excluded3=["onClose","title","titleId","dividers","contentId","selectedValue","open","actions","fullWidth","maxWidth","fullScreen","draggable","children","autoContentPadding"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Transition=(0,react.forwardRef)((function Transition(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);return react.createElement(Slide.Z,_extends({direction:"up",ref},props),children)}));function PaperComponent(_ref2){var titleId=_ref2.titleId,props=_objectWithoutProperties(_ref2,_excluded2);return react.createElement(cjs_default(),{bounds:"body",handle:"#".concat(titleId),cancel:'[class*="MuiDialogContent-root"]'},react.createElement(Paper.Z,props))}function Dialog_Dialog(_ref3){var onClose=_ref3.onClose,title=_ref3.title,titleId=_ref3.titleId,dividers=_ref3.dividers,contentId=_ref3.contentId,selectedValue=_ref3.selectedValue,open=_ref3.open,actions=_ref3.actions,fullWidth=_ref3.fullWidth,maxWidth=_ref3.maxWidth,fullScreen=_ref3.fullScreen,draggable=_ref3.draggable,children=_ref3.children,autoContentPadding=_ref3.autoContentPadding,props=_objectWithoutProperties(_ref3,_excluded3),theme=(0,useTheme.Z)(),fullScreenBreakPoint=(0,useMediaQuery.Z)(theme.breakpoints.down(fullScreen));return react.createElement(Dialog.Z,_extends({sx:{backgroundColor:"background.dialog"},onClose:function(){return null==onClose?void 0:onClose(selectedValue)},open,TransitionComponent:Transition,keepMounted:!0,scroll:"paper",fullWidth,maxWidth,"aria-labelledby":titleId,"aria-describedby":contentId,PaperComponent:draggable?function(props){return react.createElement(PaperComponent,_extends({titleId},props))}:void 0,fullScreen:"boolean"==typeof fullScreen?fullScreen:fullScreenBreakPoint},props),title&&react.createElement(DialogTitle.Z,{style:_objectSpread({},draggable&&{cursor:"move"}),id:titleId},title),react.createElement(DialogContent.Z,{sx:_objectSpread({},!autoContentPadding&&{padding:0}),dividers},"string"==typeof children?react.createElement(DialogContentText.Z,{id:contentId},children):children),(null==actions?void 0:actions.length)?react.createElement(DialogActions.Z,null,actions.map((function(action,index){var _a;return react.createElement(Button_Button.Z,_extends({key:index},action,{onClick:action.onClick,autoFocus:action.autoFocus,variant:null!==(_a=action.variant)&&void 0!==_a?_a:"text"}),action.label)}))):null)}PaperComponent.displayName="PaperComponent",Dialog_Dialog.displayName="Dialog",Dialog_Dialog.propTypes={open:prop_types_default().bool.isRequired,onClose:prop_types_default().func,selectedValue:prop_types_default().string,title:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().node]),titleId:prop_types_default().string,contentId:prop_types_default().string,fullWidth:prop_types_default().bool,dividers:prop_types_default().bool,autoContentPadding:prop_types_default().bool,draggable:prop_types_default().bool,maxWidth:prop_types_default().oneOf([!1,"xs","sm","md","lg","xl"]),fullScreen:prop_types_default().oneOf([!1,!0,"xs","sm","md","lg","xl"]),actions:prop_types_default().arrayOf(prop_types_default().shape({onClick:prop_types_default().func,label:prop_types_default().string,autoFocus:prop_types_default().bool}))},Dialog_Dialog.defaultProps={onClose:void 0,open:!1,selectedValue:void 0,title:"",titleId:"dialog-title-id",contentId:void 0,fullWidth:!1,dividers:!1,maxWidth:!1,draggable:!1,autoContentPadding:!0,fullScreen:!1,actions:[]};var Dialog_DialogContentText=DialogContentText.Z;const components_Dialog_Dialog=Dialog_Dialog;try{Dialog_Dialog.displayName="Dialog",Dialog_Dialog.__docgenInfo={description:"",displayName:"Dialog",props:{onClose:{defaultValue:{value:"undefined"},description:"",name:"onClose",required:!1,type:{name:"any"}},title:{defaultValue:{value:""},description:"",name:"title",required:!1,type:{name:"any"}},titleId:{defaultValue:{value:"dialog-title-id"},description:"",name:"titleId",required:!1,type:{name:"any"}},dividers:{defaultValue:{value:"false"},description:"",name:"dividers",required:!1,type:{name:"any"}},contentId:{defaultValue:{value:"undefined"},description:"",name:"contentId",required:!1,type:{name:"any"}},selectedValue:{defaultValue:{value:"undefined"},description:"",name:"selectedValue",required:!1,type:{name:"any"}},open:{defaultValue:{value:"false"},description:"",name:"open",required:!1,type:{name:"any"}},actions:{defaultValue:{value:"[]"},description:"",name:"actions",required:!1,type:{name:"any"}},fullWidth:{defaultValue:{value:"false"},description:"",name:"fullWidth",required:!1,type:{name:"any"}},maxWidth:{defaultValue:{value:"false"},description:"",name:"maxWidth",required:!1,type:{name:"any"}},fullScreen:{defaultValue:{value:"false"},description:"",name:"fullScreen",required:!1,type:{name:"any"}},draggable:{defaultValue:{value:"false"},description:"",name:"draggable",required:!1,type:{name:"any"}},autoContentPadding:{defaultValue:{value:"true"},description:"",name:"autoContentPadding",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Dialog/Dialog.tsx#Dialog"]={docgenInfo:Dialog_Dialog.__docgenInfo,name:"Dialog",path:"src/components/Dialog/Dialog.tsx#Dialog"})}catch(__react_docgen_typescript_loader_error){}var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w;function Dialog_stories_ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function Dialog_stories_objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?Dialog_stories_ownKeys(Object(source),!0).forEach((function(key){Dialog_stories_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):Dialog_stories_ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function Dialog_stories_defineProperty(obj,key,value){return(key=function Dialog_stories_toPropertyKey(arg){var key=function Dialog_stories_toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const Dialog_stories={parameters:{storySource:{source:'import React, { useState } from "react";\nimport { Typography, Button, List, TextField, ListItem, ListItemButton, ListItemAvatar, Avatar, Box, ListItemText, FormControl, InputLabel, Select, MenuItem, FormControlLabel, Switch } from "@mui/material";\nimport { blue } from "@mui/material/colors";\nimport { Person as PersonIcon, Add as AddIcon } from "@mui/icons-material";\nimport Dialog, { DialogContentText } from "../Dialog";\nexport default {\n  title: "Feedback/Dialog",\n  component: Dialog,\n  decorators: [Story => <div style={{\n    width: "100%",\n    height: "100vh"\n  }}>\n        <Story />\n      </div>]\n};\nexport const Default = () => {\n  return <Dialog />;\n};\nexport const Draggabled = () => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <div>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog title="Draggable title section" open={open} onClose={handleClose} draggable>\n        To draggable dialog component click on title section and drag to\n        anywhere\n      </Dialog>\n    </div>;\n};\nexport const Dividers = () => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog title="Dividers" open={open} dividers onClose={handleClose} actions={[{\n      label: "OK",\n      onClick: () => handleClose()\n    }]}>\n        <DialogContentText>\n          See, there are dividers between title, content and actions\n        </DialogContentText>\n      </Dialog>\n    </>;\n};\nexport const Fullscreen = () => {\n  const [open, setOpen] = useState(false);\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState("sm");\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open max-width dialog\n      </Button>\n      <Dialog title="Optional sizes" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n        <DialogContentText>\n          You can set my maximum width and whether to adapt or not.\n        </DialogContentText>\n        <Box noValidate component="form" sx={{\n        display: "flex",\n        flexDirection: "column",\n        m: "auto",\n        width: "fit-content"\n      }}>\n          <FormControl sx={{\n          mt: 2,\n          minWidth: 120\n        }}>\n            <InputLabel htmlFor="max-width">maxWidth</InputLabel>\n            <Select autoFocus value={maxWidth} onChange={handleMaxWidthChange} label="maxWidth" inputProps={{\n            name: "max-width",\n            id: "max-width"\n          }}>\n              <MenuItem value={false}>false</MenuItem>\n              <MenuItem value="xs">xs</MenuItem>\n              <MenuItem value="sm">sm</MenuItem>\n              <MenuItem value="md">md</MenuItem>\n              <MenuItem value="lg">lg</MenuItem>\n              <MenuItem value="xl">xl</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControlLabel sx={{\n          mt: 1\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label="Full width" />\n        </Box>\n      </Dialog>\n    </>;\n};\nexport const Actioned = () => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <div>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog title="Subscribe" open={open} onClose={handleClose} actions={[{\n      label: "Cancel",\n      onClick: () => handleClose()\n    }, {\n      label: "Subscribe",\n      onClick: () => handleClose()\n    }]}>\n        <DialogContentText>\n          To subscribe to this website, please enter your email address here. We\n          will send updates occasionally.\n        </DialogContentText>\n        <TextField autoFocus margin="dense" id="name" label="Email Address" type="email" fullWidth variant="standard" />\n      </Dialog>\n    </div>;\n};\nexport const Info = () => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} titleId="alert-dialog-title" contentId="alert-dialog-description" title="Use Google\'s location service?" autoContentPadding>\n        Let Google help apps determine location. This means sending anonymous\n        location data to Google, even when no apps are running.\n      </Dialog>\n    </>;\n};\nexport const DisableAutoPadding = () => {\n  const emails = ["username@gmail.com", "user02@gmail.com"];\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = value => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n  return <div>\n      <Typography variant="subtitle1" component="div">\n        Selected: {selectedValue}\n      </Typography>\n      <br />\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog selectedValue={selectedValue} open={open} onClose={handleClose} title="Set backup account" autoContentPadding={false}>\n        <List sx={{\n        pt: 0\n      }}>\n          {emails.map(email => <ListItem key={email} disableGutters>\n              <ListItemButton onClick={() => handleClose(email)} key={email}>\n                <ListItemAvatar>\n                  <Avatar sx={{\n                bgcolor: blue[100],\n                color: blue[600]\n              }}>\n                    <PersonIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>)}\n\n          <ListItem disableGutters>\n            <ListItemButton autoFocus onClick={() => handleClose("addAccount")}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AddIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary="Add account" />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>;\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Dialog />;\\n}",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nDraggabled.parameters = {\n  ...Draggabled.parameters,\n  docs: {\n    ...Draggabled.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <div>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open dialog\\n      </Button>\\n      <Dialog title=\\"Draggable title section\\" open={open} onClose={handleClose} draggable>\\n        To draggable dialog component click on title section and drag to\\n        anywhere\\n      </Dialog>\\n    </div>;\\n}",\n      ...Draggabled.parameters?.docs?.source\n    }\n  }\n};\nDividers.parameters = {\n  ...Dividers.parameters,\n  docs: {\n    ...Dividers.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open dialog\\n      </Button>\\n      <Dialog title=\\"Dividers\\" open={open} dividers onClose={handleClose} actions={[{\\n      label: \\"OK\\",\\n      onClick: () => handleClose()\\n    }]}>\\n        <DialogContentText>\\n          See, there are dividers between title, content and actions\\n        </DialogContentText>\\n      </Dialog>\\n    </>;\\n}",\n      ...Dividers.parameters?.docs?.source\n    }\n  }\n};\nFullscreen.parameters = {\n  ...Fullscreen.parameters,\n  docs: {\n    ...Fullscreen.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const [fullWidth, setFullWidth] = useState(true);\\n  const [maxWidth, setMaxWidth] = useState(\\"sm\\");\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\\n  return <>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open max-width dialog\\n      </Button>\\n      <Dialog title=\\"Optional sizes\\" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\\n        <DialogContentText>\\n          You can set my maximum width and whether to adapt or not.\\n        </DialogContentText>\\n        <Box noValidate component=\\"form\\" sx={{\\n        display: \\"flex\\",\\n        flexDirection: \\"column\\",\\n        m: \\"auto\\",\\n        width: \\"fit-content\\"\\n      }}>\\n          <FormControl sx={{\\n          mt: 2,\\n          minWidth: 120\\n        }}>\\n            <InputLabel htmlFor=\\"max-width\\">maxWidth</InputLabel>\\n            <Select autoFocus value={maxWidth} onChange={handleMaxWidthChange} label=\\"maxWidth\\" inputProps={{\\n            name: \\"max-width\\",\\n            id: \\"max-width\\"\\n          }}>\\n              <MenuItem value={false}>false</MenuItem>\\n              <MenuItem value=\\"xs\\">xs</MenuItem>\\n              <MenuItem value=\\"sm\\">sm</MenuItem>\\n              <MenuItem value=\\"md\\">md</MenuItem>\\n              <MenuItem value=\\"lg\\">lg</MenuItem>\\n              <MenuItem value=\\"xl\\">xl</MenuItem>\\n            </Select>\\n          </FormControl>\\n          <FormControlLabel sx={{\\n          mt: 1\\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label=\\"Full width\\" />\\n        </Box>\\n      </Dialog>\\n    </>;\\n}",\n      ...Fullscreen.parameters?.docs?.source\n    }\n  }\n};\nActioned.parameters = {\n  ...Actioned.parameters,\n  docs: {\n    ...Actioned.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <div>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open form dialog\\n      </Button>\\n      <Dialog title=\\"Subscribe\\" open={open} onClose={handleClose} actions={[{\\n      label: \\"Cancel\\",\\n      onClick: () => handleClose()\\n    }, {\\n      label: \\"Subscribe\\",\\n      onClick: () => handleClose()\\n    }]}>\\n        <DialogContentText>\\n          To subscribe to this website, please enter your email address here. We\\n          will send updates occasionally.\\n        </DialogContentText>\\n        <TextField autoFocus margin=\\"dense\\" id=\\"name\\" label=\\"Email Address\\" type=\\"email\\" fullWidth variant=\\"standard\\" />\\n      </Dialog>\\n    </div>;\\n}",\n      ...Actioned.parameters?.docs?.source\n    }\n  }\n};\nInfo.parameters = {\n  ...Info.parameters,\n  docs: {\n    ...Info.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [open, setOpen] = React.useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open alert dialog\\n      </Button>\\n      <Dialog open={open} onClose={handleClose} titleId=\\"alert-dialog-title\\" contentId=\\"alert-dialog-description\\" title=\\"Use Google\'s location service?\\" autoContentPadding>\\n        Let Google help apps determine location. This means sending anonymous\\n        location data to Google, even when no apps are running.\\n      </Dialog>\\n    </>;\\n}",\n      ...Info.parameters?.docs?.source\n    }\n  }\n};\nDisableAutoPadding.parameters = {\n  ...DisableAutoPadding.parameters,\n  docs: {\n    ...DisableAutoPadding.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const emails = [\\"username@gmail.com\\", \\"user02@gmail.com\\"];\\n  const [open, setOpen] = useState(false);\\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = value => {\\n    setOpen(false);\\n    setSelectedValue(value);\\n  };\\n  return <div>\\n      <Typography variant=\\"subtitle1\\" component=\\"div\\">\\n        Selected: {selectedValue}\\n      </Typography>\\n      <br />\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open simple dialog\\n      </Button>\\n      <Dialog selectedValue={selectedValue} open={open} onClose={handleClose} title=\\"Set backup account\\" autoContentPadding={false}>\\n        <List sx={{\\n        pt: 0\\n      }}>\\n          {emails.map(email => <ListItem key={email} disableGutters>\\n              <ListItemButton onClick={() => handleClose(email)} key={email}>\\n                <ListItemAvatar>\\n                  <Avatar sx={{\\n                bgcolor: blue[100],\\n                color: blue[600]\\n              }}>\\n                    <PersonIcon />\\n                  </Avatar>\\n                </ListItemAvatar>\\n                <ListItemText primary={email} />\\n              </ListItemButton>\\n            </ListItem>)}\\n\\n          <ListItem disableGutters>\\n            <ListItemButton autoFocus onClick={() => handleClose(\\"addAccount\\")}>\\n              <ListItemAvatar>\\n                <Avatar>\\n                  <AddIcon />\\n                </Avatar>\\n              </ListItemAvatar>\\n              <ListItemText primary=\\"Add account\\" />\\n            </ListItemButton>\\n          </ListItem>\\n        </List>\\n      </Dialog>\\n    </div>;\\n}",\n      ...DisableAutoPadding.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{default:{startLoc:{col:23,line:16},endLoc:{col:1,line:18},startBody:{col:23,line:16},endBody:{col:1,line:18}},draggabled:{startLoc:{col:26,line:19},endLoc:{col:1,line:32},startBody:{col:26,line:19},endBody:{col:1,line:32}},dividers:{startLoc:{col:24,line:33},endLoc:{col:1,line:50},startBody:{col:24,line:33},endBody:{col:1,line:50}},fullscreen:{startLoc:{col:26,line:51},endLoc:{col:1,line:96},startBody:{col:26,line:51},endBody:{col:1,line:96}},actioned:{startLoc:{col:24,line:97},endLoc:{col:1,line:119},startBody:{col:24,line:97},endBody:{col:1,line:119}},info:{startLoc:{col:20,line:120},endLoc:{col:1,line:133},startBody:{col:20,line:120},endBody:{col:1,line:133}},"disable-auto-padding":{startLoc:{col:34,line:134},endLoc:{col:1,line:182},startBody:{col:34,line:134},endBody:{col:1,line:182}}}}},title:"Feedback/Dialog",component:components_Dialog_Dialog,decorators:[function(Story){return react.createElement("div",{style:{width:"100%",height:"100vh"}},react.createElement(Story,null))}]};var Default=function(){return react.createElement(components_Dialog_Dialog,null)};Default.displayName="Default";var Draggabled=function(){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement("div",null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)}},"Open dialog"),react.createElement(components_Dialog_Dialog,{title:"Draggable title section",open,onClose:function(){return setOpen(!1)},draggable:!0},"To draggable dialog component click on title section and drag to anywhere"))};Draggabled.displayName="Draggabled";var Dividers=function(){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],handleClose=function(){return setOpen(!1)};return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)}},"Open dialog"),react.createElement(components_Dialog_Dialog,{title:"Dividers",open,dividers:!0,onClose:handleClose,actions:[{label:"OK",onClick:function(){return handleClose()}}]},react.createElement(Dialog_DialogContentText,null,"See, there are dividers between title, content and actions")))},Fullscreen=function(){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],_b=(0,react.useState)(!0),fullWidth=_b[0],setFullWidth=_b[1],_c=(0,react.useState)("sm"),maxWidth=_c[0],setMaxWidth=_c[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)}},"Open max-width dialog"),react.createElement(components_Dialog_Dialog,{title:"Optional sizes",fullWidth,maxWidth,open,onClose:function(){return setOpen(!1)}},react.createElement(Dialog_DialogContentText,null,"You can set my maximum width and whether to adapt or not."),react.createElement(Box.Z,{noValidate:!0,component:"form",sx:{display:"flex",flexDirection:"column",m:"auto",width:"fit-content"}},react.createElement(FormControl.Z,{sx:{mt:2,minWidth:120}},react.createElement(InputLabel.Z,{htmlFor:"max-width"},"maxWidth"),react.createElement(Select.Z,{autoFocus:!0,value:maxWidth,onChange:function(event){return setMaxWidth(event.target.value)},label:"maxWidth",inputProps:{name:"max-width",id:"max-width"}},react.createElement(MenuItem.Z,{value:!1},"false"),react.createElement(MenuItem.Z,{value:"xs"},"xs"),react.createElement(MenuItem.Z,{value:"sm"},"sm"),react.createElement(MenuItem.Z,{value:"md"},"md"),react.createElement(MenuItem.Z,{value:"lg"},"lg"),react.createElement(MenuItem.Z,{value:"xl"},"xl"))),react.createElement(FormControlLabel.Z,{sx:{mt:1},control:react.createElement(Switch.Z,{checked:fullWidth,onChange:function(event){return setFullWidth(event.target.checked)}}),label:"Full width"}))))},Actioned=function(){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],handleClose=function(){return setOpen(!1)};return react.createElement("div",null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)}},"Open form dialog"),react.createElement(components_Dialog_Dialog,{title:"Subscribe",open,onClose:handleClose,actions:[{label:"Cancel",onClick:function(){return handleClose()}},{label:"Subscribe",onClick:function(){return handleClose()}}]},react.createElement(Dialog_DialogContentText,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally."),react.createElement(TextField.Z,{autoFocus:!0,margin:"dense",id:"name",label:"Email Address",type:"email",fullWidth:!0,variant:"standard"})))};Actioned.displayName="Actioned";var Info=function(){var _a=react.useState(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)}},"Open alert dialog"),react.createElement(components_Dialog_Dialog,{open,onClose:function(){return setOpen(!1)},titleId:"alert-dialog-title",contentId:"alert-dialog-description",title:"Use Google's location service?",autoContentPadding:!0},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."))},DisableAutoPadding=function(){var emails=["username@gmail.com","user02@gmail.com"],_a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],_b=(0,react.useState)(emails[1]),selectedValue=_b[0],setSelectedValue=_b[1],handleClose=function(value){setOpen(!1),setSelectedValue(value)};return react.createElement("div",null,react.createElement(Typography.Z,{variant:"subtitle1",component:"div"},"Selected: ",selectedValue),react.createElement("br",null),react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)}},"Open simple dialog"),react.createElement(components_Dialog_Dialog,{selectedValue,open,onClose:handleClose,title:"Set backup account",autoContentPadding:!1},react.createElement(List.Z,{sx:{pt:0}},emails.map((function(email){return react.createElement(ListItem.ZP,{key:email,disableGutters:!0},react.createElement(ListItemButton.Z,{onClick:function(){return handleClose(email)},key:email},react.createElement(ListItemAvatar.Z,null,react.createElement(Avatar.Z,{sx:{bgcolor:blue.Z[100],color:blue.Z[600]}},react.createElement(Person.Z,null))),react.createElement(ListItemText.Z,{primary:email})))})),react.createElement(ListItem.ZP,{disableGutters:!0},react.createElement(ListItemButton.Z,{autoFocus:!0,onClick:function(){return handleClose("addAccount")}},react.createElement(ListItemAvatar.Z,null,react.createElement(Avatar.Z,null,react.createElement(Add.Z,null))),react.createElement(ListItemText.Z,{primary:"Add account"}))))))};DisableAutoPadding.displayName="DisableAutoPadding",Default.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Default.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{},{source:Dialog_stories_objectSpread({originalSource:"() => {\n  return <Dialog />;\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),Draggabled.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Draggabled.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_d=Draggabled.parameters)||void 0===_d?void 0:_d.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <div>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog title="Draggable title section" open={open} onClose={handleClose} draggable>\n        To draggable dialog component click on title section and drag to\n        anywhere\n      </Dialog>\n    </div>;\n}'},null===(_f=null===(_e=Draggabled.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),Dividers.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Dividers.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_g=Dividers.parameters)||void 0===_g?void 0:_g.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog title="Dividers" open={open} dividers onClose={handleClose} actions={[{\n      label: "OK",\n      onClick: () => handleClose()\n    }]}>\n        <DialogContentText>\n          See, there are dividers between title, content and actions\n        </DialogContentText>\n      </Dialog>\n    </>;\n}'},null===(_j=null===(_h=Dividers.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),Fullscreen.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Fullscreen.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_k=Fullscreen.parameters)||void 0===_k?void 0:_k.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState("sm");\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open max-width dialog\n      </Button>\n      <Dialog title="Optional sizes" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n        <DialogContentText>\n          You can set my maximum width and whether to adapt or not.\n        </DialogContentText>\n        <Box noValidate component="form" sx={{\n        display: "flex",\n        flexDirection: "column",\n        m: "auto",\n        width: "fit-content"\n      }}>\n          <FormControl sx={{\n          mt: 2,\n          minWidth: 120\n        }}>\n            <InputLabel htmlFor="max-width">maxWidth</InputLabel>\n            <Select autoFocus value={maxWidth} onChange={handleMaxWidthChange} label="maxWidth" inputProps={{\n            name: "max-width",\n            id: "max-width"\n          }}>\n              <MenuItem value={false}>false</MenuItem>\n              <MenuItem value="xs">xs</MenuItem>\n              <MenuItem value="sm">sm</MenuItem>\n              <MenuItem value="md">md</MenuItem>\n              <MenuItem value="lg">lg</MenuItem>\n              <MenuItem value="xl">xl</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControlLabel sx={{\n          mt: 1\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label="Full width" />\n        </Box>\n      </Dialog>\n    </>;\n}'},null===(_m=null===(_l=Fullscreen.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),Actioned.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Actioned.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_o=Actioned.parameters)||void 0===_o?void 0:_o.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <div>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog title="Subscribe" open={open} onClose={handleClose} actions={[{\n      label: "Cancel",\n      onClick: () => handleClose()\n    }, {\n      label: "Subscribe",\n      onClick: () => handleClose()\n    }]}>\n        <DialogContentText>\n          To subscribe to this website, please enter your email address here. We\n          will send updates occasionally.\n        </DialogContentText>\n        <TextField autoFocus margin="dense" id="name" label="Email Address" type="email" fullWidth variant="standard" />\n      </Dialog>\n    </div>;\n}'},null===(_q=null===(_p=Actioned.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),Info.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Info.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_r=Info.parameters)||void 0===_r?void 0:_r.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} titleId="alert-dialog-title" contentId="alert-dialog-description" title="Use Google\'s location service?" autoContentPadding>\n        Let Google help apps determine location. This means sending anonymous\n        location data to Google, even when no apps are running.\n      </Dialog>\n    </>;\n}'},null===(_t=null===(_s=Info.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),DisableAutoPadding.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},DisableAutoPadding.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_u=DisableAutoPadding.parameters)||void 0===_u?void 0:_u.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const emails = ["username@gmail.com", "user02@gmail.com"];\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = value => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n  return <div>\n      <Typography variant="subtitle1" component="div">\n        Selected: {selectedValue}\n      </Typography>\n      <br />\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog selectedValue={selectedValue} open={open} onClose={handleClose} title="Set backup account" autoContentPadding={false}>\n        <List sx={{\n        pt: 0\n      }}>\n          {emails.map(email => <ListItem key={email} disableGutters>\n              <ListItemButton onClick={() => handleClose(email)} key={email}>\n                <ListItemAvatar>\n                  <Avatar sx={{\n                bgcolor: blue[100],\n                color: blue[600]\n              }}>\n                    <PersonIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>)}\n\n          <ListItem disableGutters>\n            <ListItemButton autoFocus onClick={() => handleClose("addAccount")}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AddIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary="Add account" />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>;\n}'},null===(_w=null===(_v=DisableAutoPadding.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})});var __namedExportsOrder=["Default","Draggabled","Dividers","Fullscreen","Actioned","Info","DisableAutoPadding"]}}]);