"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[895],{"./src/components/_FIXED/Dialog/__stories__/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Actioned:()=>Actioned,AutoContentPadding:()=>AutoContentPadding,Default:()=>Default,Dividers:()=>Dividers,Draggable:()=>Draggable,FullScreen:()=>FullScreen,FullWidth:()=>FullWidth,Info:()=>Info,MaxWidth_:()=>MaxWidth_,SelectedValue_:()=>SelectedValue_,Title:()=>Title,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dialog_stories});var react=__webpack_require__("./node_modules/react/index.js"),TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),Select=__webpack_require__("./node_modules/@mui/material/Select/Select.js"),MenuItem=__webpack_require__("./node_modules/@mui/material/MenuItem/MenuItem.js"),FormControlLabel=__webpack_require__("./node_modules/@mui/material/FormControlLabel/FormControlLabel.js"),Switch=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js"),Typography=__webpack_require__("./node_modules/@mui/material/Typography/Typography.js"),List=__webpack_require__("./node_modules/@mui/material/List/List.js"),ListItem=__webpack_require__("./node_modules/@mui/material/ListItem/ListItem.js"),ListItemButton=__webpack_require__("./node_modules/@mui/material/ListItemButton/ListItemButton.js"),ListItemAvatar=__webpack_require__("./node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js"),Avatar=__webpack_require__("./node_modules/@mui/material/Avatar/Avatar.js"),ListItemText=__webpack_require__("./node_modules/@mui/material/ListItemText/ListItemText.js"),useMediaQuery=__webpack_require__("./node_modules/@mui/material/useMediaQuery/useMediaQuery.js"),Dialog=__webpack_require__("./node_modules/@mui/material/Dialog/Dialog.js"),DialogTitle=__webpack_require__("./node_modules/@mui/material/DialogTitle/DialogTitle.js"),DialogContent=__webpack_require__("./node_modules/@mui/material/DialogContent/DialogContent.js"),DialogContentText=__webpack_require__("./node_modules/@mui/material/DialogContentText/DialogContentText.js"),DialogActions=__webpack_require__("./node_modules/@mui/material/DialogActions/DialogActions.js"),useTheme=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js"),Button=__webpack_require__("./src/components/_FIXED/Button/Button.tsx"),Slide=__webpack_require__("./node_modules/@mui/material/Slide/Slide.js"),Paper=__webpack_require__("./node_modules/@mui/material/Paper/Paper.js"),cjs=__webpack_require__("./node_modules/react-draggable/build/cjs/cjs.js"),cjs_default=__webpack_require__.n(cjs),_excluded=["children"],_excluded2=["titleId"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Transition=(0,react.forwardRef)((function Transition(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);return react.createElement(Slide.Z,_extends({direction:"up",ref},props),children)}));function PaperComponent(_ref2){var titleId=_ref2.titleId,props=_objectWithoutProperties(_ref2,_excluded2);return react.createElement(cjs_default(),{bounds:"body",handle:"#".concat(titleId),cancel:'[class*="MuiDialogContent-root"]'},react.createElement(Paper.Z,props))}PaperComponent.displayName="PaperComponent";try{PaperComponent.displayName="PaperComponent",PaperComponent.__docgenInfo={description:"",displayName:"PaperComponent",props:{titleId:{defaultValue:null,description:"",name:"titleId",required:!1,type:{name:"string | number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Dialog/Dialog.components.tsx#PaperComponent"]={docgenInfo:PaperComponent.__docgenInfo,name:"PaperComponent",path:"src/components/_FIXED/Dialog/Dialog.components.tsx#PaperComponent"})}catch(__react_docgen_typescript_loader_error){}try{Transition.displayName="Transition",Transition.__docgenInfo={description:"",displayName:"Transition",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Dialog/Dialog.components.tsx#Transition"]={docgenInfo:Transition.__docgenInfo,name:"Transition",path:"src/components/_FIXED/Dialog/Dialog.components.tsx#Transition"})}catch(__react_docgen_typescript_loader_error){}var Dialog_excluded=["actions","autoContentPadding","children","contentId","dividers","draggable","fullScreen","onClose","open","selectedValue","title","titleId"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function Dialog_extends(){return Dialog_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},Dialog_extends.apply(this,arguments)}function Dialog_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function Dialog_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function Dialog_Dialog(props){var actions=props.actions,autoContentPadding=props.autoContentPadding,children=props.children,contentId=props.contentId,dividers=props.dividers,draggable=props.draggable,fullScreen=props.fullScreen,onClose=props.onClose,open=props.open,selectedValue=props.selectedValue,title=props.title,titleId=props.titleId,rest=Dialog_objectWithoutProperties(props,Dialog_excluded),theme=(0,useTheme.Z)(),fullScreenBreakPoint=(0,useMediaQuery.Z)(theme.breakpoints.down(fullScreen));return react.createElement(Dialog.Z,Dialog_extends({sx:{backgroundColor:"background.dialog"},onClose:function(){return null==onClose?void 0:onClose(selectedValue)},open,TransitionComponent:Transition,keepMounted:!0,scroll:"paper","aria-labelledby":titleId,"aria-describedby":contentId,PaperComponent:draggable?function(props){return react.createElement(PaperComponent,Dialog_extends({titleId},rest))}:void 0,fullScreen:"boolean"==typeof fullScreen?fullScreen:fullScreenBreakPoint},rest),title&&react.createElement(DialogTitle.Z,{style:_objectSpread({},draggable&&{cursor:"move"}),id:titleId},title),react.createElement(DialogContent.Z,{sx:_objectSpread({},!autoContentPadding&&{padding:0}),dividers},"string"==typeof children?react.createElement(DialogContentText.Z,{id:contentId},children):children),(null==actions?void 0:actions.length)?react.createElement(DialogActions.Z,null,actions.map((function(action,index){var _a;return react.createElement(Button.Z,Dialog_extends({key:index},action,{onClick:action.onClick,autoFocus:action.autoFocus,variant:null!==(_a=action.variant)&&void 0!==_a?_a:"text"}),action.label)}))):null)}Dialog_Dialog.displayName="Dialog",Dialog_Dialog.defaultProps={actions:[],autoContentPadding:!0,contentId:void 0,dividers:!1,draggable:!1,fullScreen:!1,fullWidth:!1,maxWidth:!1,onClose:void 0,open:!1,selectedValue:void 0,title:"",titleId:"dialog-title-id"};var Dialog_DialogContentText=DialogContentText.Z;const _FIXED_Dialog_Dialog=Dialog_Dialog;try{Dialog_DialogContentText.displayName="DialogContentText",Dialog_DialogContentText.__docgenInfo={description:"",displayName:"DialogContentText",props:{component:{defaultValue:null,description:"The component used for the root node.\nEither a string to use a HTML element or a component.",name:"component",required:!0,type:{name:"ElementType<any>"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<DialogContentTextClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},border:{defaultValue:null,description:"",name:"border",required:!1,type:{name:'ResponsiveStyleValue<number | "transparent" | "medium" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | (string & {}) | "inset" | "hidden" | "none" | "-moz-initial" | "thick" | "thin" | ... 183 more ... | "currentcolor"> | ((theme: Theme) => ResponsiveStyleValue<...>)'}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"ResponsiveStyleValue<string[] | Color> | ((theme: Theme) => ResponsiveStyleValue<string[] | Color>)"}},gutterBottom:{defaultValue:{value:"false"},description:"If `true`, the text will have a bottom margin.",name:"gutterBottom",required:!1,type:{name:"boolean"}},lineHeight:{defaultValue:null,description:"",name:"lineHeight",required:!1,type:{name:"ResponsiveStyleValue<LineHeight<string | number> | NonNullable<LineHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},noWrap:{defaultValue:{value:"false"},description:"If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n\nNote that text overflow can only happen with block or inline-block level elements\n(the element needs to have a width in order to overflow).",name:"noWrap",required:!1,type:{name:"boolean"}},paragraph:{defaultValue:{value:"false"},description:"If `true`, the element will be a paragraph element.",name:"paragraph",required:!1,type:{name:"boolean"}},width:{defaultValue:null,description:"",name:"width",required:!1,type:{name:"ResponsiveStyleValue<Width<string | number> | NonNullable<Width<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},bottom:{defaultValue:null,description:"",name:"bottom",required:!1,type:{name:"ResponsiveStyleValue<Bottom<string | number> | NonNullable<Bottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},left:{defaultValue:null,description:"",name:"left",required:!1,type:{name:"ResponsiveStyleValue<Left<string | number> | NonNullable<Left<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Left<...> | NonNullable<...>[]>)"}},right:{defaultValue:null,description:"",name:"right",required:!1,type:{name:"ResponsiveStyleValue<Right<string | number> | NonNullable<Right<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},top:{defaultValue:null,description:"",name:"top",required:!1,type:{name:"ResponsiveStyleValue<Top<string | number> | NonNullable<Top<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Top<string | number> | NonNullable<...>[]>)"}},fontSize:{defaultValue:null,description:"",name:"fontSize",required:!1,type:{name:"ResponsiveStyleValue<FontSize<string | number> | NonNullable<FontSize<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},justifyContent:{defaultValue:null,description:"",name:"justifyContent",required:!1,type:{name:"ResponsiveStyleValue<string[] | JustifyContent> | ((theme: Theme) => ResponsiveStyleValue<string[] | JustifyContent>)"}},boxShadow:{defaultValue:null,description:"",name:"boxShadow",required:!1,type:{name:"ResponsiveStyleValue<number | BoxShadow> | ((theme: Theme) => ResponsiveStyleValue<number | BoxShadow>)"}},fontWeight:{defaultValue:null,description:"",name:"fontWeight",required:!1,type:{name:"ResponsiveStyleValue<string | (string & {}) | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (string & {}) | (number & {})>)"}},zIndex:{defaultValue:null,description:"",name:"zIndex",required:!1,type:{name:"ResponsiveStyleValue<string | (string & {}) | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (string & {}) | (number & {})>)"}},alignContent:{defaultValue:null,description:"",name:"alignContent",required:!1,type:{name:"ResponsiveStyleValue<string[] | AlignContent> | ((theme: Theme) => ResponsiveStyleValue<string[] | AlignContent>)"}},alignItems:{defaultValue:null,description:"",name:"alignItems",required:!1,type:{name:"ResponsiveStyleValue<string[] | AlignItems> | ((theme: Theme) => ResponsiveStyleValue<string[] | AlignItems>)"}},alignSelf:{defaultValue:null,description:"",name:"alignSelf",required:!1,type:{name:"ResponsiveStyleValue<string[] | AlignSelf> | ((theme: Theme) => ResponsiveStyleValue<string[] | AlignSelf>)"}},boxSizing:{defaultValue:null,description:"",name:"boxSizing",required:!1,type:{name:"ResponsiveStyleValue<BoxSizing | NonNullable<BoxSizing>[]> | ((theme: Theme) => ResponsiveStyleValue<BoxSizing | NonNullable<...>[]>)"}},columnGap:{defaultValue:null,description:"",name:"columnGap",required:!1,type:{name:"ResponsiveStyleValue<ColumnGap<string | number> | NonNullable<ColumnGap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},display:{defaultValue:null,description:"",name:"display",required:!1,type:{name:"ResponsiveStyleValue<string[] | Display> | ((theme: Theme) => ResponsiveStyleValue<string[] | Display>)"}},flexBasis:{defaultValue:null,description:"",name:"flexBasis",required:!1,type:{name:"ResponsiveStyleValue<FlexBasis<string | number> | NonNullable<FlexBasis<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},flexDirection:{defaultValue:null,description:"",name:"flexDirection",required:!1,type:{name:"ResponsiveStyleValue<FlexDirection | NonNullable<FlexDirection>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexDirection | NonNullable<...>[]>)"}},flexGrow:{defaultValue:null,description:"",name:"flexGrow",required:!1,type:{name:"ResponsiveStyleValue<FlexGrow | NonNullable<FlexGrow>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexGrow | NonNullable<...>[]>)"}},flexShrink:{defaultValue:null,description:"",name:"flexShrink",required:!1,type:{name:"ResponsiveStyleValue<FlexShrink | NonNullable<FlexShrink>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexShrink | NonNullable<...>[]>)"}},flexWrap:{defaultValue:null,description:"",name:"flexWrap",required:!1,type:{name:"ResponsiveStyleValue<FlexWrap | NonNullable<FlexWrap>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexWrap | NonNullable<...>[]>)"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveStyleValue<string[] | FontFamily> | ((theme: Theme) => ResponsiveStyleValue<string[] | FontFamily>)"}},fontStyle:{defaultValue:null,description:"",name:"fontStyle",required:!1,type:{name:"ResponsiveStyleValue<string[] | FontStyle> | ((theme: Theme) => ResponsiveStyleValue<string[] | FontStyle>)"}},gridAutoColumns:{defaultValue:null,description:"",name:"gridAutoColumns",required:!1,type:{name:"ResponsiveStyleValue<GridAutoColumns<string | number> | NonNullable<GridAutoColumns<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},gridAutoFlow:{defaultValue:null,description:"",name:"gridAutoFlow",required:!1,type:{name:"ResponsiveStyleValue<string[] | GridAutoFlow> | ((theme: Theme) => ResponsiveStyleValue<string[] | GridAutoFlow>)"}},gridAutoRows:{defaultValue:null,description:"",name:"gridAutoRows",required:!1,type:{name:"ResponsiveStyleValue<GridAutoRows<string | number> | NonNullable<GridAutoRows<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},gridTemplateAreas:{defaultValue:null,description:"",name:"gridTemplateAreas",required:!1,type:{name:"ResponsiveStyleValue<string[] | GridTemplateAreas> | ((theme: Theme) => ResponsiveStyleValue<string[] | GridTemplateAreas>)"}},gridTemplateColumns:{defaultValue:null,description:"",name:"gridTemplateColumns",required:!1,type:{name:"ResponsiveStyleValue<GridTemplateColumns<string | number> | NonNullable<GridTemplateColumns<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},gridTemplateRows:{defaultValue:null,description:"",name:"gridTemplateRows",required:!1,type:{name:"ResponsiveStyleValue<GridTemplateRows<string | number> | NonNullable<GridTemplateRows<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},height:{defaultValue:null,description:"",name:"height",required:!1,type:{name:"ResponsiveStyleValue<Height<string | number> | NonNullable<Height<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},justifyItems:{defaultValue:null,description:"",name:"justifyItems",required:!1,type:{name:"ResponsiveStyleValue<string[] | JustifyItems> | ((theme: Theme) => ResponsiveStyleValue<string[] | JustifyItems>)"}},justifySelf:{defaultValue:null,description:"",name:"justifySelf",required:!1,type:{name:"ResponsiveStyleValue<string[] | JustifySelf> | ((theme: Theme) => ResponsiveStyleValue<string[] | JustifySelf>)"}},letterSpacing:{defaultValue:null,description:"",name:"letterSpacing",required:!1,type:{name:"ResponsiveStyleValue<LetterSpacing<string | number> | NonNullable<LetterSpacing<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginBottom:{defaultValue:null,description:"",name:"marginBottom",required:!1,type:{name:"ResponsiveStyleValue<MarginBottom<string | number> | NonNullable<MarginBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginLeft:{defaultValue:null,description:"",name:"marginLeft",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginRight:{defaultValue:null,description:"",name:"marginRight",required:!1,type:{name:"ResponsiveStyleValue<MarginRight<string | number> | NonNullable<MarginRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginTop:{defaultValue:null,description:"",name:"marginTop",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},maxHeight:{defaultValue:null,description:"",name:"maxHeight",required:!1,type:{name:"ResponsiveStyleValue<MaxHeight<string | number> | NonNullable<MaxHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},maxWidth:{defaultValue:{value:"false"},description:"",name:"maxWidth",required:!1,type:{name:"ResponsiveStyleValue<MaxWidth<string | number> | NonNullable<MaxWidth<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},minHeight:{defaultValue:null,description:"",name:"minHeight",required:!1,type:{name:"ResponsiveStyleValue<MinHeight<string | number> | NonNullable<MinHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},minWidth:{defaultValue:null,description:"",name:"minWidth",required:!1,type:{name:"ResponsiveStyleValue<MinWidth<string | number> | NonNullable<MinWidth<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},order:{defaultValue:null,description:"",name:"order",required:!1,type:{name:"ResponsiveStyleValue<Order | NonNullable<Order>[]> | ((theme: Theme) => ResponsiveStyleValue<Order | NonNullable<Order>[]>)"}},paddingBottom:{defaultValue:null,description:"",name:"paddingBottom",required:!1,type:{name:"ResponsiveStyleValue<PaddingBottom<string | number> | NonNullable<PaddingBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingLeft:{defaultValue:null,description:"",name:"paddingLeft",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingRight:{defaultValue:null,description:"",name:"paddingRight",required:!1,type:{name:"ResponsiveStyleValue<PaddingRight<string | number> | NonNullable<PaddingRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingTop:{defaultValue:null,description:"",name:"paddingTop",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},position:{defaultValue:null,description:"",name:"position",required:!1,type:{name:"ResponsiveStyleValue<Position | NonNullable<Position>[]> | ((theme: Theme) => ResponsiveStyleValue<Position | NonNullable<...>[]>)"}},rowGap:{defaultValue:null,description:"",name:"rowGap",required:!1,type:{name:"ResponsiveStyleValue<RowGap<string | number> | NonNullable<RowGap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},textAlign:{defaultValue:null,description:"",name:"textAlign",required:!1,type:{name:"ResponsiveStyleValue<TextAlign | NonNullable<TextAlign>[]> | ((theme: Theme) => ResponsiveStyleValue<TextAlign | NonNullable<...>[]>)"}},textOverflow:{defaultValue:null,description:"",name:"textOverflow",required:!1,type:{name:"ResponsiveStyleValue<string[] | TextOverflow> | ((theme: Theme) => ResponsiveStyleValue<string[] | TextOverflow>)"}},textTransform:{defaultValue:null,description:"",name:"textTransform",required:!1,type:{name:"ResponsiveStyleValue<TextTransform | NonNullable<TextTransform>[]> | ((theme: Theme) => ResponsiveStyleValue<TextTransform | NonNullable<...>[]>)"}},visibility:{defaultValue:null,description:"",name:"visibility",required:!1,type:{name:"ResponsiveStyleValue<Visibility | NonNullable<Visibility>[]> | ((theme: Theme) => ResponsiveStyleValue<Visibility | NonNullable<...>[]>)"}},whiteSpace:{defaultValue:null,description:"",name:"whiteSpace",required:!1,type:{name:"ResponsiveStyleValue<WhiteSpace | NonNullable<WhiteSpace>[]> | ((theme: Theme) => ResponsiveStyleValue<WhiteSpace | NonNullable<...>[]>)"}},borderBottom:{defaultValue:null,description:"",name:"borderBottom",required:!1,type:{name:"ResponsiveStyleValue<BorderBottom<string | number> | NonNullable<BorderBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderColor:{defaultValue:null,description:"",name:"borderColor",required:!1,type:{name:"ResponsiveStyleValue<string[] | BorderColor> | ((theme: Theme) => ResponsiveStyleValue<string[] | BorderColor>)"}},borderLeft:{defaultValue:null,description:"",name:"borderLeft",required:!1,type:{name:"ResponsiveStyleValue<BorderLeft<string | number> | NonNullable<BorderLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderRadius:{defaultValue:null,description:"",name:"borderRadius",required:!1,type:{name:"ResponsiveStyleValue<BorderRadius<string | number> | NonNullable<BorderRadius<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderRight:{defaultValue:null,description:"",name:"borderRight",required:!1,type:{name:"ResponsiveStyleValue<BorderRight<string | number> | NonNullable<BorderRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderTop:{defaultValue:null,description:"",name:"borderTop",required:!1,type:{name:"ResponsiveStyleValue<BorderTop<string | number> | NonNullable<BorderTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},flex:{defaultValue:null,description:"",name:"flex",required:!1,type:{name:"ResponsiveStyleValue<Flex<string | number> | NonNullable<Flex<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Flex<...> | NonNullable<...>[]>)"}},gap:{defaultValue:null,description:"",name:"gap",required:!1,type:{name:"ResponsiveStyleValue<Gap<string | number> | NonNullable<Gap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Gap<string | number> | NonNullable<...>[]>)"}},gridArea:{defaultValue:null,description:"",name:"gridArea",required:!1,type:{name:"ResponsiveStyleValue<GridArea | NonNullable<GridArea>[]> | ((theme: Theme) => ResponsiveStyleValue<GridArea | NonNullable<...>[]>)"}},gridColumn:{defaultValue:null,description:"",name:"gridColumn",required:!1,type:{name:"ResponsiveStyleValue<GridColumn | NonNullable<GridColumn>[]> | ((theme: Theme) => ResponsiveStyleValue<GridColumn | NonNullable<...>[]>)"}},gridRow:{defaultValue:null,description:"",name:"gridRow",required:!1,type:{name:"ResponsiveStyleValue<GridRow | NonNullable<GridRow>[]> | ((theme: Theme) => ResponsiveStyleValue<GridRow | NonNullable<GridRow>[]>)"}},margin:{defaultValue:null,description:"",name:"margin",required:!1,type:{name:"ResponsiveStyleValue<Margin<string | number> | NonNullable<Margin<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},overflow:{defaultValue:null,description:"",name:"overflow",required:!1,type:{name:"ResponsiveStyleValue<string[] | Overflow> | ((theme: Theme) => ResponsiveStyleValue<string[] | Overflow>)"}},padding:{defaultValue:null,description:"",name:"padding",required:!1,type:{name:"ResponsiveStyleValue<Padding<string | number> | NonNullable<Padding<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},bgcolor:{defaultValue:null,description:"",name:"bgcolor",required:!1,type:{name:"ResponsiveStyleValue<string[] | BackgroundColor> | ((theme: Theme) => ResponsiveStyleValue<string[] | BackgroundColor>)"}},m:{defaultValue:null,description:"",name:"m",required:!1,type:{name:"ResponsiveStyleValue<Margin<string | number> | NonNullable<Margin<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mt:{defaultValue:null,description:"",name:"mt",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mr:{defaultValue:null,description:"",name:"mr",required:!1,type:{name:"ResponsiveStyleValue<MarginRight<string | number> | NonNullable<MarginRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mb:{defaultValue:null,description:"",name:"mb",required:!1,type:{name:"ResponsiveStyleValue<MarginBottom<string | number> | NonNullable<MarginBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},ml:{defaultValue:null,description:"",name:"ml",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mx:{defaultValue:null,description:"",name:"mx",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginX:{defaultValue:null,description:"",name:"marginX",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},my:{defaultValue:null,description:"",name:"my",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginY:{defaultValue:null,description:"",name:"marginY",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},p:{defaultValue:null,description:"",name:"p",required:!1,type:{name:"ResponsiveStyleValue<Padding<string | number> | NonNullable<Padding<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pt:{defaultValue:null,description:"",name:"pt",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pr:{defaultValue:null,description:"",name:"pr",required:!1,type:{name:"ResponsiveStyleValue<PaddingRight<string | number> | NonNullable<PaddingRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pb:{defaultValue:null,description:"",name:"pb",required:!1,type:{name:"ResponsiveStyleValue<PaddingBottom<string | number> | NonNullable<PaddingBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pl:{defaultValue:null,description:"",name:"pl",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},px:{defaultValue:null,description:"",name:"px",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingX:{defaultValue:null,description:"",name:"paddingX",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},py:{defaultValue:null,description:"",name:"py",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingY:{defaultValue:null,description:"",name:"paddingY",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},typography:{defaultValue:null,description:"",name:"typography",required:!1,type:{name:"ResponsiveStyleValue<string> | ((theme: Theme) => ResponsiveStyleValue<string>)"}},displayPrint:{defaultValue:null,description:"",name:"displayPrint",required:!1,type:{name:"ResponsiveStyleValue<string[] | Display> | ((theme: Theme) => ResponsiveStyleValue<string[] | Display>)"}},variant:{defaultValue:{value:"'body1'"},description:"Applies the theme typography styles.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"inherit"'},{value:'"button"'},{value:'"caption"'},{value:'"h1"'},{value:'"h2"'},{value:'"h3"'},{value:'"h4"'},{value:'"h5"'},{value:'"h6"'},{value:'"subtitle1"'},{value:'"subtitle2"'},{value:'"body1"'},{value:'"body2"'},{value:'"overline"'}]}},children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},align:{defaultValue:{value:"'inherit'"},description:"Set the text-align on the component.",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'},{value:'"center"'},{value:'"inherit"'},{value:'"justify"'}]}},variantMapping:{defaultValue:{value:"{\nh1: 'h1',\nh2: 'h2',\nh3: 'h3',\nh4: 'h4',\nh5: 'h5',\nh6: 'h6',\nsubtitle1: 'h6',\nsubtitle2: 'h6',\nbody1: 'p',\nbody2: 'p',\ninherit: 'p',\n}"},description:"The component maps the variant prop to a range of different HTML element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` prop.",name:"variantMapping",required:!1,type:{name:'Partial<Record<OverridableStringUnion<"inherit" | Variant, TypographyPropsVariantOverrides>, string>>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Dialog/Dialog.tsx#DialogContentText"]={docgenInfo:Dialog_DialogContentText.__docgenInfo,name:"DialogContentText",path:"src/components/_FIXED/Dialog/Dialog.tsx#DialogContentText"})}catch(__react_docgen_typescript_loader_error){}try{Dialog_Dialog.displayName="Dialog",Dialog_Dialog.__docgenInfo={description:"",displayName:"Dialog",props:{open:{defaultValue:{value:"false"},description:"",name:"open",required:!1,type:{name:"boolean"}},onClose:{defaultValue:{value:"undefined"},description:"",name:"onClose",required:!1,type:{name:"(value: string) => void"}},selectedValue:{defaultValue:{value:"undefined"},description:"",name:"selectedValue",required:!1,type:{name:"string"}},title:{defaultValue:{value:""},description:"",name:"title",required:!1,type:{name:"ReactNode"}},titleId:{defaultValue:{value:"dialog-title-id"},description:"",name:"titleId",required:!1,type:{name:"string"}},contentId:{defaultValue:{value:"undefined"},description:"",name:"contentId",required:!1,type:{name:"string"}},fullWidth:{defaultValue:{value:"false"},description:"",name:"fullWidth",required:!1,type:{name:"boolean"}},dividers:{defaultValue:{value:"false"},description:"",name:"dividers",required:!1,type:{name:"boolean"}},autoContentPadding:{defaultValue:{value:"true"},description:"",name:"autoContentPadding",required:!1,type:{name:"boolean"}},draggable:{defaultValue:{value:"false"},description:"",name:"draggable",required:!1,type:{name:"boolean"}},maxWidth:{defaultValue:{value:"false"},description:"",name:"maxWidth",required:!1,type:{name:'false | "xs" | "sm" | "md" | "lg" | "xl"'}},fullScreen:{defaultValue:{value:"false"},description:"",name:"fullScreen",required:!1,type:{name:'boolean | "xs" | "sm" | "md" | "lg" | "xl"'}},actions:{defaultValue:{value:"[]"},description:"",name:"actions",required:!1,type:{name:"ButtonProps[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Dialog/Dialog.tsx#Dialog"]={docgenInfo:Dialog_Dialog.__docgenInfo,name:"Dialog",path:"src/components/_FIXED/Dialog/Dialog.tsx#Dialog"})}catch(__react_docgen_typescript_loader_error){}var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3,_4,_5,_6,_7,_8,blue=__webpack_require__("./node_modules/@mui/material/colors/blue.js"),Person=__webpack_require__("./node_modules/@mui/icons-material/esm/Person.js"),Add=__webpack_require__("./node_modules/@mui/icons-material/esm/Add.js");function Dialog_stories_ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function Dialog_stories_objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?Dialog_stories_ownKeys(Object(source),!0).forEach((function(key){Dialog_stories_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):Dialog_stories_ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function Dialog_stories_defineProperty(obj,key,value){return(key=function Dialog_stories_toPropertyKey(arg){var key=function Dialog_stories_toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function Dialog_stories_extends(){return Dialog_stories_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},Dialog_stories_extends.apply(this,arguments)}const Dialog_stories={parameters:{storySource:{source:'import React, { useState } from \'react\';\nimport type { Meta, StoryObj } from \'@storybook/react\';\nimport { Avatar, Box, FormControl, FormControlLabel, InputLabel, List, ListItem, ListItemAvatar, ListItemButton, ListItemText, MenuItem, Select, Switch, TextField, Typography } from \'@mui/material\';\nimport Dialog, { DialogContentText } from \'../Dialog\';\nimport Button from \'../../Button/Button\';\nimport { colors } from \'@mui/material\';\nimport { Add as AddIcon, Person as PersonIcon } from \'@mui/icons-material\';\nconst meta: Meta<typeof Dialog> = {\n  title: \'Feedback/Dialog\',\n  component: Dialog,\n  tags: [\'autodocs\']\n};\nexport default meta;\ntype Story = StoryObj<typeof Dialog>;\nexport const Default: Story = {\n  args: {}\n};\nexport const Actioned: Story = {\n  args: {\n    title: \'Subscribe actions\',\n    children: <>\n                <DialogContentText>\n                    To subscribe to this website, please enter your email address here. We will send updates\n                    occasionally.\n                </DialogContentText>\n                <TextField autoFocus margin="dense" id="name" label="Email Address" type="email" fullWidth variant="standard" />\n            </>\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open form dialog" />\n                <Dialog {...args} title="Subscribe" open={open} onClose={handleClose} actions={[{\n        label: \'Cancel\',\n        onClick: () => handleClose()\n      }, {\n        label: \'Subscribe\',\n        onClick: () => handleClose()\n      }]} />\n            </>;\n  }\n};\nexport const Draggable: Story = {\n  args: {\n    title: \'Draggable title section\',\n    titleId: \'my-dialog-id\',\n    contentId: \'my-content-id\',\n    children: \'To draggable dialog component click on title section and drag to anywhere\',\n    draggable: true\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const Dividers: Story = {\n  args: {\n    title: \'Dividers between header, content and footer\',\n    children: <DialogContentText>See, there are dividers between title, content and actions</DialogContentText>,\n    dividers: true,\n    actions: [{\n      label: \'OK\'\n    }]\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const FullWidth: Story = {\n  args: {\n    title: \'FullWidth\',\n    children: <DialogContentText>fullWidth</DialogContentText>,\n    fullWidth: true\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const Info: Story = {\n  args: {\n    titleId: \'alert-dialog-title\',\n    contentId: \'alert-dialog-description\',\n    title: "Use Google\'s location service?",\n    autoContentPadding: true,\n    children: \'Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const AutoContentPadding: Story = {\n  args: {\n    titleId: \'alert-dialog-title\',\n    contentId: \'alert-dialog-description\',\n    title: \'Set backup account\',\n    autoContentPadding: false,\n    children: \'Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const MaxWidth_ = () => {\n  const [open, setOpen] = useState(false);\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState<false | \'xs\' | \'sm\' | \'md\' | \'lg\' | \'xl\'>(\'sm\');\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\n  return <>\n            <Button variant="outlined" onClick={handleClickOpen} label="Open max-width dialog" />\n            <Dialog title="Optional sizes" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n                <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n                <Box noValidate component="form" sx={{\n        display: \'flex\',\n        flexDirection: \'column\',\n        m: \'auto\',\n        width: \'fit-content\'\n      }}>\n                    <FormControl sx={{\n          mt: 2,\n          minWidth: 120\n        }}>\n                        <InputLabel htmlFor="max-width">maxWidth</InputLabel>\n                        <Select autoFocus value={(maxWidth as any)} onChange={handleMaxWidthChange} label="maxWidth" inputProps={{\n            name: \'max-width\',\n            id: \'max-width\'\n          }}>\n                            <MenuItem value={(false as string)}>false</MenuItem>\n                            <MenuItem value="xs">xs</MenuItem>\n                            <MenuItem value="sm">sm</MenuItem>\n                            <MenuItem value="md">md</MenuItem>\n                            <MenuItem value="lg">lg</MenuItem>\n                            <MenuItem value="xl">xl</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <FormControlLabel sx={{\n          mt: 1\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label="Full width" />\n                </Box>\n            </Dialog>\n        </>;\n};\nexport const FullScreen: Story = {\n  args: {\n    title: \'Set backup account\',\n    fullScreen: \'sm\',\n    children: \'to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect\'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const Title: Story = {\n  args: {\n    title: undefined,\n    children: \'to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect\'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n};\nexport const SelectedValue_ = args => {\n  const emails = [\'username@gmail.com\', \'user02@gmail.com\'];\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = value => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n  return <Box>\n            <Typography variant="subtitle1" component="div">\n                Selected: {selectedValue}\n            </Typography>\n            <br />\n            <Button variant="outlined" onClick={handleClickOpen} label="Open simple dialog" />\n            <Dialog {...args} selectedValue={selectedValue} open={open} onClose={handleClose} title="Set backup account" autoContentPadding={false}>\n                <List sx={{\n        pt: 0\n      }}>\n                    {emails.map(email => <ListItem key={email} disableGutters>\n                            <ListItemButton onClick={() => handleClose(email)} key={email}>\n                                <ListItemAvatar>\n                                    <Avatar sx={{\n                bgcolor: colors.blue[100],\n                color: colors.blue[600]\n              }}>\n                                        <PersonIcon />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={email} />\n                            </ListItemButton>\n                        </ListItem>)}\n\n                    <ListItem disableGutters>\n                        <ListItemButton autoFocus onClick={() => handleClose(\'addAccount\')}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <AddIcon />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary="Add account" />\n                        </ListItemButton>\n                    </ListItem>\n                </List>\n            </Dialog>\n        </Box>;\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {}\\n}",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nActioned.parameters = {\n  ...Actioned.parameters,\n  docs: {\n    ...Actioned.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    title: \'Subscribe actions\',\\n    children: <>\\n                <DialogContentText>\\n                    To subscribe to this website, please enter your email address here. We will send updates\\n                    occasionally.\\n                </DialogContentText>\\n                <TextField autoFocus margin=\\"dense\\" id=\\"name\\" label=\\"Email Address\\" type=\\"email\\" fullWidth variant=\\"standard\\" />\\n            </>\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open form dialog\\" />\\n                <Dialog {...args} title=\\"Subscribe\\" open={open} onClose={handleClose} actions={[{\\n        label: \'Cancel\',\\n        onClick: () => handleClose()\\n      }, {\\n        label: \'Subscribe\',\\n        onClick: () => handleClose()\\n      }]} />\\n            </>;\\n  }\\n}",\n      ...Actioned.parameters?.docs?.source\n    }\n  }\n};\nDraggable.parameters = {\n  ...Draggable.parameters,\n  docs: {\n    ...Draggable.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    title: \'Draggable title section\',\\n    titleId: \'my-dialog-id\',\\n    contentId: \'my-content-id\',\\n    children: \'To draggable dialog component click on title section and drag to anywhere\',\\n    draggable: true\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...Draggable.parameters?.docs?.source\n    }\n  }\n};\nDividers.parameters = {\n  ...Dividers.parameters,\n  docs: {\n    ...Dividers.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    title: \'Dividers between header, content and footer\',\\n    children: <DialogContentText>See, there are dividers between title, content and actions</DialogContentText>,\\n    dividers: true,\\n    actions: [{\\n      label: \'OK\'\\n    }]\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...Dividers.parameters?.docs?.source\n    }\n  }\n};\nFullWidth.parameters = {\n  ...FullWidth.parameters,\n  docs: {\n    ...FullWidth.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    title: \'FullWidth\',\\n    children: <DialogContentText>fullWidth</DialogContentText>,\\n    fullWidth: true\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...FullWidth.parameters?.docs?.source\n    }\n  }\n};\nInfo.parameters = {\n  ...Info.parameters,\n  docs: {\n    ...Info.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    titleId: \'alert-dialog-title\',\\n    contentId: \'alert-dialog-description\',\\n    title: \\"Use Google\'s location service?\\",\\n    autoContentPadding: true,\\n    children: \'Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\'\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...Info.parameters?.docs?.source\n    }\n  }\n};\nAutoContentPadding.parameters = {\n  ...AutoContentPadding.parameters,\n  docs: {\n    ...AutoContentPadding.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    titleId: \'alert-dialog-title\',\\n    contentId: \'alert-dialog-description\',\\n    title: \'Set backup account\',\\n    autoContentPadding: false,\\n    children: \'Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\'\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...AutoContentPadding.parameters?.docs?.source\n    }\n  }\n};\nMaxWidth_.parameters = {\n  ...MaxWidth_.parameters,\n  docs: {\n    ...MaxWidth_.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const [fullWidth, setFullWidth] = useState(true);\\n  const [maxWidth, setMaxWidth] = useState<false | \'xs\' | \'sm\' | \'md\' | \'lg\' | \'xl\'>(\'sm\');\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\\n  return <>\\n            <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open max-width dialog\\" />\\n            <Dialog title=\\"Optional sizes\\" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\\n                <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\\n                <Box noValidate component=\\"form\\" sx={{\\n        display: \'flex\',\\n        flexDirection: \'column\',\\n        m: \'auto\',\\n        width: \'fit-content\'\\n      }}>\\n                    <FormControl sx={{\\n          mt: 2,\\n          minWidth: 120\\n        }}>\\n                        <InputLabel htmlFor=\\"max-width\\">maxWidth</InputLabel>\\n                        <Select autoFocus value={(maxWidth as any)} onChange={handleMaxWidthChange} label=\\"maxWidth\\" inputProps={{\\n            name: \'max-width\',\\n            id: \'max-width\'\\n          }}>\\n                            <MenuItem value={(false as string)}>false</MenuItem>\\n                            <MenuItem value=\\"xs\\">xs</MenuItem>\\n                            <MenuItem value=\\"sm\\">sm</MenuItem>\\n                            <MenuItem value=\\"md\\">md</MenuItem>\\n                            <MenuItem value=\\"lg\\">lg</MenuItem>\\n                            <MenuItem value=\\"xl\\">xl</MenuItem>\\n                        </Select>\\n                    </FormControl>\\n                    <FormControlLabel sx={{\\n          mt: 1\\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label=\\"Full width\\" />\\n                </Box>\\n            </Dialog>\\n        </>;\\n}",\n      ...MaxWidth_.parameters?.docs?.source\n    }\n  }\n};\nFullScreen.parameters = {\n  ...FullScreen.parameters,\n  docs: {\n    ...FullScreen.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    title: \'Set backup account\',\\n    fullScreen: \'sm\',\\n    children: \'to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect\'\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...FullScreen.parameters?.docs?.source\n    }\n  }\n};\nTitle.parameters = {\n  ...Title.parameters,\n  docs: {\n    ...Title.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    title: undefined,\\n    children: \'to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect\'\\n  },\\n  render: args => {\\n    const [open, setOpen] = useState(false);\\n    const handleClickOpen = () => setOpen(true);\\n    const handleClose = () => setOpen(false);\\n    return <>\\n                <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open Dialog\\" />\\n                <Dialog {...args} open={open} onClose={handleClose} />\\n            </>;\\n  }\\n}",\n      ...Title.parameters?.docs?.source\n    }\n  }\n};\nSelectedValue_.parameters = {\n  ...SelectedValue_.parameters,\n  docs: {\n    ...SelectedValue_.parameters?.docs,\n    source: {\n      originalSource: "args => {\\n  const emails = [\'username@gmail.com\', \'user02@gmail.com\'];\\n  const [open, setOpen] = useState(false);\\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = value => {\\n    setOpen(false);\\n    setSelectedValue(value);\\n  };\\n  return <Box>\\n            <Typography variant=\\"subtitle1\\" component=\\"div\\">\\n                Selected: {selectedValue}\\n            </Typography>\\n            <br />\\n            <Button variant=\\"outlined\\" onClick={handleClickOpen} label=\\"Open simple dialog\\" />\\n            <Dialog {...args} selectedValue={selectedValue} open={open} onClose={handleClose} title=\\"Set backup account\\" autoContentPadding={false}>\\n                <List sx={{\\n        pt: 0\\n      }}>\\n                    {emails.map(email => <ListItem key={email} disableGutters>\\n                            <ListItemButton onClick={() => handleClose(email)} key={email}>\\n                                <ListItemAvatar>\\n                                    <Avatar sx={{\\n                bgcolor: colors.blue[100],\\n                color: colors.blue[600]\\n              }}>\\n                                        <PersonIcon />\\n                                    </Avatar>\\n                                </ListItemAvatar>\\n                                <ListItemText primary={email} />\\n                            </ListItemButton>\\n                        </ListItem>)}\\n\\n                    <ListItem disableGutters>\\n                        <ListItemButton autoFocus onClick={() => handleClose(\'addAccount\')}>\\n                            <ListItemAvatar>\\n                                <Avatar>\\n                                    <AddIcon />\\n                                </Avatar>\\n                            </ListItemAvatar>\\n                            <ListItemText primary=\\"Add account\\" />\\n                        </ListItemButton>\\n                    </ListItem>\\n                </List>\\n            </Dialog>\\n        </Box>;\\n}",\n      ...SelectedValue_.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{default:{startLoc:{col:30,line:15},endLoc:{col:1,line:17},startBody:{col:30,line:15},endBody:{col:1,line:17}},actioned:{startLoc:{col:31,line:18},endLoc:{col:1,line:44},startBody:{col:31,line:18},endBody:{col:1,line:44}},draggable:{startLoc:{col:32,line:45},endLoc:{col:1,line:62},startBody:{col:32,line:45},endBody:{col:1,line:62}},dividers:{startLoc:{col:31,line:63},endLoc:{col:1,line:81},startBody:{col:31,line:63},endBody:{col:1,line:81}},"full-width":{startLoc:{col:32,line:82},endLoc:{col:1,line:97},startBody:{col:32,line:82},endBody:{col:1,line:97}},info:{startLoc:{col:27,line:98},endLoc:{col:1,line:115},startBody:{col:27,line:98},endBody:{col:1,line:115}},"auto-content-padding":{startLoc:{col:41,line:116},endLoc:{col:1,line:133},startBody:{col:41,line:116},endBody:{col:1,line:133}},"max-width":{startLoc:{col:25,line:134},endLoc:{col:1,line:175},startBody:{col:25,line:134},endBody:{col:1,line:175}},"full-screen":{startLoc:{col:33,line:176},endLoc:{col:1,line:191},startBody:{col:33,line:176},endBody:{col:1,line:191}},title:{startLoc:{col:28,line:192},endLoc:{col:1,line:206},startBody:{col:28,line:192},endBody:{col:1,line:206}},"selected-value":{startLoc:{col:30,line:207},endLoc:{col:1,line:253},startBody:{col:30,line:207},endBody:{col:1,line:253}}}}},title:"Feedback/Dialog",component:_FIXED_Dialog_Dialog,tags:["autodocs"]};var Default={args:{}},Actioned={args:{title:"Subscribe actions",children:react.createElement(react.Fragment,null,react.createElement(Dialog_DialogContentText,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally."),react.createElement(TextField.Z,{autoFocus:!0,margin:"dense",id:"name",label:"Email Address",type:"email",fullWidth:!0,variant:"standard"}))},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],handleClose=function(){return setOpen(!1)};return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open form dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{title:"Subscribe",open,onClose:handleClose,actions:[{label:"Cancel",onClick:function(){return handleClose()}},{label:"Subscribe",onClick:function(){return handleClose()}}]})))}},Draggable={args:{title:"Draggable title section",titleId:"my-dialog-id",contentId:"my-content-id",children:"To draggable dialog component click on title section and drag to anywhere",draggable:!0},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},Dividers={args:{title:"Dividers between header, content and footer",children:react.createElement(Dialog_DialogContentText,null,"See, there are dividers between title, content and actions"),dividers:!0,actions:[{label:"OK"}]},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},FullWidth={args:{title:"FullWidth",children:react.createElement(Dialog_DialogContentText,null,"fullWidth"),fullWidth:!0},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},Info={args:{titleId:"alert-dialog-title",contentId:"alert-dialog-description",title:"Use Google's location service?",autoContentPadding:!0,children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},AutoContentPadding={args:{titleId:"alert-dialog-title",contentId:"alert-dialog-description",title:"Set backup account",autoContentPadding:!1,children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},MaxWidth_=function(){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],_b=(0,react.useState)(!0),fullWidth=_b[0],setFullWidth=_b[1],_c=(0,react.useState)("sm"),maxWidth=_c[0],setMaxWidth=_c[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open max-width dialog"}),react.createElement(_FIXED_Dialog_Dialog,{title:"Optional sizes",fullWidth,maxWidth,open,onClose:function(){return setOpen(!1)}},react.createElement(Dialog_DialogContentText,null,"You can set my maximum width and whether to adapt or not."),react.createElement(Box.Z,{noValidate:!0,component:"form",sx:{display:"flex",flexDirection:"column",m:"auto",width:"fit-content"}},react.createElement(FormControl.Z,{sx:{mt:2,minWidth:120}},react.createElement(InputLabel.Z,{htmlFor:"max-width"},"maxWidth"),react.createElement(Select.Z,{autoFocus:!0,value:maxWidth,onChange:function(event){return setMaxWidth(event.target.value)},label:"maxWidth",inputProps:{name:"max-width",id:"max-width"}},react.createElement(MenuItem.Z,{value:!1},"false"),react.createElement(MenuItem.Z,{value:"xs"},"xs"),react.createElement(MenuItem.Z,{value:"sm"},"sm"),react.createElement(MenuItem.Z,{value:"md"},"md"),react.createElement(MenuItem.Z,{value:"lg"},"lg"),react.createElement(MenuItem.Z,{value:"xl"},"xl"))),react.createElement(FormControlLabel.Z,{sx:{mt:1},control:react.createElement(Switch.Z,{checked:fullWidth,onChange:function(event){return setFullWidth(event.target.checked)}}),label:"Full width"}))))},FullScreen={args:{title:"Set backup account",fullScreen:"sm",children:"to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect"},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},Title={args:{title:void 0,children:"to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect"},render:function(args){var _a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1];return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open Dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{open,onClose:function(){return setOpen(!1)}})))}},SelectedValue_=function(args){var emails=["username@gmail.com","user02@gmail.com"],_a=(0,react.useState)(!1),open=_a[0],setOpen=_a[1],_b=(0,react.useState)(emails[1]),selectedValue=_b[0],setSelectedValue=_b[1],handleClose=function(value){setOpen(!1),setSelectedValue(value)};return react.createElement(Box.Z,null,react.createElement(Typography.Z,{variant:"subtitle1",component:"div"},"Selected: ",selectedValue),react.createElement("br",null),react.createElement(Button.Z,{variant:"outlined",onClick:function(){return setOpen(!0)},label:"Open simple dialog"}),react.createElement(_FIXED_Dialog_Dialog,Dialog_stories_extends({},args,{selectedValue,open,onClose:handleClose,title:"Set backup account",autoContentPadding:!1}),react.createElement(List.Z,{sx:{pt:0}},emails.map((function(email){return react.createElement(ListItem.ZP,{key:email,disableGutters:!0},react.createElement(ListItemButton.Z,{onClick:function(){return handleClose(email)},key:email},react.createElement(ListItemAvatar.Z,null,react.createElement(Avatar.Z,{sx:{bgcolor:blue.Z[100],color:blue.Z[600]}},react.createElement(Person.Z,null))),react.createElement(ListItemText.Z,{primary:email})))})),react.createElement(ListItem.ZP,{disableGutters:!0},react.createElement(ListItemButton.Z,{autoFocus:!0,onClick:function(){return handleClose("addAccount")}},react.createElement(ListItemAvatar.Z,null,react.createElement(Avatar.Z,null,react.createElement(Add.Z,null))),react.createElement(ListItemText.Z,{primary:"Add account"}))))))};SelectedValue_.displayName="SelectedValue_",Default.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Default.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{},{source:Dialog_stories_objectSpread({originalSource:"{\n  args: {}\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),Actioned.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Actioned.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_d=Actioned.parameters)||void 0===_d?void 0:_d.docs),{},{source:Dialog_stories_objectSpread({originalSource:'{\n  args: {\n    title: \'Subscribe actions\',\n    children: <>\n                <DialogContentText>\n                    To subscribe to this website, please enter your email address here. We will send updates\n                    occasionally.\n                </DialogContentText>\n                <TextField autoFocus margin="dense" id="name" label="Email Address" type="email" fullWidth variant="standard" />\n            </>\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open form dialog" />\n                <Dialog {...args} title="Subscribe" open={open} onClose={handleClose} actions={[{\n        label: \'Cancel\',\n        onClick: () => handleClose()\n      }, {\n        label: \'Subscribe\',\n        onClick: () => handleClose()\n      }]} />\n            </>;\n  }\n}'},null===(_f=null===(_e=Actioned.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),Draggable.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Draggable.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_g=Draggable.parameters)||void 0===_g?void 0:_g.docs),{},{source:Dialog_stories_objectSpread({originalSource:"{\n  args: {\n    title: 'Draggable title section',\n    titleId: 'my-dialog-id',\n    contentId: 'my-content-id',\n    children: 'To draggable dialog component click on title section and drag to anywhere',\n    draggable: true\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant=\"outlined\" onClick={handleClickOpen} label=\"Open Dialog\" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}"},null===(_j=null===(_h=Draggable.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),Dividers.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Dividers.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_k=Dividers.parameters)||void 0===_k?void 0:_k.docs),{},{source:Dialog_stories_objectSpread({originalSource:"{\n  args: {\n    title: 'Dividers between header, content and footer',\n    children: <DialogContentText>See, there are dividers between title, content and actions</DialogContentText>,\n    dividers: true,\n    actions: [{\n      label: 'OK'\n    }]\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant=\"outlined\" onClick={handleClickOpen} label=\"Open Dialog\" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}"},null===(_m=null===(_l=Dividers.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),FullWidth.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},FullWidth.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_o=FullWidth.parameters)||void 0===_o?void 0:_o.docs),{},{source:Dialog_stories_objectSpread({originalSource:'{\n  args: {\n    title: \'FullWidth\',\n    children: <DialogContentText>fullWidth</DialogContentText>,\n    fullWidth: true\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}'},null===(_q=null===(_p=FullWidth.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),Info.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Info.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_r=Info.parameters)||void 0===_r?void 0:_r.docs),{},{source:Dialog_stories_objectSpread({originalSource:"{\n  args: {\n    titleId: 'alert-dialog-title',\n    contentId: 'alert-dialog-description',\n    title: \"Use Google's location service?\",\n    autoContentPadding: true,\n    children: 'Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant=\"outlined\" onClick={handleClickOpen} label=\"Open Dialog\" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}"},null===(_t=null===(_s=Info.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),AutoContentPadding.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},AutoContentPadding.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_u=AutoContentPadding.parameters)||void 0===_u?void 0:_u.docs),{},{source:Dialog_stories_objectSpread({originalSource:"{\n  args: {\n    titleId: 'alert-dialog-title',\n    contentId: 'alert-dialog-description',\n    title: 'Set backup account',\n    autoContentPadding: false,\n    children: 'Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant=\"outlined\" onClick={handleClickOpen} label=\"Open Dialog\" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}"},null===(_w=null===(_v=AutoContentPadding.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})}),MaxWidth_.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},MaxWidth_.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_x=MaxWidth_.parameters)||void 0===_x?void 0:_x.docs),{},{source:Dialog_stories_objectSpread({originalSource:"() => {\n  const [open, setOpen] = useState(false);\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState<false | 'xs' | 'sm' | 'md' | 'lg' | 'xl'>('sm');\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\n  return <>\n            <Button variant=\"outlined\" onClick={handleClickOpen} label=\"Open max-width dialog\" />\n            <Dialog title=\"Optional sizes\" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n                <DialogContentText>You can set my maximum width and whether to adapt or not.</DialogContentText>\n                <Box noValidate component=\"form\" sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        m: 'auto',\n        width: 'fit-content'\n      }}>\n                    <FormControl sx={{\n          mt: 2,\n          minWidth: 120\n        }}>\n                        <InputLabel htmlFor=\"max-width\">maxWidth</InputLabel>\n                        <Select autoFocus value={(maxWidth as any)} onChange={handleMaxWidthChange} label=\"maxWidth\" inputProps={{\n            name: 'max-width',\n            id: 'max-width'\n          }}>\n                            <MenuItem value={(false as string)}>false</MenuItem>\n                            <MenuItem value=\"xs\">xs</MenuItem>\n                            <MenuItem value=\"sm\">sm</MenuItem>\n                            <MenuItem value=\"md\">md</MenuItem>\n                            <MenuItem value=\"lg\">lg</MenuItem>\n                            <MenuItem value=\"xl\">xl</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <FormControlLabel sx={{\n          mt: 1\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label=\"Full width\" />\n                </Box>\n            </Dialog>\n        </>;\n}"},null===(_z=null===(_y=MaxWidth_.parameters)||void 0===_y?void 0:_y.docs)||void 0===_z?void 0:_z.source)})}),FullScreen.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},FullScreen.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_0=FullScreen.parameters)||void 0===_0?void 0:_0.docs),{},{source:Dialog_stories_objectSpread({originalSource:"{\n  args: {\n    title: 'Set backup account',\n    fullScreen: 'sm',\n    children: 'to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant=\"outlined\" onClick={handleClickOpen} label=\"Open Dialog\" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}"},null===(_2=null===(_1=FullScreen.parameters)||void 0===_1?void 0:_1.docs)||void 0===_2?void 0:_2.source)})}),Title.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Title.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_3=Title.parameters)||void 0===_3?void 0:_3.docs),{},{source:Dialog_stories_objectSpread({originalSource:'{\n  args: {\n    title: undefined,\n    children: \'to see it in fullscreen you need to rich to sm size, you can change this breakpoint. small you screen to see this effect\'\n  },\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    return <>\n                <Button variant="outlined" onClick={handleClickOpen} label="Open Dialog" />\n                <Dialog {...args} open={open} onClose={handleClose} />\n            </>;\n  }\n}'},null===(_5=null===(_4=Title.parameters)||void 0===_4?void 0:_4.docs)||void 0===_5?void 0:_5.source)})}),SelectedValue_.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},SelectedValue_.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_6=SelectedValue_.parameters)||void 0===_6?void 0:_6.docs),{},{source:Dialog_stories_objectSpread({originalSource:'args => {\n  const emails = [\'username@gmail.com\', \'user02@gmail.com\'];\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = value => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n  return <Box>\n            <Typography variant="subtitle1" component="div">\n                Selected: {selectedValue}\n            </Typography>\n            <br />\n            <Button variant="outlined" onClick={handleClickOpen} label="Open simple dialog" />\n            <Dialog {...args} selectedValue={selectedValue} open={open} onClose={handleClose} title="Set backup account" autoContentPadding={false}>\n                <List sx={{\n        pt: 0\n      }}>\n                    {emails.map(email => <ListItem key={email} disableGutters>\n                            <ListItemButton onClick={() => handleClose(email)} key={email}>\n                                <ListItemAvatar>\n                                    <Avatar sx={{\n                bgcolor: colors.blue[100],\n                color: colors.blue[600]\n              }}>\n                                        <PersonIcon />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText primary={email} />\n                            </ListItemButton>\n                        </ListItem>)}\n\n                    <ListItem disableGutters>\n                        <ListItemButton autoFocus onClick={() => handleClose(\'addAccount\')}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <AddIcon />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary="Add account" />\n                        </ListItemButton>\n                    </ListItem>\n                </List>\n            </Dialog>\n        </Box>;\n}'},null===(_8=null===(_7=SelectedValue_.parameters)||void 0===_7?void 0:_7.docs)||void 0===_8?void 0:_8.source)})});var __namedExportsOrder=["Default","Actioned","Draggable","Dividers","FullWidth","Info","AutoContentPadding","MaxWidth_","FullScreen","Title","SelectedValue_"];try{SelectedValue_.displayName="SelectedValue_",SelectedValue_.__docgenInfo={description:"",displayName:"SelectedValue_",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Dialog/__stories__/Dialog.stories.tsx#SelectedValue_"]={docgenInfo:SelectedValue_.__docgenInfo,name:"SelectedValue_",path:"src/components/_FIXED/Dialog/__stories__/Dialog.stories.tsx#SelectedValue_"})}catch(__react_docgen_typescript_loader_error){}}}]);