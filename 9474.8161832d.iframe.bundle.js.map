{"version":3,"file":"9474.8161832d.iframe.bundle.js","mappings":";;;;;;;;AAsCA;;AAIA;;AAYA;AACA;AACA;;AAIA;;;;AAMA;;;;;;AAQA;;AAKA;;;;;AAOA;;AAIA;;;AAKA;;;;AAMA;;;AAgBA;;;;;AC1GA;;;;;AAMA;;;;;AAYA;;;;;AAMA;ACZA;;;AAGA;AACA;AACA;AAuBA","sources":["webpack://mui-simple/./src/components/_FIXED/Stepper/Stepper.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styled.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { get } from 'lodash-es';\nimport { styled } from '@mui/material/styles';\nimport {\n    Box as MuiBox,\n    Step as MuiStep,\n    StepLabel as MuiStepLabel,\n    Stepper as MuiStepper,\n    StepContent as MuiStepContent,\n    StepConnector as MuiStepConnector,\n    stepConnectorClasses,\n} from '@mui/material';\nimport type { StepperProps, StepContentProps, StepLabelProps, BoxProps, StepConnectorProps } from '@mui/material';\n\nimport MuiTypography from '../Typography/Typography';\nimport MuiButton from '../Button/Button';\nimport { numberToPx } from '../../../utils/helpers';\n\nexport const Typography = MuiTypography;\n\nexport const Button = MuiButton;\n\ninterface StepperStyledProps {\n    lineWidth?: number;\n    lineColor?: string;\n    marginContent?: number | string;\n}\ntype StepperStyledPropsType = StepperStyledProps & StepperProps;\nexport const Stepper = styled(MuiStepper, {\n    shouldForwardProp: (propName: string) => !['lineWidth', 'lineColor', 'marginContent'].includes(propName as string),\n})<StepperStyledPropsType>`\n    &.MuiStepper-root.MuiStepper-vertical.MuiStepper-alternativeLabel {\n        gap: 1.5em;\n    }\n    & .MuiStep-root.MuiStep-vertical.MuiStep-alternativeLabel {\n        width: 100%;\n    }\n    & .MuiStepConnector-vertical {\n        margin-left: ${(props: any) => numberToPx(props.marginContent)};\n    }\n`;\n\nexport const Step = MuiStep;\n\ninterface StepContentStyledProps {\n    lineWidth?: string | number;\n    lineColor?: string;\n    marginContent?: string | number;\n}\ntype StepContentStyledPropsType = StepContentStyledProps & StepContentProps;\nexport const StepContent = styled(MuiStepContent, {\n    shouldForwardProp: (propName: string) => !['lineWidth', 'lineColor', 'marginContent'].includes(propName as string),\n})<StepContentStyledPropsType>`\n    &.MuiStepContent-root {\n        border-width: ${(props: any) => numberToPx(props.lineWidth) ?? '3px'};\n        border-color: ${(props: any) => props.lineColor ?? '#eaeaf0'};\n        margin-left: ${(props: any) => numberToPx(props.marginContent)};\n    }\n`;\n\nexport const StepLabel = styled(MuiStepLabel, {\n    shouldForwardProp: (propName: string) => ![].includes(propName as string),\n})<any>`\n    & .MuiStepIcon-root.Mui-active,\n    & .MuiStepIcon-root.Mui-completed,\n    & .MuiStepLabel-label.Mui-active {\n        color: ${(props: any) => props.color};\n\n        .MuiStepIcon-text {\n            fill: #ffffff;\n        }\n    }\n`;\n\nexport const Box = styled(MuiBox)<BoxProps>``;\nexport const Container = styled(MuiBox)<BoxProps>`\n    width: 100%;\n`;\n\nexport const ActionContainer = styled(MuiBox)<BoxProps>`\n    margin-bottom: 32px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const FullSpaceBox = styled(MuiBox)<BoxProps>`\n    flex: 1 1 auto;\n`;\n\nexport const ContentContainer: React.FC<PropsWithChildren<BoxProps>> = styled(MuiBox)<BoxProps>`\n    margin-block-start: 32px;\n    margin-block-end: 16px;\n`;\n\nexport const VerticalActionContainer = styled(MuiBox)<BoxProps>`\n    display: flex;\n    flex-direction: row;\n    padding-block-start: 32px;\n`;\n\nexport const ActionButton = styled(Button)<BoxProps>`\n    margin-block-start: 16px;\n    margin-inline-end: 16px;\n`;\n\ninterface OwnerState {\n    completed?: boolean;\n    active?: boolean;\n}\ninterface ConnectorStepIconRootStyledProps {\n    theme?: string;\n    ownerState?: OwnerState;\n    padding?: string | number;\n    background?: string;\n    fontSize?: string | number;\n}\nexport const ConnectorStepIconRoot = styled('div')<ConnectorStepIconRootStyledProps>(\n    ({ theme, ownerState, padding, background, fontSize = 25 }) => ({\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#ccc',\n        zIndex: 1,\n        color: '#fff',\n        width: 50,\n        height: 50,\n        fontSize: numberToPx(fontSize),\n        padding: numberToPx(padding),\n        display: 'flex',\n        borderRadius: '50%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        ...(ownerState.active && {\n            ...(background?.includes('gradient')\n                ? { backgroundImage: background }\n                : { background, backgroundImage: 'unset' }),\n            boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n        }),\n        ...(ownerState.completed && {\n            ...(background?.includes('gradient')\n                ? { backgroundImage: background }\n                : { background, backgroundImage: 'unset' }),\n        }),\n    })\n);\n\ninterface StepConnectorStyledProps {\n    theme?: string;\n    orientation?: string;\n    background?: string;\n    lineColor?: string;\n    lineWidth?: string | number;\n    color?: string;\n}\ntype StepConnectorStyledPropsType = StepConnectorStyledProps & StepConnectorProps;\nexport const StepConnector = styled(MuiStepConnector)<StepConnectorStyledPropsType>(\n    ({ theme, orientation, background, lineColor, lineWidth = 3, color }) => {\n        const bgColor = lineColor ?? background ?? color ?? get(theme, `palette.primary.main`);\n\n        const bgColorProp = bgColor?.includes('gradient') ? { backgroundImage: bgColor } : { background: bgColor };\n\n        return {\n            [`&.${stepConnectorClasses.alternativeLabel}`]: {\n                top: 22,\n            },\n            [`&.${stepConnectorClasses.active}`]: {\n                [`& .${stepConnectorClasses.line}`]: { ...bgColorProp },\n            },\n            [`&.${stepConnectorClasses.completed}`]: {\n                [`& .${stepConnectorClasses.line}`]: { ...bgColorProp },\n            },\n            [`& .${stepConnectorClasses.line}`]: {\n                ...(orientation === 'vertical' ? { width: numberToPx(lineWidth) } : { height: numberToPx(lineWidth) }),\n                border: 0,\n                backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n                borderRadius: 1,\n            },\n        };\n    }\n);\n\ninterface QontoConnectorStyledProps {\n    theme?: string;\n    fontSize?: string | number;\n    background?: string;\n    lineColor?: string;\n    lineWidth?: string | number;\n    color?: string;\n    orientation?: string;\n}\nexport const QontoConnector = styled(MuiStepConnector)<QontoConnectorStyledProps>(\n    ({ theme, fontSize, background, lineColor, lineWidth = 3, color: _color }) => {\n        const color = lineColor ?? background ?? _color ?? get(theme, `palette.primary.main`);\n\n        return {\n            [`&.${stepConnectorClasses.alternativeLabel}`]: {\n                top: 10,\n                left: 'calc(-50% + 16px)',\n                right: 'calc(50% + 16px)',\n            },\n            [`&.${stepConnectorClasses.active}`]: {\n                [`& .${stepConnectorClasses.line}`]: {\n                    borderColor: color,\n                },\n            },\n            [`&.${stepConnectorClasses.completed}`]: {\n                [`& .${stepConnectorClasses.line}`]: {\n                    borderColor: color,\n                },\n            },\n            [`& .${stepConnectorClasses.line}`]: {\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n                borderTopWidth: numberToPx(lineWidth),\n                borderRadius: 1,\n            },\n        };\n    }\n);\n\ninterface QontoStepStyledProps {\n    theme?: string;\n    ownerState?: OwnerState;\n    background?: string;\n    padding?: string;\n    fontSize?: string;\n    color?: string;\n}\n// Todo: check why fontSize, color are unused\nexport const QontoStepIconRoot = styled('div')<QontoStepStyledProps>(\n    ({ theme, ownerState, background, padding = 10, fontSize = 25, color }) => {\n        const backgroundColor = background ?? color ?? get(theme, `palette.primary.main`);\n\n        return {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\n            display: 'flex',\n            height: 22,\n            alignItems: 'center',\n            ...(ownerState.active && { color: backgroundColor }),\n            '& .QontoStepIcon-completedIcon': {\n                color: backgroundColor,\n                zIndex: 1,\n            },\n            '& .QontoStepIcon-circle': {\n                color: backgroundColor,\n                width: numberToPx(padding),\n                height: numberToPx(padding),\n                borderRadius: '50%',\n                backgroundColor: 'currentColor',\n            },\n        };\n    }\n);\n","import { css } from '@mui/material/styles';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nexport function ellipsisRow1(props): SerializedStyles {\n    if (props.noWrap || props.rows !== 1) return css``;\n\n    return css`\n        text-overflow: ellipsis;\n        white-space: normal;\n        overflow: hidden;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\n\nexport function ellipsisRows(props): SerializedStyles {\n    if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\n        return css``;\n    }\n\n    return css`\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: normal;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\n","import React from 'react';\nimport type { ComponentType } from 'react';\nimport { Box, Typography as MuiTypography } from '@mui/material';\nimport type { TypographyProps, BoxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport classNames from 'classnames';\n\nimport { ellipsisRow1, ellipsisRows } from './Typography.styles';\nimport { numberToPx } from '../../../utils/helpers';\n\ninterface TypographyBorderProps {\n    autoWidth?: boolean;\n    border?: boolean | string;\n    noWrap?: boolean;\n    rows?: number;\n    width?: string | number;\n    [key: string]: any;\n}\ntype TypographyBorderPropsType = Omit<BoxProps, 'border'> & TypographyBorderProps;\n\nexport const Border = styled(Box, {\n    shouldForwardProp: (propName: string) => !['autoWidth', 'noWrap', 'border', 'rows'].includes(propName as string),\n})<TypographyBorderPropsType>`\n    width: ${(props: any) => numberToPx(props.width) ?? (props.autoWidth ? 'auto' : '100%')};\n    display: flex;\n    align-items: center;\n    border: ${(props: any) => (props.border && typeof props.border === 'boolean' ? '1px solid black' : props.border)};\n    ${ellipsisRows}\n    ${ellipsisRow1}\n` as ComponentType<TypographyBorderPropsType>;\n\ninterface TypographyStyledProps {\n    bgColor?: string;\n    bold?: boolean | string;\n    charsCase?: string;\n    customColor?: string;\n    fontSize?: number | string;\n    italic?: boolean;\n    lineHeight?: string | number;\n    monospace?: boolean;\n    myClassName?: string | string[];\n    strike?: boolean;\n    sub?: boolean;\n    sup?: boolean;\n    underline?: boolean;\n\n    [key: string]: any;\n}\ntype TypographyStyledPropsType = Omit<TypographyProps, 'fontSize' | 'align' | 'border' | 'component'> &\n    TypographyStyledProps;\n\nexport const Typography = styled(\n    ({ className, myClassName, children, ...props }: TypographyStyledPropsType) => (\n        <MuiTypography className={classNames([className, myClassName])} component=\"span\" {...props}>\n            {children}\n        </MuiTypography>\n    ),\n    {\n        shouldForwardProp: (propName: string) =>\n            ![\n                'bgColor',\n                'bold',\n                'charsCase',\n                'customColor',\n                'font',\n                'fontSize',\n                'italic',\n                'lineHeight',\n                'monospace',\n                'strike',\n                'sub',\n                'sup',\n                'textDirection',\n                'textWidth',\n                'underline',\n            ].includes(propName),\n    }\n    // @ts-expect-error\n)<TypographyStyledPropsType>((props) => ({\n    position: 'relative',\n    display: props.display ?? 'unset',\n    color: props.customColor,\n    backgroundColor: props.bgColor,\n    fontWeight: props.bold && typeof props.bold === 'boolean' ? 'bold' : props.bold,\n    fontSize: numberToPx(props.fontSize),\n    fontStyle: props.italic ? 'italic' : undefined,\n    fontFamily: props.font ?? undefined,\n    textDecoration: props.strike ? 'line-through' : props.underline ? 'underline' : undefined,\n    textTransform: { upper: 'uppercase', lower: 'lowercase', capital: 'capitalize' }[props.charsCase],\n    verticalAlign: props.sup ? 'super' : props.sub ? 'sub' : undefined,\n    lineHeight: props.lineHeight,\n    direction: props.textDirection ? `${props.textDirection as string} /* @noflip */` : undefined,\n    whiteSpace: props.noWrap ? 'nowrap' : 'normal',\n    width: props.textWidth ?? 'inherit',\n    ...(props.justifyContent && { justifyContent: props.justifyContent }),\n    ...(props.monospace && { fontFamily: 'monospace' }),\n})) as ComponentType<TypographyStyledPropsType>;\n"],"names":[],"sourceRoot":""}