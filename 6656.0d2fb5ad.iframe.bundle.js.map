{"version":3,"file":"6656.0d2fb5ad.iframe.bundle.js","mappings":";;;;;;;;AAsCA;;AAIA;;AAYA;AACA;AACA;;AAIA;;;;AAMA;;;;;;AASA;;AAIA;;;;;AAOA;;AAIA;;;AAKA;;;;AAMA;;;AAgBA","sources":["webpack://mui-simple/./src/components/_FIXED/Stepper/Stepper.styled.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { get } from 'lodash-es';\nimport { styled } from '@mui/material/styles';\nimport {\n    Box as MuiBox,\n    Step as MuiStep,\n    StepLabel as MuiStepLabel,\n    Stepper as MuiStepper,\n    StepContent as MuiStepContent,\n    StepConnector as MuiStepConnector,\n    stepConnectorClasses,\n} from '@mui/material';\nimport type { StepperProps, StepContentProps, StepLabelProps, BoxProps, StepConnectorProps } from '@mui/material';\n\nimport MuiTypography from '../Typography/Typography';\nimport MuiButton from '../Button/Button';\nimport { numberToPx } from '../../../utils/helpers';\n\nexport const Typography = MuiTypography;\n\nexport const Button = MuiButton;\n\ninterface StepperStyledProps {\n    lineWidth?: number;\n    lineColor?: string;\n    marginContent?: number | string;\n}\ntype StepperStyledPropsType = StepperStyledProps & StepperProps;\nexport const Stepper = styled(MuiStepper, {\n    shouldForwardProp: (propName: string) => !['lineWidth', 'lineColor', 'marginContent'].includes(propName as string),\n})<StepperStyledPropsType>`\n    &.MuiStepper-root.MuiStepper-vertical.MuiStepper-alternativeLabel {\n        gap: 1.5em;\n    }\n    & .MuiStep-root.MuiStep-vertical.MuiStep-alternativeLabel {\n        width: 100%;\n    }\n    & .MuiStepConnector-vertical {\n        margin-left: ${(props: any) => numberToPx(props.marginContent)};\n    }\n`;\n\nexport const Step = MuiStep;\n\ninterface StepContentStyledProps {\n    lineWidth?: string | number;\n    lineColor?: string;\n    marginContent?: string | number;\n}\ntype StepContentStyledPropsType = StepContentStyledProps & StepContentProps;\nexport const StepContent = styled(MuiStepContent, {\n    shouldForwardProp: (propName: string) => !['lineWidth', 'lineColor', 'marginContent'].includes(propName as string),\n})<StepContentStyledPropsType>`\n    &.MuiStepContent-root {\n        border-width: ${(props: any) => numberToPx(props.lineWidth) ?? '3px'};\n        border-color: ${(props: any) => props.lineColor ?? '#eaeaf0'};\n        margin-left: ${(props: any) => numberToPx(props.marginContent)};\n    }\n`;\n\nexport const StepLabel = styled(MuiStepLabel, {\n    shouldForwardProp: (propName: string) => ![].includes(propName as string),\n})<any>`\n    & .MuiStepIcon-root.Mui-active,\n    & .MuiStepIcon-root.Mui-completed,\n    & .MuiStepLabel-label.Mui-active {\n        color: ${(props: any) => props.color};\n\n        .MuiStepIcon-text {\n            fill: #ffffff;\n        }\n    }\n`;\n\nexport const Box = styled(MuiBox)<BoxProps>``;\nexport const Container = styled(MuiBox)<BoxProps>`\n    width: 100%;\n`;\n\nexport const ActionContainer = styled(MuiBox)<BoxProps>`\n    margin-bottom: 32px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nexport const FullSpaceBox = styled(MuiBox)<BoxProps>`\n    flex: 1 1 auto;\n`;\n\nexport const ContentContainer: React.FC<PropsWithChildren<BoxProps>> = styled(MuiBox)<BoxProps>`\n    margin-block-start: 32px;\n    margin-block-end: 16px;\n`;\n\nexport const VerticalActionContainer = styled(MuiBox)<BoxProps>`\n    display: flex;\n    flex-direction: row;\n    padding-block-start: 32px;\n`;\n\nexport const ActionButton = styled(Button)<BoxProps>`\n    margin-block-start: 16px;\n    margin-inline-end: 16px;\n`;\n\ninterface OwnerState {\n    completed?: boolean;\n    active?: boolean;\n}\ninterface ConnectorStepIconRootStyledProps {\n    theme?: string;\n    ownerState?: OwnerState;\n    padding?: string | number;\n    background?: string;\n    fontSize?: string | number;\n}\nexport const ConnectorStepIconRoot = styled('div')<ConnectorStepIconRootStyledProps>(\n    ({ theme, ownerState, padding, background, fontSize = 25 }) => ({\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#ccc',\n        zIndex: 1,\n        color: '#fff',\n        width: 50,\n        height: 50,\n        fontSize: numberToPx(fontSize),\n        padding: numberToPx(padding),\n        display: 'flex',\n        borderRadius: '50%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        ...(ownerState.active && {\n            ...(background?.includes('gradient')\n                ? { backgroundImage: background }\n                : { background, backgroundImage: 'unset' }),\n            boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\n        }),\n        ...(ownerState.completed && {\n            ...(background?.includes('gradient')\n                ? { backgroundImage: background }\n                : { background, backgroundImage: 'unset' }),\n        }),\n    })\n);\n\ninterface StepConnectorStyledProps {\n    theme?: string;\n    orientation?: string;\n    background?: string;\n    lineColor?: string;\n    lineWidth?: string | number;\n    color?: string;\n}\ntype StepConnectorStyledPropsType = StepConnectorStyledProps & StepConnectorProps;\nexport const StepConnector = styled(MuiStepConnector)<StepConnectorStyledPropsType>(\n    ({ theme, orientation, background, lineColor, lineWidth = 3, color }) => {\n        const bgColor = lineColor ?? background ?? color ?? get(theme, `palette.primary.main`);\n\n        const bgColorProp = bgColor?.includes('gradient') ? { backgroundImage: bgColor } : { background: bgColor };\n\n        return {\n            [`&.${stepConnectorClasses.alternativeLabel}`]: {\n                top: 22,\n            },\n            [`&.${stepConnectorClasses.active}`]: {\n                [`& .${stepConnectorClasses.line}`]: { ...bgColorProp },\n            },\n            [`&.${stepConnectorClasses.completed}`]: {\n                [`& .${stepConnectorClasses.line}`]: { ...bgColorProp },\n            },\n            [`& .${stepConnectorClasses.line}`]: {\n                ...(orientation === 'vertical' ? { width: numberToPx(lineWidth) } : { height: numberToPx(lineWidth) }),\n                border: 0,\n                backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n                borderRadius: 1,\n            },\n        };\n    }\n);\n\ninterface QontoConnectorStyledProps {\n    theme?: string;\n    fontSize?: string | number;\n    background?: string;\n    lineColor?: string;\n    lineWidth?: string | number;\n    color?: string;\n    orientation?: string;\n}\nexport const QontoConnector = styled(MuiStepConnector)<QontoConnectorStyledProps>(\n    ({ theme, fontSize, background, lineColor, lineWidth = 3, color: _color }) => {\n        const color = lineColor ?? background ?? _color ?? get(theme, `palette.primary.main`);\n\n        return {\n            [`&.${stepConnectorClasses.alternativeLabel}`]: {\n                top: 10,\n                left: 'calc(-50% + 16px)',\n                right: 'calc(50% + 16px)',\n            },\n            [`&.${stepConnectorClasses.active}`]: {\n                [`& .${stepConnectorClasses.line}`]: {\n                    borderColor: color,\n                },\n            },\n            [`&.${stepConnectorClasses.completed}`]: {\n                [`& .${stepConnectorClasses.line}`]: {\n                    borderColor: color,\n                },\n            },\n            [`& .${stepConnectorClasses.line}`]: {\n                borderColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\n                borderTopWidth: numberToPx(lineWidth),\n                borderRadius: 1,\n            },\n        };\n    }\n);\n\ninterface QontoStepStyledProps {\n    theme?: string;\n    ownerState?: OwnerState;\n    background?: string;\n    padding?: string;\n    fontSize?: string;\n    color?: string;\n}\n// Todo: check why fontSize, color are unused\nexport const QontoStepIconRoot = styled('div')<QontoStepStyledProps>(\n    ({ theme, ownerState, background, padding = 10, fontSize = 25, color }) => {\n        const backgroundColor = background ?? color ?? get(theme, `palette.primary.main`);\n\n        return {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#eaeaf0',\n            display: 'flex',\n            height: 22,\n            alignItems: 'center',\n            ...(ownerState.active && { color: backgroundColor }),\n            '& .QontoStepIcon-completedIcon': {\n                color: backgroundColor,\n                zIndex: 1,\n            },\n            '& .QontoStepIcon-circle': {\n                color: backgroundColor,\n                width: numberToPx(padding),\n                height: numberToPx(padding),\n                borderRadius: '50%',\n                backgroundColor: 'currentColor',\n            },\n        };\n    }\n);\n"],"names":[],"sourceRoot":""}