{"version":3,"file":"826.1a810e87.iframe.bundle.js","mappings":";;AAsCA;;;;;;;;AAWA;;AAOA;AACA;AACA;AAEA;;;AAKA;AACA;AACA;AAEA","sources":["webpack://mui-simple/./src/components/_FIXED/List/List.styled.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n    Box as MuiBox,\n    List as MuiList,\n    ListItem as MuiListItem,\n    ListItemAvatar as MuiListItemAvatar,\n    ListItemButton as MuiListItemButton,\n    ListItemButtonProps,\n    ListItemIcon as MuiListItemIcon,\n    ListItemSecondaryAction as MuiListItemSecondaryAction,\n    ListItemText as MuiListItemText,\n    ListSubheader as MuiListSubheader,\n    Collapse as MuiCollapse,\n} from '@mui/material';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { styled } from '@mui/material/styles';\nimport MuiDivider from '../Divider/Divider';\nimport { numberToPx } from '../../../utils/helpers';\nimport { FlexDirectionType } from '../../decs';\n\nexport const Divider = MuiDivider;\nexport const Collapse = MuiCollapse;\n\nexport const List = styled(({ useTransition, children, ...props }: any) => (\n    <MuiList {...props}>\n        {useTransition && children ? (\n            <TransitionGroup>\n                <CSSTransition timeout={500}>{children}</CSSTransition>\n            </TransitionGroup>\n        ) : (\n            children\n        )}\n    </MuiList>\n))`\n    width: 100%;\n`;\n\nexport const ListItem = styled(MuiListItem, {\n    shouldForwardProp: (propName: string) => !['flexDirectionItems'].includes(propName as string),\n})`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    & .MuiCollapse-root {\n        width: 100%;\n    }\n`;\nexport const ListItemAvatar = MuiListItemAvatar;\nexport const ListItemButton: React.FC<\n    ListItemButtonProps & { href?: string; padding?: string | number; flexDirection?: FlexDirectionType }\n> = styled(MuiListItemButton, {\n    shouldForwardProp: (propName: string) => !['flexDirection', 'draggable'].includes(propName),\n})`\n    width: 100%;\n    padding: ${(props: any) => numberToPx(props.padding)};\n    flex-direction: ${(props: any) => props.flexDirection ?? 'row'};\n    padding-inline-end: ${(props: any) => (props.draggable ? '3.5em' : undefined)};\n`;\nexport const ListItemBox = styled(MuiBox, {\n    shouldForwardProp: (propName: string) => !['flexDirection', 'draggable'].includes(propName),\n})`\n    width: 100%;\n    display: flex;\n    padding: ${(props: any) => props.padding};\n    flex-direction: ${(props: any) => props.flexDirection ?? 'row'};\n    padding-inline-end: ${(props: any) => (props.draggable ? '3.5em' : undefined)};\n`;\nexport const ListItemIcon = MuiListItemIcon;\nexport const ListItemSecondaryAction = MuiListItemSecondaryAction;\nexport const ListItemText = MuiListItemText;\nexport const ListSubheader = MuiListSubheader;\n"],"names":[],"sourceRoot":""}