"use strict";(self.webpackChunk_hdriel_mui_simple=self.webpackChunk_hdriel_mui_simple||[]).push([[4792],{"./src/components/Dialog/__stories__/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Actioned:()=>Actioned,Default:()=>Default,DisableAutoPadding:()=>DisableAutoPadding,Dividers:()=>Dividers,Draggabled:()=>Draggabled,Fullscreen:()=>Fullscreen,Info:()=>Info,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dialog_stories});var react=__webpack_require__("./node_modules/react/index.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),FormControl=__webpack_require__("./node_modules/@mui/material/FormControl/FormControl.js"),InputLabel=__webpack_require__("./node_modules/@mui/material/InputLabel/InputLabel.js"),Select=__webpack_require__("./node_modules/@mui/material/Select/Select.js"),MenuItem=__webpack_require__("./node_modules/@mui/material/MenuItem/MenuItem.js"),FormControlLabel=__webpack_require__("./node_modules/@mui/material/FormControlLabel/FormControlLabel.js"),Switch=__webpack_require__("./node_modules/@mui/material/Switch/Switch.js"),TextField=__webpack_require__("./node_modules/@mui/material/TextField/TextField.js"),Typography=__webpack_require__("./node_modules/@mui/material/Typography/Typography.js"),List=__webpack_require__("./node_modules/@mui/material/List/List.js"),ListItem=__webpack_require__("./node_modules/@mui/material/ListItem/ListItem.js"),ListItemButton=__webpack_require__("./node_modules/@mui/material/ListItemButton/ListItemButton.js"),ListItemAvatar=__webpack_require__("./node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js"),Avatar=__webpack_require__("./node_modules/@mui/material/Avatar/Avatar.js"),ListItemText=__webpack_require__("./node_modules/@mui/material/ListItemText/ListItemText.js"),blue=__webpack_require__("./node_modules/@mui/material/colors/blue.js"),Person=__webpack_require__("./node_modules/@mui/icons-material/esm/Person.js"),Add=__webpack_require__("./node_modules/@mui/icons-material/esm/Add.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Slide=__webpack_require__("./node_modules/@mui/material/Slide/Slide.js"),Paper=__webpack_require__("./node_modules/@mui/material/Paper/Paper.js"),useMediaQuery=__webpack_require__("./node_modules/@mui/material/useMediaQuery/useMediaQuery.js"),Dialog=__webpack_require__("./node_modules/@mui/material/Dialog/Dialog.js"),DialogTitle=__webpack_require__("./node_modules/@mui/material/DialogTitle/DialogTitle.js"),DialogContent=__webpack_require__("./node_modules/@mui/material/DialogContent/DialogContent.js"),DialogContentText=__webpack_require__("./node_modules/@mui/material/DialogContentText/DialogContentText.js"),DialogActions=__webpack_require__("./node_modules/@mui/material/DialogActions/DialogActions.js"),useTheme=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js"),cjs=__webpack_require__("./node_modules/react-draggable/build/cjs/cjs.js"),cjs_default=__webpack_require__.n(cjs),Button_Button=__webpack_require__("./src/components/Button/Button.tsx"),_excluded=["children"],_excluded2=["titleId"],_excluded3=["onClose","title","titleId","dividers","contentId","selectedValue","open","actions","fullWidth","maxWidth","fullScreen","draggable","children","autoContentPadding"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Transition=(0,react.forwardRef)((function Transition(_ref,ref){var{children}=_ref,props=_objectWithoutProperties(_ref,_excluded);return react.createElement(Slide.Z,_objectSpread({direction:"up",ref},props),children)}));function PaperComponent(_ref2){var{titleId}=_ref2,props=_objectWithoutProperties(_ref2,_excluded2);return react.createElement(cjs_default(),{bounds:"body",handle:"#".concat(titleId),cancel:'[class*="MuiDialogContent-root"]'},react.createElement(Paper.Z,_objectSpread({},props)))}function Dialog_Dialog(_ref3){var{onClose,title,titleId,dividers,contentId,selectedValue,open,actions,fullWidth,maxWidth,fullScreen,draggable,children,autoContentPadding}=_ref3,props=_objectWithoutProperties(_ref3,_excluded3),theme=(0,useTheme.Z)(),fullScreenBreakPoint=(0,useMediaQuery.Z)(theme.breakpoints.down(fullScreen));return react.createElement(Dialog.Z,_objectSpread({sx:{backgroundColor:"background.dialog"},onClose:()=>null==onClose?void 0:onClose(selectedValue),open,TransitionComponent:Transition,keepMounted:!0,scroll:"paper",fullWidth,maxWidth,"aria-labelledby":titleId,"aria-describedby":contentId,PaperComponent:draggable?props=>react.createElement(PaperComponent,_objectSpread({titleId},props)):void 0,fullScreen:"boolean"==typeof fullScreen?fullScreen:fullScreenBreakPoint},props),title&&react.createElement(DialogTitle.Z,{style:_objectSpread({},draggable&&{cursor:"move"}),id:titleId},title),react.createElement(DialogContent.Z,{sx:_objectSpread({},!autoContentPadding&&{padding:0}),dividers},"string"==typeof children?react.createElement(DialogContentText.Z,{id:contentId},children):children),null!=actions&&actions.length?react.createElement(DialogActions.Z,null,actions.map(((action,index)=>{var _action$variant;return react.createElement(Button_Button.Z,_objectSpread(_objectSpread({key:index},action),{},{onClick:action.onClick,autoFocus:action.autoFocus,variant:null!==(_action$variant=action.variant)&&void 0!==_action$variant?_action$variant:"text"}),action.label)}))):null)}Dialog_Dialog.propTypes={open:prop_types_default().bool.isRequired,onClose:prop_types_default().func,selectedValue:prop_types_default().string,title:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().node]),titleId:prop_types_default().string,contentId:prop_types_default().string,fullWidth:prop_types_default().bool,dividers:prop_types_default().bool,autoContentPadding:prop_types_default().bool,draggable:prop_types_default().bool,maxWidth:prop_types_default().oneOf([!1,"xs","sm","md","lg","xl"]),fullScreen:prop_types_default().oneOf([!1,!0,"xs","sm","md","lg","xl"]),actions:prop_types_default().arrayOf(prop_types_default().shape({onClick:prop_types_default().func,label:prop_types_default().string,autoFocus:prop_types_default().bool}))},Dialog_Dialog.defaultProps={onClose:void 0,open:!1,selectedValue:void 0,title:"",titleId:"dialog-title-id",contentId:void 0,fullWidth:!1,dividers:!1,maxWidth:!1,draggable:!1,autoContentPadding:!0,fullScreen:!1,actions:[]};var Dialog_DialogContentText=DialogContentText.Z;const components_Dialog_Dialog=Dialog_Dialog;try{Dialog_DialogContentText.displayName="DialogContentText",Dialog_DialogContentText.__docgenInfo={description:"",displayName:"DialogContentText",props:{component:{defaultValue:null,description:"The component used for the root node.\nEither a string to use a HTML element or a component.",name:"component",required:!0,type:{name:"ElementType<any>"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<DialogContentTextClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"ResponsiveStyleValue<string[] | Color> | ((theme: Theme) => ResponsiveStyleValue<string[] | Color>)"}},width:{defaultValue:null,description:"",name:"width",required:!1,type:{name:"ResponsiveStyleValue<Width<string | number> | NonNullable<Width<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},alignItems:{defaultValue:null,description:"",name:"alignItems",required:!1,type:{name:"ResponsiveStyleValue<string[] | AlignItems> | ((theme: Theme) => ResponsiveStyleValue<string[] | AlignItems>)"}},fontSize:{defaultValue:null,description:"",name:"fontSize",required:!1,type:{name:"ResponsiveStyleValue<FontSize<string | number> | NonNullable<FontSize<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},variant:{defaultValue:{value:"'body1'"},description:"Applies the theme typography styles.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"caption"'},{value:'"h1"'},{value:'"h2"'},{value:'"h3"'},{value:'"h4"'},{value:'"h5"'},{value:'"h6"'},{value:'"inherit"'},{value:'"subtitle1"'},{value:'"subtitle2"'},{value:'"body1"'},{value:'"body2"'},{value:'"overline"'}]}},children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},minWidth:{defaultValue:null,description:"",name:"minWidth",required:!1,type:{name:"ResponsiveStyleValue<MinWidth<string | number> | NonNullable<MinWidth<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},bottom:{defaultValue:null,description:"",name:"bottom",required:!1,type:{name:"ResponsiveStyleValue<Bottom<string | number> | NonNullable<Bottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},left:{defaultValue:null,description:"",name:"left",required:!1,type:{name:"ResponsiveStyleValue<Left<string | number> | NonNullable<Left<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Left<...> | NonNullable<...>[]>)"}},right:{defaultValue:null,description:"",name:"right",required:!1,type:{name:"ResponsiveStyleValue<Right<string | number> | NonNullable<Right<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},top:{defaultValue:null,description:"",name:"top",required:!1,type:{name:"ResponsiveStyleValue<Top<string | number> | NonNullable<Top<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Top<string | number> | NonNullable<...>[]>)"}},gutterBottom:{defaultValue:{value:"false"},description:"If `true`, the text will have a bottom margin.",name:"gutterBottom",required:!1,type:{name:"boolean"}},paragraph:{defaultValue:{value:"false"},description:"If `true`, the element will be a paragraph element.",name:"paragraph",required:!1,type:{name:"boolean"}},lineHeight:{defaultValue:null,description:"",name:"lineHeight",required:!1,type:{name:"ResponsiveStyleValue<LineHeight<string | number> | NonNullable<LineHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},border:{defaultValue:null,description:"",name:"border",required:!1,type:{name:'ResponsiveStyleValue<number | (string & {}) | "inset" | "-moz-initial" | "inherit" | "initial" | "revert" | "revert-layer" | "unset" | "none" | "medium" | "hidden" | "aliceblue" | "antiquewhite" | ... 184 more ... | "solid"> | ((theme: Theme) => ResponsiveStyleValue<...>)'}},noWrap:{defaultValue:{value:"false"},description:"If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n\nNote that text overflow can only happen with block or inline-block level elements\n(the element needs to have a width in order to overflow).",name:"noWrap",required:!1,type:{name:"boolean"}},height:{defaultValue:null,description:"",name:"height",required:!1,type:{name:"ResponsiveStyleValue<Height<string | number> | NonNullable<Height<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},bgcolor:{defaultValue:null,description:"",name:"bgcolor",required:!1,type:{name:"ResponsiveStyleValue<string[] | BackgroundColor> | ((theme: Theme) => ResponsiveStyleValue<string[] | BackgroundColor>)"}},p:{defaultValue:null,description:"",name:"p",required:!1,type:{name:"ResponsiveStyleValue<Padding<string | number> | NonNullable<Padding<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},alignContent:{defaultValue:null,description:"",name:"alignContent",required:!1,type:{name:"ResponsiveStyleValue<string[] | AlignContent> | ((theme: Theme) => ResponsiveStyleValue<string[] | AlignContent>)"}},alignSelf:{defaultValue:null,description:"",name:"alignSelf",required:!1,type:{name:"ResponsiveStyleValue<string[] | AlignSelf> | ((theme: Theme) => ResponsiveStyleValue<string[] | AlignSelf>)"}},boxShadow:{defaultValue:null,description:"",name:"boxShadow",required:!1,type:{name:"ResponsiveStyleValue<number | BoxShadow> | ((theme: Theme) => ResponsiveStyleValue<number | BoxShadow>)"}},boxSizing:{defaultValue:null,description:"",name:"boxSizing",required:!1,type:{name:"ResponsiveStyleValue<BoxSizing | NonNullable<BoxSizing>[]> | ((theme: Theme) => ResponsiveStyleValue<BoxSizing | NonNullable<...>[]>)"}},columnGap:{defaultValue:null,description:"",name:"columnGap",required:!1,type:{name:"ResponsiveStyleValue<ColumnGap<string | number> | NonNullable<ColumnGap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},display:{defaultValue:null,description:"",name:"display",required:!1,type:{name:"ResponsiveStyleValue<string[] | Display> | ((theme: Theme) => ResponsiveStyleValue<string[] | Display>)"}},flexBasis:{defaultValue:null,description:"",name:"flexBasis",required:!1,type:{name:"ResponsiveStyleValue<FlexBasis<string | number> | NonNullable<FlexBasis<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},flexDirection:{defaultValue:null,description:"",name:"flexDirection",required:!1,type:{name:"ResponsiveStyleValue<FlexDirection | NonNullable<FlexDirection>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexDirection | NonNullable<...>[]>)"}},flexGrow:{defaultValue:null,description:"",name:"flexGrow",required:!1,type:{name:"ResponsiveStyleValue<FlexGrow | NonNullable<FlexGrow>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexGrow | NonNullable<...>[]>)"}},flexShrink:{defaultValue:null,description:"",name:"flexShrink",required:!1,type:{name:"ResponsiveStyleValue<FlexShrink | NonNullable<FlexShrink>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexShrink | NonNullable<...>[]>)"}},flexWrap:{defaultValue:null,description:"",name:"flexWrap",required:!1,type:{name:"ResponsiveStyleValue<FlexWrap | NonNullable<FlexWrap>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexWrap | NonNullable<...>[]>)"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveStyleValue<string[] | FontFamily> | ((theme: Theme) => ResponsiveStyleValue<string[] | FontFamily>)"}},fontStyle:{defaultValue:null,description:"",name:"fontStyle",required:!1,type:{name:"ResponsiveStyleValue<string[] | FontStyle> | ((theme: Theme) => ResponsiveStyleValue<string[] | FontStyle>)"}},fontWeight:{defaultValue:null,description:"",name:"fontWeight",required:!1,type:{name:"ResponsiveStyleValue<string | (string & {}) | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (string & {}) | (number & {})>)"}},gridAutoColumns:{defaultValue:null,description:"",name:"gridAutoColumns",required:!1,type:{name:"ResponsiveStyleValue<GridAutoColumns<string | number> | NonNullable<GridAutoColumns<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},gridAutoFlow:{defaultValue:null,description:"",name:"gridAutoFlow",required:!1,type:{name:"ResponsiveStyleValue<string[] | GridAutoFlow> | ((theme: Theme) => ResponsiveStyleValue<string[] | GridAutoFlow>)"}},gridAutoRows:{defaultValue:null,description:"",name:"gridAutoRows",required:!1,type:{name:"ResponsiveStyleValue<GridAutoRows<string | number> | NonNullable<GridAutoRows<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},gridTemplateAreas:{defaultValue:null,description:"",name:"gridTemplateAreas",required:!1,type:{name:"ResponsiveStyleValue<string[] | GridTemplateAreas> | ((theme: Theme) => ResponsiveStyleValue<string[] | GridTemplateAreas>)"}},gridTemplateColumns:{defaultValue:null,description:"",name:"gridTemplateColumns",required:!1,type:{name:"ResponsiveStyleValue<GridTemplateColumns<string | number> | NonNullable<GridTemplateColumns<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},gridTemplateRows:{defaultValue:null,description:"",name:"gridTemplateRows",required:!1,type:{name:"ResponsiveStyleValue<GridTemplateRows<string | number> | NonNullable<GridTemplateRows<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},justifyContent:{defaultValue:null,description:"",name:"justifyContent",required:!1,type:{name:"ResponsiveStyleValue<string[] | JustifyContent> | ((theme: Theme) => ResponsiveStyleValue<string[] | JustifyContent>)"}},justifyItems:{defaultValue:null,description:"",name:"justifyItems",required:!1,type:{name:"ResponsiveStyleValue<string[] | JustifyItems> | ((theme: Theme) => ResponsiveStyleValue<string[] | JustifyItems>)"}},justifySelf:{defaultValue:null,description:"",name:"justifySelf",required:!1,type:{name:"ResponsiveStyleValue<string[] | JustifySelf> | ((theme: Theme) => ResponsiveStyleValue<string[] | JustifySelf>)"}},letterSpacing:{defaultValue:null,description:"",name:"letterSpacing",required:!1,type:{name:"ResponsiveStyleValue<LetterSpacing<string | number> | NonNullable<LetterSpacing<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginBottom:{defaultValue:null,description:"",name:"marginBottom",required:!1,type:{name:"ResponsiveStyleValue<MarginBottom<string | number> | NonNullable<MarginBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginLeft:{defaultValue:null,description:"",name:"marginLeft",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginRight:{defaultValue:null,description:"",name:"marginRight",required:!1,type:{name:"ResponsiveStyleValue<MarginRight<string | number> | NonNullable<MarginRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginTop:{defaultValue:null,description:"",name:"marginTop",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},maxHeight:{defaultValue:null,description:"",name:"maxHeight",required:!1,type:{name:"ResponsiveStyleValue<MaxHeight<string | number> | NonNullable<MaxHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},maxWidth:{defaultValue:{value:"false"},description:"",name:"maxWidth",required:!1,type:{name:"ResponsiveStyleValue<MaxWidth<string | number> | NonNullable<MaxWidth<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},minHeight:{defaultValue:null,description:"",name:"minHeight",required:!1,type:{name:"ResponsiveStyleValue<MinHeight<string | number> | NonNullable<MinHeight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},order:{defaultValue:null,description:"",name:"order",required:!1,type:{name:"ResponsiveStyleValue<Order | NonNullable<Order>[]> | ((theme: Theme) => ResponsiveStyleValue<Order | NonNullable<Order>[]>)"}},paddingBottom:{defaultValue:null,description:"",name:"paddingBottom",required:!1,type:{name:"ResponsiveStyleValue<PaddingBottom<string | number> | NonNullable<PaddingBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingLeft:{defaultValue:null,description:"",name:"paddingLeft",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingRight:{defaultValue:null,description:"",name:"paddingRight",required:!1,type:{name:"ResponsiveStyleValue<PaddingRight<string | number> | NonNullable<PaddingRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingTop:{defaultValue:null,description:"",name:"paddingTop",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},position:{defaultValue:null,description:"",name:"position",required:!1,type:{name:"ResponsiveStyleValue<Position | NonNullable<Position>[]> | ((theme: Theme) => ResponsiveStyleValue<Position | NonNullable<...>[]>)"}},rowGap:{defaultValue:null,description:"",name:"rowGap",required:!1,type:{name:"ResponsiveStyleValue<RowGap<string | number> | NonNullable<RowGap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},textAlign:{defaultValue:null,description:"",name:"textAlign",required:!1,type:{name:"ResponsiveStyleValue<TextAlign | NonNullable<TextAlign>[]> | ((theme: Theme) => ResponsiveStyleValue<TextAlign | NonNullable<...>[]>)"}},textOverflow:{defaultValue:null,description:"",name:"textOverflow",required:!1,type:{name:"ResponsiveStyleValue<string[] | TextOverflow> | ((theme: Theme) => ResponsiveStyleValue<string[] | TextOverflow>)"}},textTransform:{defaultValue:null,description:"",name:"textTransform",required:!1,type:{name:"ResponsiveStyleValue<TextTransform | NonNullable<TextTransform>[]> | ((theme: Theme) => ResponsiveStyleValue<TextTransform | NonNullable<...>[]>)"}},visibility:{defaultValue:null,description:"",name:"visibility",required:!1,type:{name:"ResponsiveStyleValue<Visibility | NonNullable<Visibility>[]> | ((theme: Theme) => ResponsiveStyleValue<Visibility | NonNullable<...>[]>)"}},whiteSpace:{defaultValue:null,description:"",name:"whiteSpace",required:!1,type:{name:"ResponsiveStyleValue<WhiteSpace | NonNullable<WhiteSpace>[]> | ((theme: Theme) => ResponsiveStyleValue<WhiteSpace | NonNullable<...>[]>)"}},zIndex:{defaultValue:null,description:"",name:"zIndex",required:!1,type:{name:"ResponsiveStyleValue<string | (string & {}) | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (string & {}) | (number & {})>)"}},borderBottom:{defaultValue:null,description:"",name:"borderBottom",required:!1,type:{name:"ResponsiveStyleValue<BorderBottom<string | number> | NonNullable<BorderBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderColor:{defaultValue:null,description:"",name:"borderColor",required:!1,type:{name:"ResponsiveStyleValue<string[] | BorderColor> | ((theme: Theme) => ResponsiveStyleValue<string[] | BorderColor>)"}},borderLeft:{defaultValue:null,description:"",name:"borderLeft",required:!1,type:{name:"ResponsiveStyleValue<BorderLeft<string | number> | NonNullable<BorderLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderRadius:{defaultValue:null,description:"",name:"borderRadius",required:!1,type:{name:"ResponsiveStyleValue<BorderRadius<string | number> | NonNullable<BorderRadius<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderRight:{defaultValue:null,description:"",name:"borderRight",required:!1,type:{name:"ResponsiveStyleValue<BorderRight<string | number> | NonNullable<BorderRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},borderTop:{defaultValue:null,description:"",name:"borderTop",required:!1,type:{name:"ResponsiveStyleValue<BorderTop<string | number> | NonNullable<BorderTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},flex:{defaultValue:null,description:"",name:"flex",required:!1,type:{name:"ResponsiveStyleValue<Flex<string | number> | NonNullable<Flex<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Flex<...> | NonNullable<...>[]>)"}},gap:{defaultValue:null,description:"",name:"gap",required:!1,type:{name:"ResponsiveStyleValue<Gap<string | number> | NonNullable<Gap<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<Gap<string | number> | NonNullable<...>[]>)"}},gridArea:{defaultValue:null,description:"",name:"gridArea",required:!1,type:{name:"ResponsiveStyleValue<GridArea | NonNullable<GridArea>[]> | ((theme: Theme) => ResponsiveStyleValue<GridArea | NonNullable<...>[]>)"}},gridColumn:{defaultValue:null,description:"",name:"gridColumn",required:!1,type:{name:"ResponsiveStyleValue<GridColumn | NonNullable<GridColumn>[]> | ((theme: Theme) => ResponsiveStyleValue<GridColumn | NonNullable<...>[]>)"}},gridRow:{defaultValue:null,description:"",name:"gridRow",required:!1,type:{name:"ResponsiveStyleValue<GridRow | NonNullable<GridRow>[]> | ((theme: Theme) => ResponsiveStyleValue<GridRow | NonNullable<GridRow>[]>)"}},margin:{defaultValue:null,description:"",name:"margin",required:!1,type:{name:"ResponsiveStyleValue<Margin<string | number> | NonNullable<Margin<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},overflow:{defaultValue:null,description:"",name:"overflow",required:!1,type:{name:"ResponsiveStyleValue<string[] | Overflow> | ((theme: Theme) => ResponsiveStyleValue<string[] | Overflow>)"}},padding:{defaultValue:null,description:"",name:"padding",required:!1,type:{name:"ResponsiveStyleValue<Padding<string | number> | NonNullable<Padding<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},m:{defaultValue:null,description:"",name:"m",required:!1,type:{name:"ResponsiveStyleValue<Margin<string | number> | NonNullable<Margin<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mt:{defaultValue:null,description:"",name:"mt",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mr:{defaultValue:null,description:"",name:"mr",required:!1,type:{name:"ResponsiveStyleValue<MarginRight<string | number> | NonNullable<MarginRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mb:{defaultValue:null,description:"",name:"mb",required:!1,type:{name:"ResponsiveStyleValue<MarginBottom<string | number> | NonNullable<MarginBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},ml:{defaultValue:null,description:"",name:"ml",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},mx:{defaultValue:null,description:"",name:"mx",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginX:{defaultValue:null,description:"",name:"marginX",required:!1,type:{name:"ResponsiveStyleValue<MarginLeft<string | number> | NonNullable<MarginLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},my:{defaultValue:null,description:"",name:"my",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},marginY:{defaultValue:null,description:"",name:"marginY",required:!1,type:{name:"ResponsiveStyleValue<MarginTop<string | number> | NonNullable<MarginTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pt:{defaultValue:null,description:"",name:"pt",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pr:{defaultValue:null,description:"",name:"pr",required:!1,type:{name:"ResponsiveStyleValue<PaddingRight<string | number> | NonNullable<PaddingRight<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pb:{defaultValue:null,description:"",name:"pb",required:!1,type:{name:"ResponsiveStyleValue<PaddingBottom<string | number> | NonNullable<PaddingBottom<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},pl:{defaultValue:null,description:"",name:"pl",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},px:{defaultValue:null,description:"",name:"px",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingX:{defaultValue:null,description:"",name:"paddingX",required:!1,type:{name:"ResponsiveStyleValue<PaddingLeft<string | number> | NonNullable<PaddingLeft<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},py:{defaultValue:null,description:"",name:"py",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},paddingY:{defaultValue:null,description:"",name:"paddingY",required:!1,type:{name:"ResponsiveStyleValue<PaddingTop<string | number> | NonNullable<PaddingTop<string | number>>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"}},typography:{defaultValue:null,description:"",name:"typography",required:!1,type:{name:"ResponsiveStyleValue<string> | ((theme: Theme) => ResponsiveStyleValue<string>)"}},displayPrint:{defaultValue:null,description:"",name:"displayPrint",required:!1,type:{name:"ResponsiveStyleValue<string[] | Display> | ((theme: Theme) => ResponsiveStyleValue<string[] | Display>)"}},align:{defaultValue:{value:"'inherit'"},description:"Set the text-align on the component.",name:"align",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'},{value:'"center"'},{value:'"inherit"'},{value:'"justify"'}]}},variantMapping:{defaultValue:{value:"{\nh1: 'h1',\nh2: 'h2',\nh3: 'h3',\nh4: 'h4',\nh5: 'h5',\nh6: 'h6',\nsubtitle1: 'h6',\nsubtitle2: 'h6',\nbody1: 'p',\nbody2: 'p',\ninherit: 'p',\n}"},description:"The component maps the variant prop to a range of different HTML element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` prop.",name:"variantMapping",required:!1,type:{name:'Partial<Record<OverridableStringUnion<"inherit" | Variant, TypographyPropsVariantOverrides>, string>>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Dialog/Dialog.tsx#DialogContentText"]={docgenInfo:Dialog_DialogContentText.__docgenInfo,name:"DialogContentText",path:"src/components/Dialog/Dialog.tsx#DialogContentText"})}catch(__react_docgen_typescript_loader_error){}try{Dialog_Dialog.displayName="Dialog",Dialog_Dialog.__docgenInfo={description:"",displayName:"Dialog",props:{onClose:{defaultValue:{value:"undefined"},description:"",name:"onClose",required:!1,type:{name:"any"}},title:{defaultValue:{value:""},description:"",name:"title",required:!1,type:{name:"any"}},titleId:{defaultValue:{value:"dialog-title-id"},description:"",name:"titleId",required:!1,type:{name:"any"}},dividers:{defaultValue:{value:"false"},description:"",name:"dividers",required:!1,type:{name:"any"}},contentId:{defaultValue:{value:"undefined"},description:"",name:"contentId",required:!1,type:{name:"any"}},selectedValue:{defaultValue:{value:"undefined"},description:"",name:"selectedValue",required:!1,type:{name:"any"}},open:{defaultValue:{value:"false"},description:"",name:"open",required:!1,type:{name:"any"}},actions:{defaultValue:{value:"[]"},description:"",name:"actions",required:!1,type:{name:"any"}},fullWidth:{defaultValue:{value:"false"},description:"",name:"fullWidth",required:!1,type:{name:"any"}},maxWidth:{defaultValue:{value:"false"},description:"",name:"maxWidth",required:!1,type:{name:"any"}},fullScreen:{defaultValue:{value:"false"},description:"",name:"fullScreen",required:!1,type:{name:"any"}},draggable:{defaultValue:{value:"false"},description:"",name:"draggable",required:!1,type:{name:"any"}},autoContentPadding:{defaultValue:{value:"true"},description:"",name:"autoContentPadding",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Dialog/Dialog.tsx#Dialog"]={docgenInfo:Dialog_Dialog.__docgenInfo,name:"Dialog",path:"src/components/Dialog/Dialog.tsx#Dialog"})}catch(__react_docgen_typescript_loader_error){}var _Default$parameters,_Default$parameters2,_Default$parameters2$,_Draggabled$parameter,_Draggabled$parameter2,_Draggabled$parameter3,_Dividers$parameters,_Dividers$parameters2,_Dividers$parameters3,_Fullscreen$parameter,_Fullscreen$parameter2,_Fullscreen$parameter3,_Actioned$parameters,_Actioned$parameters2,_Actioned$parameters3,_Info$parameters,_Info$parameters2,_Info$parameters2$doc,_DisableAutoPadding$p,_DisableAutoPadding$p2,_DisableAutoPadding$p3;function Dialog_stories_ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function Dialog_stories_objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?Dialog_stories_ownKeys(Object(source),!0).forEach((function(key){Dialog_stories_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):Dialog_stories_ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function Dialog_stories_defineProperty(obj,key,value){return(key=function Dialog_stories_toPropertyKey(arg){var key=function Dialog_stories_toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const Dialog_stories={parameters:{storySource:{source:'var _Default$parameters, _Default$parameters2, _Default$parameters2$, _Draggabled$parameter, _Draggabled$parameter2, _Draggabled$parameter3, _Dividers$parameters, _Dividers$parameters2, _Dividers$parameters3, _Fullscreen$parameter, _Fullscreen$parameter2, _Fullscreen$parameter3, _Actioned$parameters, _Actioned$parameters2, _Actioned$parameters3, _Info$parameters, _Info$parameters2, _Info$parameters2$doc, _DisableAutoPadding$p, _DisableAutoPadding$p2, _DisableAutoPadding$p3;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nimport React, { useState } from "react";\nimport { Typography, Button, List, TextField, ListItem, ListItemButton, ListItemAvatar, Avatar, Box, ListItemText, FormControl, InputLabel, Select, MenuItem, FormControlLabel, Switch } from "@mui/material";\nimport { blue } from "@mui/material/colors";\nimport { Person as PersonIcon, Add as AddIcon } from "@mui/icons-material";\nimport Dialog, { DialogContentText } from "../Dialog";\nexport default {\n  title: "Feedback/Dialog",\n  component: Dialog,\n  decorators: [Story => /*#__PURE__*/React.createElement("div", {\n    style: {\n      width: "100%",\n      height: "100vh"\n    }\n  }, /*#__PURE__*/React.createElement(Story, null))]\n};\nexport var Default = () => {\n  return /*#__PURE__*/React.createElement(Dialog, null);\n};\nexport var Draggabled = () => {\n  var [open, setOpen] = useState(false);\n  var handleClickOpen = () => setOpen(true);\n  var handleClose = () => setOpen(false);\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {\n    variant: "outlined",\n    onClick: handleClickOpen\n  }, "Open dialog"), /*#__PURE__*/React.createElement(Dialog, {\n    title: "Draggable title section",\n    open: open,\n    onClose: handleClose,\n    draggable: true\n  }, "To draggable dialog component click on title section and drag to anywhere"));\n};\nexport var Dividers = () => {\n  var [open, setOpen] = useState(false);\n  var handleClickOpen = () => setOpen(true);\n  var handleClose = () => setOpen(false);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    variant: "outlined",\n    onClick: handleClickOpen\n  }, "Open dialog"), /*#__PURE__*/React.createElement(Dialog, {\n    title: "Dividers",\n    open: open,\n    dividers: true,\n    onClose: handleClose,\n    actions: [{\n      label: "OK",\n      onClick: () => handleClose()\n    }]\n  }, /*#__PURE__*/React.createElement(DialogContentText, null, "See, there are dividers between title, content and actions")));\n};\nexport var Fullscreen = () => {\n  var [open, setOpen] = useState(false);\n  var [fullWidth, setFullWidth] = useState(true);\n  var [maxWidth, setMaxWidth] = useState("sm");\n  var handleClickOpen = () => setOpen(true);\n  var handleClose = () => setOpen(false);\n  var handleMaxWidthChange = event => setMaxWidth(event.target.value);\n  var handleFullWidthChange = event => setFullWidth(event.target.checked);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    variant: "outlined",\n    onClick: handleClickOpen\n  }, "Open max-width dialog"), /*#__PURE__*/React.createElement(Dialog, {\n    title: "Optional sizes",\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    open: open,\n    onClose: handleClose\n  }, /*#__PURE__*/React.createElement(DialogContentText, null, "You can set my maximum width and whether to adapt or not."), /*#__PURE__*/React.createElement(Box, {\n    noValidate: true,\n    component: "form",\n    sx: {\n      display: "flex",\n      flexDirection: "column",\n      m: "auto",\n      width: "fit-content"\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    sx: {\n      mt: 2,\n      minWidth: 120\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: "max-width"\n  }, "maxWidth"), /*#__PURE__*/React.createElement(Select, {\n    autoFocus: true,\n    value: maxWidth,\n    onChange: handleMaxWidthChange,\n    label: "maxWidth",\n    inputProps: {\n      name: "max-width",\n      id: "max-width"\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: false\n  }, "false"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: "xs"\n  }, "xs"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: "sm"\n  }, "sm"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: "md"\n  }, "md"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: "lg"\n  }, "lg"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: "xl"\n  }, "xl"))), /*#__PURE__*/React.createElement(FormControlLabel, {\n    sx: {\n      mt: 1\n    },\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: fullWidth,\n      onChange: handleFullWidthChange\n    }),\n    label: "Full width"\n  }))));\n};\nexport var Actioned = () => {\n  var [open, setOpen] = useState(false);\n  var handleClickOpen = () => setOpen(true);\n  var handleClose = () => setOpen(false);\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {\n    variant: "outlined",\n    onClick: handleClickOpen\n  }, "Open form dialog"), /*#__PURE__*/React.createElement(Dialog, {\n    title: "Subscribe",\n    open: open,\n    onClose: handleClose,\n    actions: [{\n      label: "Cancel",\n      onClick: () => handleClose()\n    }, {\n      label: "Subscribe",\n      onClick: () => handleClose()\n    }]\n  }, /*#__PURE__*/React.createElement(DialogContentText, null, "To subscribe to this website, please enter your email address here. We will send updates occasionally."), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: "dense",\n    id: "name",\n    label: "Email Address",\n    type: "email",\n    fullWidth: true,\n    variant: "standard"\n  })));\n};\nexport var Info = () => {\n  var [open, setOpen] = React.useState(false);\n  var handleClickOpen = () => setOpen(true);\n  var handleClose = () => setOpen(false);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    variant: "outlined",\n    onClick: handleClickOpen\n  }, "Open alert dialog"), /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    titleId: "alert-dialog-title",\n    contentId: "alert-dialog-description",\n    title: "Use Google\'s location service?",\n    autoContentPadding: true\n  }, "Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."));\n};\nexport var DisableAutoPadding = () => {\n  var emails = ["username@gmail.com", "user02@gmail.com"];\n  var [open, setOpen] = useState(false);\n  var [selectedValue, setSelectedValue] = useState(emails[1]);\n  var handleClickOpen = () => setOpen(true);\n  var handleClose = value => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, {\n    variant: "subtitle1",\n    component: "div"\n  }, "Selected: ", selectedValue), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Button, {\n    variant: "outlined",\n    onClick: handleClickOpen\n  }, "Open simple dialog"), /*#__PURE__*/React.createElement(Dialog, {\n    selectedValue: selectedValue,\n    open: open,\n    onClose: handleClose,\n    title: "Set backup account",\n    autoContentPadding: false\n  }, /*#__PURE__*/React.createElement(List, {\n    sx: {\n      pt: 0\n    }\n  }, emails.map(email => /*#__PURE__*/React.createElement(ListItem, {\n    key: email,\n    disableGutters: true\n  }, /*#__PURE__*/React.createElement(ListItemButton, {\n    onClick: () => handleClose(email),\n    key: email\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, null, /*#__PURE__*/React.createElement(Avatar, {\n    sx: {\n      bgcolor: blue[100],\n      color: blue[600]\n    }\n  }, /*#__PURE__*/React.createElement(PersonIcon, null))), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: email\n  })))), /*#__PURE__*/React.createElement(ListItem, {\n    disableGutters: true\n  }, /*#__PURE__*/React.createElement(ListItemButton, {\n    autoFocus: true,\n    onClick: () => handleClose("addAccount")\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, null, /*#__PURE__*/React.createElement(Avatar, null, /*#__PURE__*/React.createElement(AddIcon, null))), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: "Add account"\n  }))))));\n};\nDefault.parameters = _objectSpread(_objectSpread({}, Default.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Default$parameters = Default.parameters) === null || _Default$parameters === void 0 ? void 0 : _Default$parameters.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  return <Dialog />;\\n}"\n    }, (_Default$parameters2 = Default.parameters) === null || _Default$parameters2 === void 0 ? void 0 : (_Default$parameters2$ = _Default$parameters2.docs) === null || _Default$parameters2$ === void 0 ? void 0 : _Default$parameters2$.source)\n  })\n});\nDraggabled.parameters = _objectSpread(_objectSpread({}, Draggabled.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Draggabled$parameter = Draggabled.parameters) === null || _Draggabled$parameter === void 0 ? void 0 : _Draggabled$parameter.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <div>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open dialog\\n      </Button>\\n      <Dialog title=\\"Draggable title section\\" open={open} onClose={handleClose} draggable>\\n        To draggable dialog component click on title section and drag to\\n        anywhere\\n      </Dialog>\\n    </div>;\\n}"\n    }, (_Draggabled$parameter2 = Draggabled.parameters) === null || _Draggabled$parameter2 === void 0 ? void 0 : (_Draggabled$parameter3 = _Draggabled$parameter2.docs) === null || _Draggabled$parameter3 === void 0 ? void 0 : _Draggabled$parameter3.source)\n  })\n});\nDividers.parameters = _objectSpread(_objectSpread({}, Dividers.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Dividers$parameters = Dividers.parameters) === null || _Dividers$parameters === void 0 ? void 0 : _Dividers$parameters.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open dialog\\n      </Button>\\n      <Dialog title=\\"Dividers\\" open={open} dividers onClose={handleClose} actions={[{\\n      label: \\"OK\\",\\n      onClick: () => handleClose()\\n    }]}>\\n        <DialogContentText>\\n          See, there are dividers between title, content and actions\\n        </DialogContentText>\\n      </Dialog>\\n    </>;\\n}"\n    }, (_Dividers$parameters2 = Dividers.parameters) === null || _Dividers$parameters2 === void 0 ? void 0 : (_Dividers$parameters3 = _Dividers$parameters2.docs) === null || _Dividers$parameters3 === void 0 ? void 0 : _Dividers$parameters3.source)\n  })\n});\nFullscreen.parameters = _objectSpread(_objectSpread({}, Fullscreen.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Fullscreen$parameter = Fullscreen.parameters) === null || _Fullscreen$parameter === void 0 ? void 0 : _Fullscreen$parameter.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const [fullWidth, setFullWidth] = useState(true);\\n  const [maxWidth, setMaxWidth] = useState(\\"sm\\");\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\\n  return <>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open max-width dialog\\n      </Button>\\n      <Dialog title=\\"Optional sizes\\" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\\n        <DialogContentText>\\n          You can set my maximum width and whether to adapt or not.\\n        </DialogContentText>\\n        <Box noValidate component=\\"form\\" sx={{\\n        display: \\"flex\\",\\n        flexDirection: \\"column\\",\\n        m: \\"auto\\",\\n        width: \\"fit-content\\"\\n      }}>\\n          <FormControl sx={{\\n          mt: 2,\\n          minWidth: 120\\n        }}>\\n            <InputLabel htmlFor=\\"max-width\\">maxWidth</InputLabel>\\n            <Select autoFocus value={maxWidth} onChange={handleMaxWidthChange} label=\\"maxWidth\\" inputProps={{\\n            name: \\"max-width\\",\\n            id: \\"max-width\\"\\n          }}>\\n              <MenuItem value={false}>false</MenuItem>\\n              <MenuItem value=\\"xs\\">xs</MenuItem>\\n              <MenuItem value=\\"sm\\">sm</MenuItem>\\n              <MenuItem value=\\"md\\">md</MenuItem>\\n              <MenuItem value=\\"lg\\">lg</MenuItem>\\n              <MenuItem value=\\"xl\\">xl</MenuItem>\\n            </Select>\\n          </FormControl>\\n          <FormControlLabel sx={{\\n          mt: 1\\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label=\\"Full width\\" />\\n        </Box>\\n      </Dialog>\\n    </>;\\n}"\n    }, (_Fullscreen$parameter2 = Fullscreen.parameters) === null || _Fullscreen$parameter2 === void 0 ? void 0 : (_Fullscreen$parameter3 = _Fullscreen$parameter2.docs) === null || _Fullscreen$parameter3 === void 0 ? void 0 : _Fullscreen$parameter3.source)\n  })\n});\nActioned.parameters = _objectSpread(_objectSpread({}, Actioned.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Actioned$parameters = Actioned.parameters) === null || _Actioned$parameters === void 0 ? void 0 : _Actioned$parameters.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  const [open, setOpen] = useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <div>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open form dialog\\n      </Button>\\n      <Dialog title=\\"Subscribe\\" open={open} onClose={handleClose} actions={[{\\n      label: \\"Cancel\\",\\n      onClick: () => handleClose()\\n    }, {\\n      label: \\"Subscribe\\",\\n      onClick: () => handleClose()\\n    }]}>\\n        <DialogContentText>\\n          To subscribe to this website, please enter your email address here. We\\n          will send updates occasionally.\\n        </DialogContentText>\\n        <TextField autoFocus margin=\\"dense\\" id=\\"name\\" label=\\"Email Address\\" type=\\"email\\" fullWidth variant=\\"standard\\" />\\n      </Dialog>\\n    </div>;\\n}"\n    }, (_Actioned$parameters2 = Actioned.parameters) === null || _Actioned$parameters2 === void 0 ? void 0 : (_Actioned$parameters3 = _Actioned$parameters2.docs) === null || _Actioned$parameters3 === void 0 ? void 0 : _Actioned$parameters3.source)\n  })\n});\nInfo.parameters = _objectSpread(_objectSpread({}, Info.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Info$parameters = Info.parameters) === null || _Info$parameters === void 0 ? void 0 : _Info$parameters.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  const [open, setOpen] = React.useState(false);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = () => setOpen(false);\\n  return <>\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open alert dialog\\n      </Button>\\n      <Dialog open={open} onClose={handleClose} titleId=\\"alert-dialog-title\\" contentId=\\"alert-dialog-description\\" title=\\"Use Google\'s location service?\\" autoContentPadding>\\n        Let Google help apps determine location. This means sending anonymous\\n        location data to Google, even when no apps are running.\\n      </Dialog>\\n    </>;\\n}"\n    }, (_Info$parameters2 = Info.parameters) === null || _Info$parameters2 === void 0 ? void 0 : (_Info$parameters2$doc = _Info$parameters2.docs) === null || _Info$parameters2$doc === void 0 ? void 0 : _Info$parameters2$doc.source)\n  })\n});\nDisableAutoPadding.parameters = _objectSpread(_objectSpread({}, DisableAutoPadding.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_DisableAutoPadding$p = DisableAutoPadding.parameters) === null || _DisableAutoPadding$p === void 0 ? void 0 : _DisableAutoPadding$p.docs), {}, {\n    source: _objectSpread({\n      originalSource: "() => {\\n  const emails = [\\"username@gmail.com\\", \\"user02@gmail.com\\"];\\n  const [open, setOpen] = useState(false);\\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\\n  const handleClickOpen = () => setOpen(true);\\n  const handleClose = value => {\\n    setOpen(false);\\n    setSelectedValue(value);\\n  };\\n  return <div>\\n      <Typography variant=\\"subtitle1\\" component=\\"div\\">\\n        Selected: {selectedValue}\\n      </Typography>\\n      <br />\\n      <Button variant=\\"outlined\\" onClick={handleClickOpen}>\\n        Open simple dialog\\n      </Button>\\n      <Dialog selectedValue={selectedValue} open={open} onClose={handleClose} title=\\"Set backup account\\" autoContentPadding={false}>\\n        <List sx={{\\n        pt: 0\\n      }}>\\n          {emails.map(email => <ListItem key={email} disableGutters>\\n              <ListItemButton onClick={() => handleClose(email)} key={email}>\\n                <ListItemAvatar>\\n                  <Avatar sx={{\\n                bgcolor: blue[100],\\n                color: blue[600]\\n              }}>\\n                    <PersonIcon />\\n                  </Avatar>\\n                </ListItemAvatar>\\n                <ListItemText primary={email} />\\n              </ListItemButton>\\n            </ListItem>)}\\n\\n          <ListItem disableGutters>\\n            <ListItemButton autoFocus onClick={() => handleClose(\\"addAccount\\")}>\\n              <ListItemAvatar>\\n                <Avatar>\\n                  <AddIcon />\\n                </Avatar>\\n              </ListItemAvatar>\\n              <ListItemText primary=\\"Add account\\" />\\n            </ListItemButton>\\n          </ListItem>\\n        </List>\\n      </Dialog>\\n    </div>;\\n}"\n    }, (_DisableAutoPadding$p2 = DisableAutoPadding.parameters) === null || _DisableAutoPadding$p2 === void 0 ? void 0 : (_DisableAutoPadding$p3 = _DisableAutoPadding$p2.docs) === null || _DisableAutoPadding$p3 === void 0 ? void 0 : _DisableAutoPadding$p3.source)\n  })\n});',locationsMap:{default:{startLoc:{col:21,line:22},endLoc:{col:1,line:24},startBody:{col:21,line:22},endBody:{col:1,line:24}},draggabled:{startLoc:{col:24,line:25},endLoc:{col:1,line:38},startBody:{col:24,line:25},endBody:{col:1,line:38}},dividers:{startLoc:{col:22,line:39},endLoc:{col:1,line:56},startBody:{col:22,line:39},endBody:{col:1,line:56}},fullscreen:{startLoc:{col:24,line:57},endLoc:{col:1,line:121},startBody:{col:24,line:57},endBody:{col:1,line:121}},actioned:{startLoc:{col:22,line:122},endLoc:{col:1,line:149},startBody:{col:22,line:122},endBody:{col:1,line:149}},info:{startLoc:{col:18,line:150},endLoc:{col:1,line:165},startBody:{col:18,line:150},endBody:{col:1,line:165}},"disable-auto-padding":{startLoc:{col:32,line:166},endLoc:{col:1,line:212},startBody:{col:32,line:166},endBody:{col:1,line:212}}}}},title:"Feedback/Dialog",component:components_Dialog_Dialog,decorators:[Story=>react.createElement("div",{style:{width:"100%",height:"100vh"}},react.createElement(Story,null))]};var Default=()=>react.createElement(components_Dialog_Dialog,null),Draggabled=()=>{var[open,setOpen]=(0,react.useState)(!1);return react.createElement("div",null,react.createElement(Button.Z,{variant:"outlined",onClick:()=>setOpen(!0)},"Open dialog"),react.createElement(components_Dialog_Dialog,{title:"Draggable title section",open,onClose:()=>setOpen(!1),draggable:!0},"To draggable dialog component click on title section and drag to anywhere"))},Dividers=()=>{var[open,setOpen]=(0,react.useState)(!1),handleClose=()=>setOpen(!1);return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:()=>setOpen(!0)},"Open dialog"),react.createElement(components_Dialog_Dialog,{title:"Dividers",open,dividers:!0,onClose:handleClose,actions:[{label:"OK",onClick:()=>handleClose()}]},react.createElement(Dialog_DialogContentText,null,"See, there are dividers between title, content and actions")))},Fullscreen=()=>{var[open,setOpen]=(0,react.useState)(!1),[fullWidth,setFullWidth]=(0,react.useState)(!0),[maxWidth,setMaxWidth]=(0,react.useState)("sm");return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:()=>setOpen(!0)},"Open max-width dialog"),react.createElement(components_Dialog_Dialog,{title:"Optional sizes",fullWidth,maxWidth,open,onClose:()=>setOpen(!1)},react.createElement(Dialog_DialogContentText,null,"You can set my maximum width and whether to adapt or not."),react.createElement(Box.Z,{noValidate:!0,component:"form",sx:{display:"flex",flexDirection:"column",m:"auto",width:"fit-content"}},react.createElement(FormControl.Z,{sx:{mt:2,minWidth:120}},react.createElement(InputLabel.Z,{htmlFor:"max-width"},"maxWidth"),react.createElement(Select.Z,{autoFocus:!0,value:maxWidth,onChange:event=>setMaxWidth(event.target.value),label:"maxWidth",inputProps:{name:"max-width",id:"max-width"}},react.createElement(MenuItem.Z,{value:!1},"false"),react.createElement(MenuItem.Z,{value:"xs"},"xs"),react.createElement(MenuItem.Z,{value:"sm"},"sm"),react.createElement(MenuItem.Z,{value:"md"},"md"),react.createElement(MenuItem.Z,{value:"lg"},"lg"),react.createElement(MenuItem.Z,{value:"xl"},"xl"))),react.createElement(FormControlLabel.Z,{sx:{mt:1},control:react.createElement(Switch.Z,{checked:fullWidth,onChange:event=>setFullWidth(event.target.checked)}),label:"Full width"}))))},Actioned=()=>{var[open,setOpen]=(0,react.useState)(!1),handleClose=()=>setOpen(!1);return react.createElement("div",null,react.createElement(Button.Z,{variant:"outlined",onClick:()=>setOpen(!0)},"Open form dialog"),react.createElement(components_Dialog_Dialog,{title:"Subscribe",open,onClose:handleClose,actions:[{label:"Cancel",onClick:()=>handleClose()},{label:"Subscribe",onClick:()=>handleClose()}]},react.createElement(Dialog_DialogContentText,null,"To subscribe to this website, please enter your email address here. We will send updates occasionally."),react.createElement(TextField.Z,{autoFocus:!0,margin:"dense",id:"name",label:"Email Address",type:"email",fullWidth:!0,variant:"standard"})))},Info=()=>{var[open,setOpen]=react.useState(!1);return react.createElement(react.Fragment,null,react.createElement(Button.Z,{variant:"outlined",onClick:()=>setOpen(!0)},"Open alert dialog"),react.createElement(components_Dialog_Dialog,{open,onClose:()=>setOpen(!1),titleId:"alert-dialog-title",contentId:"alert-dialog-description",title:"Use Google's location service?",autoContentPadding:!0},"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."))},DisableAutoPadding=()=>{var emails=["username@gmail.com","user02@gmail.com"],[open,setOpen]=(0,react.useState)(!1),[selectedValue,setSelectedValue]=(0,react.useState)(emails[1]),handleClose=value=>{setOpen(!1),setSelectedValue(value)};return react.createElement("div",null,react.createElement(Typography.Z,{variant:"subtitle1",component:"div"},"Selected: ",selectedValue),react.createElement("br",null),react.createElement(Button.Z,{variant:"outlined",onClick:()=>setOpen(!0)},"Open simple dialog"),react.createElement(components_Dialog_Dialog,{selectedValue,open,onClose:handleClose,title:"Set backup account",autoContentPadding:!1},react.createElement(List.Z,{sx:{pt:0}},emails.map((email=>react.createElement(ListItem.ZP,{key:email,disableGutters:!0},react.createElement(ListItemButton.Z,{onClick:()=>handleClose(email),key:email},react.createElement(ListItemAvatar.Z,null,react.createElement(Avatar.Z,{sx:{bgcolor:blue.Z[100],color:blue.Z[600]}},react.createElement(Person.Z,null))),react.createElement(ListItemText.Z,{primary:email}))))),react.createElement(ListItem.ZP,{disableGutters:!0},react.createElement(ListItemButton.Z,{autoFocus:!0,onClick:()=>handleClose("addAccount")},react.createElement(ListItemAvatar.Z,null,react.createElement(Avatar.Z,null,react.createElement(Add.Z,null))),react.createElement(ListItemText.Z,{primary:"Add account"}))))))};Default.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Default.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:Dialog_stories_objectSpread({originalSource:"() => {\n  return <Dialog />;\n}"},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2$=_Default$parameters2.docs)||void 0===_Default$parameters2$?void 0:_Default$parameters2$.source)})}),Draggabled.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Draggabled.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_Draggabled$parameter=Draggabled.parameters)||void 0===_Draggabled$parameter?void 0:_Draggabled$parameter.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <div>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog title="Draggable title section" open={open} onClose={handleClose} draggable>\n        To draggable dialog component click on title section and drag to\n        anywhere\n      </Dialog>\n    </div>;\n}'},null===(_Draggabled$parameter2=Draggabled.parameters)||void 0===_Draggabled$parameter2||null===(_Draggabled$parameter3=_Draggabled$parameter2.docs)||void 0===_Draggabled$parameter3?void 0:_Draggabled$parameter3.source)})}),Dividers.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Dividers.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_Dividers$parameters=Dividers.parameters)||void 0===_Dividers$parameters?void 0:_Dividers$parameters.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog title="Dividers" open={open} dividers onClose={handleClose} actions={[{\n      label: "OK",\n      onClick: () => handleClose()\n    }]}>\n        <DialogContentText>\n          See, there are dividers between title, content and actions\n        </DialogContentText>\n      </Dialog>\n    </>;\n}'},null===(_Dividers$parameters2=Dividers.parameters)||void 0===_Dividers$parameters2||null===(_Dividers$parameters3=_Dividers$parameters2.docs)||void 0===_Dividers$parameters3?void 0:_Dividers$parameters3.source)})}),Fullscreen.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Fullscreen.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_Fullscreen$parameter=Fullscreen.parameters)||void 0===_Fullscreen$parameter?void 0:_Fullscreen$parameter.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const [fullWidth, setFullWidth] = useState(true);\n  const [maxWidth, setMaxWidth] = useState("sm");\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const handleMaxWidthChange = event => setMaxWidth(event.target.value);\n  const handleFullWidthChange = event => setFullWidth(event.target.checked);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open max-width dialog\n      </Button>\n      <Dialog title="Optional sizes" fullWidth={fullWidth} maxWidth={maxWidth} open={open} onClose={handleClose}>\n        <DialogContentText>\n          You can set my maximum width and whether to adapt or not.\n        </DialogContentText>\n        <Box noValidate component="form" sx={{\n        display: "flex",\n        flexDirection: "column",\n        m: "auto",\n        width: "fit-content"\n      }}>\n          <FormControl sx={{\n          mt: 2,\n          minWidth: 120\n        }}>\n            <InputLabel htmlFor="max-width">maxWidth</InputLabel>\n            <Select autoFocus value={maxWidth} onChange={handleMaxWidthChange} label="maxWidth" inputProps={{\n            name: "max-width",\n            id: "max-width"\n          }}>\n              <MenuItem value={false}>false</MenuItem>\n              <MenuItem value="xs">xs</MenuItem>\n              <MenuItem value="sm">sm</MenuItem>\n              <MenuItem value="md">md</MenuItem>\n              <MenuItem value="lg">lg</MenuItem>\n              <MenuItem value="xl">xl</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControlLabel sx={{\n          mt: 1\n        }} control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />} label="Full width" />\n        </Box>\n      </Dialog>\n    </>;\n}'},null===(_Fullscreen$parameter2=Fullscreen.parameters)||void 0===_Fullscreen$parameter2||null===(_Fullscreen$parameter3=_Fullscreen$parameter2.docs)||void 0===_Fullscreen$parameter3?void 0:_Fullscreen$parameter3.source)})}),Actioned.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Actioned.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_Actioned$parameters=Actioned.parameters)||void 0===_Actioned$parameters?void 0:_Actioned$parameters.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <div>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog title="Subscribe" open={open} onClose={handleClose} actions={[{\n      label: "Cancel",\n      onClick: () => handleClose()\n    }, {\n      label: "Subscribe",\n      onClick: () => handleClose()\n    }]}>\n        <DialogContentText>\n          To subscribe to this website, please enter your email address here. We\n          will send updates occasionally.\n        </DialogContentText>\n        <TextField autoFocus margin="dense" id="name" label="Email Address" type="email" fullWidth variant="standard" />\n      </Dialog>\n    </div>;\n}'},null===(_Actioned$parameters2=Actioned.parameters)||void 0===_Actioned$parameters2||null===(_Actioned$parameters3=_Actioned$parameters2.docs)||void 0===_Actioned$parameters3?void 0:_Actioned$parameters3.source)})}),Info.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},Info.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_Info$parameters=Info.parameters)||void 0===_Info$parameters?void 0:_Info$parameters.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  return <>\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open alert dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} titleId="alert-dialog-title" contentId="alert-dialog-description" title="Use Google\'s location service?" autoContentPadding>\n        Let Google help apps determine location. This means sending anonymous\n        location data to Google, even when no apps are running.\n      </Dialog>\n    </>;\n}'},null===(_Info$parameters2=Info.parameters)||void 0===_Info$parameters2||null===(_Info$parameters2$doc=_Info$parameters2.docs)||void 0===_Info$parameters2$doc?void 0:_Info$parameters2$doc.source)})}),DisableAutoPadding.parameters=Dialog_stories_objectSpread(Dialog_stories_objectSpread({},DisableAutoPadding.parameters),{},{docs:Dialog_stories_objectSpread(Dialog_stories_objectSpread({},null===(_DisableAutoPadding$p=DisableAutoPadding.parameters)||void 0===_DisableAutoPadding$p?void 0:_DisableAutoPadding$p.docs),{},{source:Dialog_stories_objectSpread({originalSource:'() => {\n  const emails = ["username@gmail.com", "user02@gmail.com"];\n  const [open, setOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(emails[1]);\n  const handleClickOpen = () => setOpen(true);\n  const handleClose = value => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n  return <div>\n      <Typography variant="subtitle1" component="div">\n        Selected: {selectedValue}\n      </Typography>\n      <br />\n      <Button variant="outlined" onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog selectedValue={selectedValue} open={open} onClose={handleClose} title="Set backup account" autoContentPadding={false}>\n        <List sx={{\n        pt: 0\n      }}>\n          {emails.map(email => <ListItem key={email} disableGutters>\n              <ListItemButton onClick={() => handleClose(email)} key={email}>\n                <ListItemAvatar>\n                  <Avatar sx={{\n                bgcolor: blue[100],\n                color: blue[600]\n              }}>\n                    <PersonIcon />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>)}\n\n          <ListItem disableGutters>\n            <ListItemButton autoFocus onClick={() => handleClose("addAccount")}>\n              <ListItemAvatar>\n                <Avatar>\n                  <AddIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary="Add account" />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>;\n}'},null===(_DisableAutoPadding$p2=DisableAutoPadding.parameters)||void 0===_DisableAutoPadding$p2||null===(_DisableAutoPadding$p3=_DisableAutoPadding$p2.docs)||void 0===_DisableAutoPadding$p3?void 0:_DisableAutoPadding$p3.source)})});var __namedExportsOrder=["Default","Draggabled","Dividers","Fullscreen","Actioned","Info","DisableAutoPadding"]}}]);