{"version":3,"file":"4432.ec310c00.iframe.bundle.js","mappings":";;;;;AAQA;;;;;AAMA;;;;;AAUA;;;;;AAMA;ACvBA;;;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;;AAEA","sources":["webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styled.tsx"],"sourcesContent":["import { css } from '@mui/material/styles';\nexport function ellipsisRow1(props) {\n  if (props.noWrap || props.rows !== 1) return css``;\n  return css`\n        text-overflow: ellipsis;\n        white-space: normal;\n        overflow: hidden;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\nexport function ellipsisRows(props) {\n  if (props.noWrap || !props.rows || props.rows && props.rows <= 1) {\n    return css``;\n  }\n  return css`\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: normal;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}","import { Box, Typography as MuiTypography } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\nimport { ellipsisRow1, ellipsisRows } from './Typography.styles';\nimport { numberToPx } from '../../../utils/helpers';\nexport const Border = styled(Box, {\n  shouldForwardProp: propName => !['autoWidth', 'noWrap', 'border', 'rows'].includes(propName)\n})`\n    width: ${props => numberToPx(props.width) ?? (props.autoWidth ? 'auto' : '100%')};\n    display: flex;\n    align-items: center;\n    border: ${props => props.border && typeof props.border === 'boolean' ? '1px solid black' : props.border};\n    ${ellipsisRows}\n    ${ellipsisRow1}\n`;\nexport const Typography = styled(MuiTypography, {\n  shouldForwardProp: propName => !['fontSize', 'font', 'customColor', 'bold', 'italic', 'underline', 'strike', 'charsCase', 'sup', 'sub', 'monospace', 'lineHeight', 'textDirection', 'textWidth', 'bgColor'].includes(propName)\n})`\n    display: ${props => props.display ?? 'unset'};\n    width: ${props => props.textWidth ?? '100%'};\n    color: ${props => props.customColor};\n    background-color: ${props => props.bgColor};\n    font-weight: ${props => props.bold && typeof props.bold === 'boolean' ? 'bold' : props.bold};\n    font-size: ${props => numberToPx(props.fontSize)};\n    font-style: ${props => props.italic ? 'italic' : undefined};\n    font-family: ${props => props.font ?? undefined};\n    text-decoration: ${props => props.underline ? 'underline' : undefined};\n    text-decoration: ${props => props.strike ? 'line-through' : undefined};\n    text-transform: ${props => ({\n  upper: 'uppercase',\n  lower: 'lowercase',\n  capital: 'capitalize'\n})[props.charsCase]};\n    vertical-align: ${props => props.sup ? 'super' : props.sub ? 'sub' : undefined};\n    line-height: ${props => props.lineHeight};\n    direction: ${props => props.textDirection};\n    ${props => props.monospace ? css`\n                  font-family: monospace;\n              ` : undefined};\n    white-space: normal;\n\n    &:has(:not(:empty)) {\n        display: inherit;\n    }\n`;"],"names":[],"sourceRoot":""}