{"version":3,"file":"components-_FIXED-Table-__stories__-Table-stories.5f449363.iframe.bundle.js","mappings":";;;;AA+CA;AAKA;AACA;AACA;;AAGA;;;;;AAOA;AAIA;;AC1DA;;;;AAIA;;;AAKA;;;;AAOA;;;ACUA;AACA;AACA;AA7BA;;;;;;AACA;AAWA;;;;;AACA;;ACdA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAMA;AAHA;;AAgBA;;;;;AAKA;;AAOA;;AAWA;;;;;AAKA;;AAOA;AC5DA;AACA;;;ACsBA;;;;;;;;AAWA;;AAOA;AACA;AACA;AAEA;;;AAKA;AACA;AACA;AAEA;;;AC7CA;;;;;;;AAUA;AAGA;;;;;;;;;;;;AAwBA;;;;;AAqCA;;AC3FA;;AAIA;ACoCA;;AAEA;;AAEA;;AAEA;;;;;;AA9CA;;;;;;;;;;AAaA;AACA;AACA;;;AAdA;ACRA;;ACWA;AACA;;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;AASA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;AAsBA;;;;AAKA;;;;;;;;;;AAaA;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;;;;AAIA;;;;AAIA;;;;;;;;;;AAUA;;AAEA;;AAKA;ACjIA;AACA;AACA;AACA;;AAEA;;AAIA","sources":["webpack://mui-simple/./src/components/_FIXED/Table/Table.styled.tsx","webpack://mui-simple/./src/components/DraggableList/DraggableList.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Chip/Chip.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Divider/Divider.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Divider/Divider.styled.tsx","webpack://mui-simple/./src/components/_FIXED/List/List.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Menu/Menu.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Pagination/Pagination.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Paper/Paper.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Paper/Paper.tsx","webpack://mui-simple/./src/components/_FIXED/Switch/Switch.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Switch/Switch.styled.tsx"],"sourcesContent":["import { Image as MuiImage } from 'mui-image';\nimport { styled, css } from '@mui/material/styles';\nimport {\n    Box as MuiBox,\n    Table as MuiTable,\n    TableBody as MuiTableBody,\n    TableCell as MuiTableCell,\n    TableContainer as MuiTableContainer,\n    TableHead as MuiTableHead,\n    TablePagination as MuiTablePagination,\n    TableRow as MuiTableRow,\n    TableSortLabel as MuiTableSortLabel,\n    Toolbar as MuiToolbar,\n} from '@mui/material';\n\nimport MuiCheckbox from '../Checkbox/Checkbox';\nimport MuiAvatar from '../Avatar/Avatar';\nimport MuiTypography from '../Typography/Typography';\nimport MuiTooltip from '../Tooltip/Tooltip';\nimport MuiButton from '../Button/Button';\nimport MuiPaper from '../Paper/Paper';\nimport { extractColors } from './Table.utils';\nimport type { ColorsProps } from './Table.desc';\n\nexport const Typography = MuiTypography;\nexport const Avatar = MuiAvatar;\nexport const Paper = MuiPaper;\nexport const Checkbox = MuiCheckbox;\nexport const Tooltip = MuiTooltip;\n\nexport const Image: any = MuiImage;\n\nexport const Box = MuiBox;\nexport const Button = MuiButton;\nexport const Table = MuiTable;\nexport const TableBody = MuiTableBody;\n\ninterface TableCellProp {\n    colors?: ColorsProps;\n    centerContent?: boolean;\n}\nexport const TableCell = styled(MuiTableCell, {\n    shouldForwardProp: (propName: PropertyKey) => !['colors', 'centerContent'].includes(propName as string),\n})<TableCellProp>`\n    padding-left: 1em;\n    padding-right: 1em;\n\n    ${(props: any) => {\n        const { colors, theme } = props;\n        const { color, background } = extractColors({ theme, colors }) ?? {};\n\n        return css`\n            color: ${color};\n            background-color: ${background};\n        `;\n    }};\n\n    ${(props: any) => {\n        return props.centerContent\n            ? css`\n                  width: 100%;\n                  justify-content: center;\n                  align-items: center;\n                  display: flex;\n              `\n            : css``;\n    }}\n`;\nexport const TableContainer = MuiTableContainer;\nexport const TableHead = MuiTableHead;\nexport const TablePagination = MuiTablePagination;\nexport const TableRow: any = MuiTableRow;\nexport const TableSortLabel = MuiTableSortLabel;\nexport const Toolbar = MuiToolbar;\n","import { styled, css } from '@mui/material/styles';\nimport { Box } from '@mui/material';\nimport { FlexDirectionType } from '../decs';\n\ninterface DraggableListULProps {\n    flexGap?: number | string;\n    flexDirection?: FlexDirectionType;\n}\nexport const DraggableListUL = styled('ul')<DraggableListULProps>`\n    display: flex;\n    gap: ${(props: any) => props.flexGap};\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    ${(props: any) =>\n        props.flexDirection === 'row'\n            ? css`\n                  flex-direction: row;\n                  width: max-content;\n              `\n            : css`\n                  flex-direction: column;\n                  width: 100%;\n              `};\n`;\n\nexport const DraggableListULItem = styled(Box)`\n    width: 100%;\n`;\n","import type { ComponentType } from 'react';\nimport { Chip as MuiChip } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\nimport type { ChipProps as MuiChipProps } from '@mui/material';\nimport type { SerializedStyles } from '@emotion/serialize';\nimport type { ChipProps } from '../../decs';\n\ntype ChipStyledPropsType = Omit<ChipProps, 'label'> & MuiChipProps;\n\nfunction multiLineStyle(props: ChipStyledPropsType): SerializedStyles {\n    if (!props.multiLine) return css``;\n\n    return css`\n        height: auto;\n        & .MuiChip-label {\n            display: block;\n            white-space: normal;\n        }\n    `;\n}\n\nfunction alignEndIconStyle(props: ChipStyledPropsType): SerializedStyles {\n    if (!props.alignEndIcon) return css``;\n\n    return css`\n        & .MuiChip-deleteIcon {\n            position: absolute;\n            right: 0;\n        }\n    `;\n}\n\nexport const Chip = styled(MuiChip, {\n    shouldForwardProp: (propName: string) =>\n        !['textColor', 'customColor', 'multiLine', 'rounded', 'alignEndIcon'].includes(propName as string),\n})<ChipStyledPropsType>`\n    border-radius: ${(props: any) => (props.rounded ? undefined : '4px')};\n    background-color: ${(props: any) => props.customColor};\n    color: ${(props: any) => props.textColor};\n    ${multiLineStyle}\n    ${alignEndIconStyle}\n` as ComponentType<ChipStyledPropsType>;\n","import { css } from '@mui/material/styles';\nimport type { SerializedStyles } from '@emotion/serialize';\nimport { numberToPx } from '../../../utils/helpers';\n\nfunction getCustomBorderStyle({ color, thicknessValue, borderPosition }): SerializedStyles {\n    const customColorStyle =\n        color &&\n        css`\n            ${borderPosition}-color: ${color};\n        `;\n\n    const thicknessStyle =\n        thicknessValue &&\n        css`\n            ${borderPosition}-width: ${thicknessValue};\n        `;\n\n    return css`\n        ${customColorStyle};\n        ${thicknessStyle};\n    `;\n}\n\nfunction getCustomColorStyle({ color }): SerializedStyles {\n    if (!color) return css``;\n\n    return css`\n        color: ${color};\n    `;\n}\n\nexport function verticalStyle(props): SerializedStyles {\n    if (props.orientation !== 'vertical') return css``;\n\n    const { thickness, color } = props;\n\n    const thicknessValue = (thickness !== undefined && numberToPx(thickness)) || 'thin';\n\n    return css`\n        & .MuiDivider-wrapper {\n            ${getCustomColorStyle({ color })};\n        }\n\n        &::before,\n        &::after {\n            ${getCustomBorderStyle({\n                color,\n                thicknessValue,\n                borderPosition: 'border-left',\n            })};\n        }\n    `;\n}\n\nexport function horizontalStyle(props): SerializedStyles {\n    if (props.orientation !== 'horizontal') return css``;\n\n    const { thickness, color } = props;\n\n    const thicknessValue = (thickness !== undefined && numberToPx(thickness)) || 'thin';\n\n    return css`\n        & .MuiDivider-wrapper {\n            ${getCustomColorStyle({ color })};\n        }\n\n        &::before,\n        &::after {\n            ${getCustomBorderStyle({\n                color,\n                thicknessValue,\n                borderPosition: 'border-top',\n            })};\n        }\n    `;\n}\n","import { Divider as MuiDivider } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport type { DividerProps } from '@mui/material';\nimport type { ComponentType } from 'react';\nimport { verticalStyle, horizontalStyle } from './Divider.styles';\n\ninterface DividerStyledProps {\n    thickness?: number | string;\n    [key: string]: any;\n}\ntype DividerStyledPropsType = Omit<DividerProps, 'thickness'> & DividerStyledProps;\n\nexport const Divider = styled(MuiDivider, {\n    shouldForwardProp: (propName: string) => !['color', 'thickness'].includes(propName as string),\n})<DividerStyledPropsType>`\n    ${verticalStyle}\n    ${horizontalStyle}\n` as ComponentType<DividerStyledPropsType>;\n","import React from 'react';\n\nimport {\n    Box as MuiBox,\n    List as MuiList,\n    ListItem as MuiListItem,\n    ListItemAvatar as MuiListItemAvatar,\n    ListItemButton as MuiListItemButton,\n    ListItemButtonProps,\n    ListItemIcon as MuiListItemIcon,\n    ListItemSecondaryAction as MuiListItemSecondaryAction,\n    ListItemText as MuiListItemText,\n    ListSubheader as MuiListSubheader,\n    Collapse as MuiCollapse,\n} from '@mui/material';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { styled } from '@mui/material/styles';\nimport MuiDivider from '../Divider/Divider';\nimport { numberToPx } from '../../../utils/helpers';\nimport { FlexDirectionType } from '../../decs';\n\nexport const Divider = MuiDivider;\nexport const Collapse = MuiCollapse;\n\nexport const List = styled(({ useTransition, children, ...props }: any) => (\n    <MuiList {...props}>\n        {useTransition && children ? (\n            <TransitionGroup>\n                <CSSTransition timeout={500}>{children}</CSSTransition>\n            </TransitionGroup>\n        ) : (\n            children\n        )}\n    </MuiList>\n))`\n    width: 100%;\n`;\n\nexport const ListItem = styled(MuiListItem, {\n    shouldForwardProp: (propName: string) => !['flexDirectionItems'].includes(propName as string),\n})`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    & .MuiCollapse-root {\n        width: 100%;\n    }\n`;\nexport const ListItemAvatar = MuiListItemAvatar;\nexport const ListItemButton: React.FC<\n    ListItemButtonProps & { href?: string; padding?: string | number; flexDirection?: FlexDirectionType }\n> = styled(MuiListItemButton, {\n    shouldForwardProp: (propName: string) => !['flexDirection', 'draggable'].includes(propName),\n})`\n    width: 100%;\n    padding: ${(props: any) => numberToPx(props.padding)};\n    flex-direction: ${(props: any) => props.flexDirection ?? 'row'};\n    padding-inline-end: ${(props: any) => (props.draggable ? '3.5em' : undefined)};\n`;\nexport const ListItemBox = styled(MuiBox, {\n    shouldForwardProp: (propName: string) => !['flexDirection', 'draggable'].includes(propName),\n})`\n    width: 100%;\n    display: flex;\n    padding: ${(props: any) => props.padding};\n    flex-direction: ${(props: any) => props.flexDirection ?? 'row'};\n    padding-inline-end: ${(props: any) => (props.draggable ? '3.5em' : undefined)};\n`;\nexport const ListItemIcon = MuiListItemIcon;\nexport const ListItemSecondaryAction = MuiListItemSecondaryAction;\nexport const ListItemText = MuiListItemText;\nexport const ListSubheader = MuiListSubheader;\n","import React from 'react';\nimport type { ComponentType, PropsWithChildren } from 'react';\nimport {\n    Menu as MuiMenu,\n    MenuList as MuiMenuList,\n    MenuItem as MuiMenuItem,\n    ListItemIcon as MuiListItemIcon,\n    ListItemText as MuiListItemText,\n    Box,\n} from '@mui/material';\nimport type { BoxProps, MenuProps } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\n\nexport const ContextMenuWrapper: any = styled(Box)`\n    width: 100%;\n    height: 100%;\n`;\n\ninterface ManuWrapperStyledProps {\n    arrow?: boolean;\n    [key: string]: any;\n}\ntype ManuWrapperStyledPropsType = ManuWrapperStyledProps & BoxProps & any;\n\nexport const MenuWrapper = styled(Box, {\n    label: 'arrow-test',\n    shouldForwardProp: (propName: string) => !['arrow'].includes(propName),\n})<ManuWrapperStyledPropsType>`\n    position: relative;\n    overflow: visible;\n    margin-top: 1.5px;\n    width: 0;\n\n    &::before {\n        ${(props: any) =>\n            props.arrow &&\n            css`\n                background-color: ${props.theme.palette.background.paper};\n                content: '';\n                display: block;\n                position: absolute;\n                top: 0;\n                left: 14px;\n                width: 10px;\n                height: 10px;\n                transform: translateY(-50%) rotate(45deg);\n                z-index: 1;\n            `}\n    }\n` as ComponentType<ManuWrapperStyledPropsType>;\n\ninterface ManuStyledProps {\n    height?: string | number;\n    width?: string | number;\n    maxHeight?: string | number;\n    elevation?: number;\n    onClick?: (event: any) => void;\n    [key: string]: any;\n}\ntype MenuStyledPropsType = PropsWithChildren<Omit<MenuProps, 'onClick'> & ManuStyledProps & any>;\n\nexport const Menu = styled(\n    ({\n        height,\n        width,\n        maxHeight,\n        elevation,\n        ...props\n    }: {\n        height?: string | number;\n        width?: string | number;\n        maxHeight?: string | number;\n        elevation?: number;\n        [key: string]: any;\n    }) => (\n        <MuiMenu\n            open\n            PaperProps={{\n                elevation,\n                sx: {\n                    height,\n                    width,\n                    maxHeight,\n                    overflowY: 'auto',\n                    '& > .MuiList-root': { pt: 0, pb: 0 },\n                    '& .MuiAvatar-root': { width: 32, height: 32, ml: -0.5, mr: 1 },\n                },\n            }}\n            {...props}\n        />\n    )\n)<MenuStyledPropsType>`\n    max-width: 100%;\n    & .MuiList-root:focus-visible {\n        outline: none;\n    }\n` as ComponentType<MenuStyledPropsType>;\n\nexport const MenuList = MuiMenuList;\nexport const MenuItem = MuiMenuItem;\nexport const ListItemIcon = MuiListItemIcon;\nexport const ListItemText = MuiListItemText;\n","import { Pagination as MuiPagination, PaginationItem as MuiPaginationItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const Pagination = styled(MuiPagination, {\n    shouldForwardProp: (propName: string) => !['customColor'].includes(propName as string),\n})<{ customColor: string }>`\n    .MuiPaginationItem-root.Mui-selected {\n        background-color: ${(props: any) => props.customColor};\n    }\n`;\n\nexport const PaginationItem = MuiPaginationItem;\n","import { get } from 'lodash-es';\nimport { Paper as MuiPaper } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\nimport { numberToPx } from '../../../utils/helpers';\nimport type { ComponentType } from 'react';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nfunction imageStyle(props): SerializedStyles {\n    if (!props.imageSrc) return css``;\n\n    return css`\n        background-color: unset;\n\n        &::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-image: url('${props.imageSrc}');\n            background-size: ${props.imageLayout};\n            opacity: ${props.imageOpacity};\n            z-index: -1;\n        }\n    `;\n}\n\ninterface PaperStylesProps {\n    width: string | number;\n    height: string | number;\n    muiColor: string;\n    square: boolean;\n    variant: string;\n    customColor: string;\n    textColor: string;\n    imageSrc: string;\n    imageOpacity: number;\n    elevation: number;\n    imageLayout: string;\n}\nexport const Paper = styled(MuiPaper, {\n    shouldForwardProp: (propName: string) =>\n        !['muiColor', 'customColor', 'textColor', 'imageSrc', 'imageOpacity', 'imageLayout'].includes(\n            propName as string\n        ),\n})<PaperStylesProps>`\n    width: ${(props: any) => numberToPx(props.width)};\n\n    height: ${(props: any) => numberToPx(props.height)};\n\n    background-color: ${(props: any) => props.customColor};\n\n    color: ${(props: any) => props.textColor ?? get(props, `theme.palette.${props.muiColor}.contrastText`)};\n\n    position: relative;\n\n    z-index: 0;\n\n    ${imageStyle};\n` as ComponentType<PaperStylesProps>;\n","const _excluded = [\"color\", \"elevation\", \"height\", \"imageLayout\", \"imageOpacity\", \"imageSrc\", \"square\", \"textColor\", \"variant\", \"width\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport React from 'react';\nimport { Paper as MuiPaper } from './Paper.styled';\nimport { useCustomColor } from '../../../utils/helpers';\nconst Paper = _ref => {\n  let {\n      color,\n      elevation,\n      height,\n      imageLayout = 'cover',\n      imageOpacity = 1,\n      imageSrc,\n      square,\n      textColor: _textColor,\n      variant,\n      width\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const [customColor, muiColor] = useCustomColor(color);\n  const [textColor] = useCustomColor(_textColor);\n  return /*#__PURE__*/React.createElement(MuiPaper, _extends({\n    customColor: customColor,\n    elevation: variant !== 'outlined' ? elevation : undefined,\n    height: height,\n    imageLayout: imageLayout,\n    imageOpacity: imageOpacity,\n    imageSrc: imageSrc,\n    muiColor: muiColor,\n    square: square,\n    textColor: textColor,\n    variant: variant,\n    width: width\n  }, props));\n};\nPaper.displayName = \"Paper\";\nPaper.displayName = 'Paper';\nexport default Paper;","import { css } from '@mui/material/styles';\nimport type { SerializedStyles } from '@emotion/serialize';\nimport { SWITCH_STYLES } from './Switch.consts';\n\nexport function customColor(props): SerializedStyles {\n    if (!props.color) return css``;\n    const opacity = props.theme.palette?.action?.hoverOpacity;\n    const color = props.color;\n\n    return css`\n    & .MuiSwitch-switchBase.Mui-checked {\n      color: ${color};\n      &:hover { background-color: alpha(${color}, ${opacity}) },\n    },\n  & .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track {\n    background-color: ${color};\n  },`;\n}\n\nexport function antSwitchStyle(props): SerializedStyles {\n    if (props.switchStyle !== SWITCH_STYLES.ANT) return css``;\n\n    const { theme, color } = props;\n    const mode = theme?.palette?.mode;\n    const transitions = theme?.transitions;\n\n    return css`\n        width: 28px;\n        height: 16px;\n        padding: 0;\n        display: flex;\n        &:active {\n            & .MuiSwitch-thumb {\n                width: 15px;\n            }\n            & .MuiSwitch-switchBase.Mui-checked {\n                transform: translateX(9px);\n            }\n        }\n        & .MuiSwitch-switchBase {\n            padding: 2px;\n            &.Mui-checked {\n                transform: translateX(12px);\n                color: #fff;\n                & + .MuiSwitch-track {\n                    opacity: 1;\n                    background-color: ${color};\n                }\n            }\n        }\n        & .MuiSwitch-thumb {\n            box-shadow: 0 2px 4px 0 rgb(0 35 11 / 20%);\n            width: 12px;\n            height: 12px;\n            border-radius: 6px;\n            transition: ${transitions.create(['width'], { duration: 200 })};\n        }\n        & .MuiSwitch-track {\n            border-radius: 16 / 2;\n            opacity: 1;\n            background-color: ${mode === 'dark' ? 'rgba(255, 255, 255, .35)' : 'rgba(0, 0, 0, .25)'};\n            box-sizing: border-box;\n        }\n    `;\n}\n\nexport function androidSwitchStyle(props): SerializedStyles {\n    if (props.switchStyle !== SWITCH_STYLES.ANDROID12) return css``;\n\n    const { theme, color } = props;\n\n    return css`\n    padding: 8px;\n    & .MuiSwitch-track {\n      border-radius: 12px;\n      &:before, &:after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 16px;\n        height: 16px;\n      },\n      &:before {\n        left: 12px;\n        background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${\n            color ? encodeURIComponent(theme.palette.getContrastText(color)) : '#000000'\n        }\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"/></svg>');\n      },\n      &:after {\n        right: 12px;\n        background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\n            '#FFFFFF' // theme.palette.getContrastText(color)\n        )}\" d=\"M19,13H5V11H19V13Z\" /></svg>'); \n      },\n  },\n  & .MuiSwitch-thumb {\n    box-shadow: none;\n    border: 1px solid rgba(0, 0, 0, 0.15);\n    width: 16px;\n    height: 16px;\n    margin: 1px 2px 4px 1px;\n  }\n  `;\n}\n\nexport function iosSwitchStyle(props): SerializedStyles {\n    if (props.switchStyle !== SWITCH_STYLES.IOS) return css``;\n\n    const { theme, color } = props;\n\n    return css`\n        width: 42px;\n        height: 26px;\n        padding: 0;\n        & .MuiSwitch-switchBase {\n            padding: 0;\n            margin: 2px;\n            transition-duration: 300ms;\n            &.Mui-checked {\n                transform: translateX(16px);\n                color: #fff;\n                & + .MuiSwitch-track {\n                    background-color: ${color};\n                    opacity: 1;\n                    border: 0;\n                }\n                &.Mui-disabled + .MuiSwitch-track {\n                    opacity: 0.5;\n                }\n            }\n            &.Mui-focusVisible .MuiSwitch-thumb {\n                color: ${color};\n                border: 6px solid #fff;\n            }\n            &.Mui-disabled .MuiSwitch-thumb {\n                color: ${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]};\n            }\n            ,\n            &.Mui-disabled + .MuiSwitch-track {\n                opacity: ${theme.palette.mode === 'light' ? 0.7 : 0.3};\n            }\n        }\n        & .MuiSwitch-thumb {\n            box-sizing: border-box;\n            width: 22px;\n            height: 22px;\n        }\n        & .MuiSwitch-track {\n            border-radius: 20px;\n            background-color: ${theme.palette.mode === 'light' ? '#E9E9EA' : '#39393D'};\n            opacity: 1;\n            transition: ${theme.transitions.create(['background-color'], {\n                duration: 500,\n            })};\n        }\n    `;\n}\n","import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    FormControlLabel,\n    FormHelperText as MuiFormHelperText,\n    Switch as MuiSwitch,\n    Stack as MuiStack,\n} from '@mui/material';\nimport MuiTypography from '../Typography/Typography';\nimport { SWITCH_STYLES } from './Switch.consts';\nimport { customColor, antSwitchStyle, androidSwitchStyle, iosSwitchStyle } from './Switch.styles';\nimport { isDefined } from '../../../utils/helpers';\n\nexport const FormHelperText = MuiFormHelperText;\nexport const Switch = styled(\n    ({ switchStyle, checked, color, scale, ...props }: any) => (\n        <MuiSwitch\n            {...props}\n            checked={checked}\n            focusVisibleClassName={switchStyle === SWITCH_STYLES.IOS ? '.Mui-focusVisible' : ''}\n            sx={{ ...props.sx }}\n        />\n    ),\n    {\n        shouldForwardProp: (prop: string) =>\n            !['textColor', 'fontSize', 'helperText', 'switchStyle', 'labelPlacement'].includes(prop),\n    }\n)`\n    ${(props: any) => customColor(props)}\n    ${(props: any) => antSwitchStyle(props)}\n    ${(props: any) => androidSwitchStyle(props)}\n    ${(props: any) => iosSwitchStyle(props)}\n    &.MuiSwitch-root {\n        scale: ${(props: any) => props.scale};\n    }\n`;\n\nexport const SwitchOnOff = styled(\n    ({ onOffLabelSide, ON_LABEL, OFF_LABEL, ...props }: any) => {\n        const offLabel = OFF_LABEL && <MuiTypography tooltip={false}>{OFF_LABEL}</MuiTypography>;\n        const onLabel = ON_LABEL && <MuiTypography tooltip={false}>{ON_LABEL}</MuiTypography>;\n        const label = props.checked ? onLabel : offLabel;\n\n        return isDefined(onOffLabelSide) && ['left', 'right'].includes(onOffLabelSide) ? (\n            <MuiStack direction=\"row\" spacing={0} alignItems=\"center\">\n                {onOffLabelSide === 'left' ? label : undefined}\n                <Switch {...props} />\n                {onOffLabelSide === 'right' ? label : undefined}\n            </MuiStack>\n        ) : (\n            <MuiStack direction=\"row\" spacing={0} alignItems=\"center\">\n                {offLabel}\n                <Switch {...props} />\n                {onLabel}\n            </MuiStack>\n        );\n    },\n    { shouldForwardProp: (prop: string) => ![].includes(prop) }\n)``;\n\nexport const SwitchControlled = styled(\n    ({ required, fontSize, disabled, labelPlacement, color, labelPadding, label = '', ...props }: any) => (\n        <FormControlLabel\n            required={required}\n            disabled={disabled}\n            labelPlacement={labelPlacement}\n            sx={{\n                m: 0,\n                userSelect: 'none',\n                '.MuiFormControlLabel-label': {\n                    color,\n                    fontSize,\n                    ...(labelPadding !== undefined && { paddingLeft: labelPadding }),\n                },\n            }}\n            label={label}\n            {...props}\n        />\n    ),\n    {\n        shouldForwardProp: (prop: string) => !['textColor', 'muiColor', 'fontSize'].includes(prop),\n    }\n)``;\n"],"names":[],"sourceRoot":""}