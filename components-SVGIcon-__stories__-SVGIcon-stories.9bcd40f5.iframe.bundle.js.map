{"version":3,"file":"components-SVGIcon-__stories__-SVGIcon-stories.9bcd40f5.iframe.bundle.js","mappings":";;;;;;AAWA;;;ACEA;AAGA;AAIA;;AAEA;;;;AAIA;;;;;;AAMA;;;AAGA;;;AAKA;;AAKA;;;;;AAMA;;;;AAIA;AAGA;AACA;;AAKA;;;ACvBA;;AAGA;;AAxBA;;;;;AAUA;;;;;AAMA;AAhCA;;;;;AAQA;;;;;AAMA;AAmCA;;AAkBA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAIA","sources":["webpack://@hdriel/mui-simple/./src/components/SVGIcon/SVGIcon.styled.tsx","webpack://@hdriel/mui-simple/./src/components/ToggleButtonGroup/ToggleButtonGroup.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Typography/Typography.styled.tsx"],"sourcesContent":["import { styled } from \"@mui/material/styles\";\r\nimport InlineSVG from \"react-inlinesvg\";\r\n\r\nexport const SVG = styled(InlineSVG, {\r\n  shouldForwardProp: (propName) => ![\"color\"].includes(propName),\r\n})`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  svg {\r\n    ${(props) => ({ ...props })}\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport {\r\n  ToggleButton as MuiToggleButton,\r\n  ToggleButtonGroup as MuiToggleButtonGroup,\r\n  Paper as MuiPaper,\r\n  alpha,\r\n  Divider as MuiDivider,\r\n} from \"@mui/material\";\r\n\r\nexport const Divider = styled(({ ...props }) => (\r\n  <MuiDivider flexItem orientation=\"vertical\" {...props} />\r\n))`\r\n  margin: ${(props) => props.theme.spacing(1, 0.5)};\r\n`;\r\n\r\nexport const ToggleButtonGroups = styled(\r\n  ({ ...props }) => <MuiPaper elevation={0} {...props} />,\r\n  { shouldForwardProp: (propName) => ![\"fullWidth\"].includes(propName) }\r\n)`\r\n  width: ${(props) => (props.fullWidth ? \"100%\" : \"max-content\")};\r\n  display: flex;\r\n  border: ${({ theme }) => `1px solid ${theme.palette.divider}`};\r\n  flex-wrap: wrap;\r\n\r\n  & .MuiToggleButtonGroup-grouped {\r\n    margin: ${(props) => props.theme.spacing(0.5)};\r\n    border: 0;\r\n    &.Mui-disabled {\r\n      border: 0;\r\n    }\r\n    &:not(:first-of-type) {\r\n      border-radius: ${(props) => props.theme.shape.borderRadius};\r\n    }\r\n    &:first-of-type {\r\n      border-radius: ${(props) => props.theme.shape.borderRadius};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ToggleButtonGroup = styled(\r\n  ({ ...props }) => <MuiToggleButtonGroup {...props} />,\r\n  { shouldForwardProp: (propName) => ![\"customColor\"].includes(propName) }\r\n)`\r\n  & .MuiToggleButton-root:hover {\r\n    background-color: ${(props) =>\r\n      props.customColor && alpha(props.customColor, 0.2)};\r\n  }\r\n\r\n  & .Mui-selected,\r\n  & .MuiTouchRipple-root {\r\n    color: ${(props) => props.customColor};\r\n  }\r\n\r\n  & .Mui-selected {\r\n    ${(props) => {\r\n      const color = props.customColor && alpha(props.customColor, 0.2);\r\n      return css`\r\n        background-color: ${color ? `${color} !important` : \"\"};\r\n      `;\r\n    }}\r\n  }\r\n`;\r\n\r\nexport const ToggleButton = styled(\r\n  ({ value, disabled, disableRipple, onChange, ...props }) => (\r\n    <MuiToggleButton\r\n      value={value}\r\n      disabled={disabled}\r\n      onChange={onChange}\r\n      disableRipple={disableRipple}\r\n      {...props}\r\n    />\r\n  )\r\n)`\r\n  width: max-content;\r\n`;\r\n","import { Box, Typography as MuiTypography } from \"@mui/material\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport { numberToPx } from \"../../utils/helpers\";\r\n\r\nfunction ellipsisRow1(props) {\r\n  if (props.noWrap || props.rows !== 1) return css``;\r\n\r\n  return css`\r\n    text-overflow: ellipsis;\r\n    white-space: normal;\r\n    overflow: hidden;\r\n    display: -webkit-box !important;\r\n    -webkit-line-clamp: ${props.rows};\r\n    -webkit-box-orient: vertical;\r\n    & > * {\r\n      white-space: unset !important;\r\n    }\r\n  `;\r\n}\r\n\r\nfunction ellipsisRows(props) {\r\n  if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\r\n    return css``;\r\n  }\r\n\r\n  return css`\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: normal;\r\n    display: -webkit-box !important;\r\n    -webkit-line-clamp: ${props.rows};\r\n    -webkit-box-orient: vertical;\r\n    & > * {\r\n      white-space: unset !important;\r\n    }\r\n  `;\r\n}\r\n\r\nexport const Border = styled(Box, {\r\n  shouldForwardProp: (propName) => ![\"autoWidth\", \"noWrap\"].includes(propName),\r\n})`\r\n  width: ${(props) =>\r\n    numberToPx(props.width) ?? (props.autoWidth ? \"auto\" : \"100%\")};\r\n  display: flex;\r\n  border: ${(props) =>\r\n    props.border && typeof props.border === \"boolean\"\r\n      ? \"1px solid black\"\r\n      : props.border};\r\n\r\n  ${ellipsisRows}\r\n  ${ellipsisRow1}\r\n`;\r\n\r\nexport const Typography = styled(MuiTypography, {\r\n  shouldForwardProp: (propName) =>\r\n    ![\r\n      \"fontSize\",\r\n      \"customColor\",\r\n      \"bold\",\r\n      \"italic\",\r\n      \"underline\",\r\n      \"strike\",\r\n      \"charsCase\",\r\n      \"sup\",\r\n      \"sub\",\r\n      \"monospace\",\r\n      \"lineHeight\",\r\n      \"bgColor\",\r\n    ].includes(propName),\r\n})`\r\n  width: 100%;\r\n  color: ${(props) => props.customColor};\r\n  background-color: ${(props) => props.bgColor};\r\n  font-weight: ${(props) =>\r\n    props.bold && typeof props.bold === \"boolean\" ? \"bold\" : props.bold};\r\n\r\n  font-size: ${(props) => numberToPx(props.fontSize)};\r\n  font-style: ${(props) => (props.italic ? \"italic\" : undefined)};\r\n  text-decoration: ${(props) => (props.underline ? \"underline\" : undefined)};\r\n  text-decoration: ${(props) => (props.strike ? \"line-through\" : undefined)};\r\n  text-transform: ${(props) =>\r\n    ({ upper: \"uppercase\", lower: \"lowercase\", capital: \"capitalize\" }[\r\n      props.charsCase\r\n    ])};\r\n  vertical-align: ${(props) =>\r\n    props.sup ? \"super\" : props.sub ? \"sub\" : undefined};\r\n  line-height: ${(props) => props.lineHeight};\r\n  ${(props) =>\r\n    props.monospace\r\n      ? css`\r\n          font-family: monospace;\r\n        `\r\n      : undefined};\r\n  white-space: normal;\r\n\r\n  &:has(:not(:empty)) {\r\n    display: inherit;\r\n  }\r\n`;\r\n"],"names":[],"sourceRoot":""}