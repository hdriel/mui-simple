{"version":3,"file":"4382.01e94662.iframe.bundle.js","mappings":";;AAgCA;ACYA;AACA;AACA;AACA;AAnBA;;;;;;AACA;AAzBA;AAWA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAGA;;ACJA;;AAWA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;;AAIA;;;AAGA;;;AAGA;;;AAGA","sources":["webpack://@hdriel/mui-simple/./src/components/Autocomplete/InputAutocomplete.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Chip/Chip.styled.tsx","webpack://@hdriel/mui-simple/./src/components/TextField/TextField.styled.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { styled, lighten, darken } from \"@mui/material/styles\";\r\nimport parse from \"autosuggest-highlight/parse\";\r\nimport match from \"autosuggest-highlight/match\";\r\n\r\nimport {\r\n  Autocomplete as MuiAutocomplete,\r\n  Box as MuiBox,\r\n  Stack as MuiStack,\r\n} from \"@mui/material\";\r\n\r\nexport const Autocomplete = MuiAutocomplete;\r\n\r\nexport const Box = MuiBox;\r\n\r\nexport const Stack = MuiStack;\r\n\r\nexport const GroupHeader = styled(\"div\")(({ theme, color }) => ({\r\n  position: \"sticky\",\r\n  top: \"-8px\",\r\n  padding: \"4px 10px\",\r\n  color: color,\r\n  backgroundColor:\r\n    theme.palette.mode === \"light\"\r\n      ? color && lighten(color, 0.85)\r\n      : color && darken(color, 0.8),\r\n}));\r\n\r\nexport const GroupItems = styled(\"ul\")`\r\n  padding: 0;\r\n`;\r\n\r\nexport const renderHighlightOptionCB =\r\n  (_field) =>\r\n  (props, option, { inputValue }) => {\r\n    const optionValue = typeof _field === \"function\" ? _field(option) : _field;\r\n    const matches = match(optionValue, inputValue);\r\n    const parts = parse(optionValue, matches);\r\n\r\n    return (\r\n      <li {...props}>\r\n        <div>\r\n          {parts.map((part, index) => (\r\n            <span\r\n              key={index}\r\n              style={{ fontWeight: part.highlight ? 700 : 400 }}\r\n            >\r\n              {part.text}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </li>\r\n    );\r\n  };\r\n","import { get } from 'lodash-es';\r\nimport { Chip as MuiChip } from '@mui/material';\r\nimport { styled, css, emphasize } from '@mui/material/styles';\r\n\r\nfunction chipBreadCrumbsStyle(props) {\r\n    if (!props.breadCrumbsStyle) return css``;\r\n    const { theme, muiColor } = props;\r\n    const backgroundColor = get(\r\n        theme,\r\n        `palette.${muiColor}.main`,\r\n        theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[800]\r\n    );\r\n    const textColor = get(theme, `palette.${muiColor}.contrastText`, theme.palette.text.primary);\r\n\r\n    return css`\r\n    height: ${theme.spacing(3)};\r\n    color: ${textColor};\r\n    font-weight: ${theme.typography.fontWeightRegular};\r\n    &:hover, &:focus {\r\n      background-color: ${emphasize(backgroundColor, 0.06)};\r\n    }\r\n    &:active {\r\n      box-shadow: ${theme.shadows[1]};\r\n      background-color: ${emphasize(backgroundColor, 0.12)};\r\n    },\r\n  `;\r\n}\r\n\r\nfunction multiLineStyle(props) {\r\n    if (!props.multiLine) return css``;\r\n\r\n    return css`\r\n        height: auto;\r\n        & .MuiChip-label {\r\n            display: block;\r\n            white-space: normal;\r\n        }\r\n    `;\r\n}\r\n\r\nexport const Chip = styled(MuiChip, {\r\n    shouldForwardProp: (propName) =>\r\n        !['textColor', 'customColor', 'multiLine', 'breadCrumbsStyle', 'rounded'].includes(propName),\r\n})`\r\n    width: ${(props) => props.width ?? 'auto'};\r\n    border-radius: ${(props) => (props.rounded ? undefined : '4px')};\r\n    background-color: ${(props) => props.customColor};\r\n    color: ${(props) => props.textColor};\r\n    ${multiLineStyle}\r\n    ${chipBreadCrumbsStyle}\r\n`;\r\n","import React from \"react\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport CommitRoundedIcon from \"@mui/icons-material/CommitRounded\";\r\n\r\nimport {\r\n  TextField as MuiTextField,\r\n  Box as MuiBox,\r\n  Stack as MuiStack,\r\n} from \"@mui/material\";\r\nimport { getCustomColor } from \"../../utils/helpers\";\r\nimport Button from \"../Button/Button\";\r\n\r\nexport const Stack = MuiStack;\r\nexport const Box = MuiBox;\r\nexport const SliderIcon = (props) => (\r\n  <Button icon={<CommitRoundedIcon />} {...props} />\r\n);\r\n\r\nexport const TextField = styled(MuiTextField, {\r\n  shouldForwardProp: (propName) =>\r\n    ![\"colorText\", \"colorLabel\", \"colorActive\"].includes(propName),\r\n})`\r\n  ${(props) => {\r\n    const colorText = getCustomColor(props, { field: \"colorText\" });\r\n    const colorLabel = getCustomColor(props, { field: \"colorLabel\" });\r\n    const hoverColorLabel = getCustomColor(props, {\r\n      field: \"colorLabel\",\r\n      darken: 0.3,\r\n    });\r\n    const colorActive = getCustomColor(props, { field: \"colorActive\" });\r\n\r\n    return css`\r\n      & input {\r\n        color: ${colorText} !important;\r\n      }\r\n      & label {\r\n        color: ${colorLabel};\r\n      }\r\n      & label.Mui-focused {\r\n        color: ${colorActive ?? colorLabel};\r\n      }\r\n      & .MuiInputBase-root:after {\r\n        border-bottom-color: ${colorActive ?? colorLabel};\r\n      }\r\n      & .MuiInput-underline:after {\r\n        border-bottom-color: ${colorLabel};\r\n      }\r\n      & .MuiInputBase-root .MuiFilledInput-root:after {\r\n        border-bottom-color: ${colorLabel};\r\n      }\r\n      & .MuiOutlinedInput-root {\r\n        & fieldset {\r\n          border-color: ${colorLabel};\r\n        }\r\n        &:hover fieldset {\r\n          border-color: ${hoverColorLabel};\r\n        }\r\n        &.Mui-focused fieldset {\r\n          border-color: ${colorActive ?? colorLabel};\r\n        }\r\n      }\r\n    `;\r\n  }}\r\n`;\r\n"],"names":[],"sourceRoot":""}