"use strict";(self.webpackChunk_hdriel_mui_simple=self.webpackChunk_hdriel_mui_simple||[]).push([[3185],{"./src/components/Button/__stories__/Button.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{var _a,_b,_c,_d,_e;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:'import React from \'react\';\nimport { action } from \'@storybook/addon-actions\';\nimport type { Meta, StoryObj } from \'@storybook/react\';\nimport Button from \'../Button\';\nimport { Delete as DeleteIcon, Send as SendIcon, Fingerprint as FingerprintIcon } from \'@mui/icons-material\';\nimport { Stack, Typography } from \'@mui/material\';\nconst meta: Meta<typeof Button> = {\n  title: \'Inputs/Button\',\n  component: Button,\n  argTypes: {\n    // variant: undefined,\n    // disabled: undefined,\n    // startIcon: undefined,\n    // endIcon: undefined,\n    // onClick: undefined,\n    // onRightClick: undefined,\n    // link: undefined,\n    // color: undefined,\n    // disableRipple: undefined,\n    // isLoading: undefined,\n    // loadingIconPosition: undefined,\n    // loadingLabel: undefined,\n    // size: undefined,\n    // icon: undefined,\n    // fullWidth: undefined,\n    // tooltipProps: undefined,\n    // uppercase: undefined,\n    // minWidth: undefined,\n  },\n  // parameters: { actions: { handles: \'click\' } },\n  tags: [\'autodocs\']\n};\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\n/** The button with default color as primary from palette theme */\nexport const Primary: Story = {\n  args: {\n    children: \'Primary\'\n  }\n};\n\n//\n// export default {\n//     title: \'Inputs/Button\',\n//     component: Button,\n// };\n\n// const actions = {\n//     onClick: action(\'onClick\'),\n// };\n//\n// export const Default = () => {\n//     return <Button {...actions} />;\n// };\n//\n// export const FullWidth = () => {\n//     return (\n//         <Stack spacing={3}>\n//             <Button {...actions} fullWidth variant="contained">\n//                 Full Width\n//             </Button>\n//             <Button {...actions} variant="contained">\n//                 Not Full Width\n//             </Button>\n//         </Stack>\n//     );\n// };\n//\n// export const Icons = () => {\n//     return (\n//         <Stack direction="row" spacing={3}>\n//             <Button {...actions}>Label only</Button>\n//             <Button {...actions} startIcon={<SendIcon />}>\n//                 Start Icon\n//             </Button>\n//             <Button {...actions} color="error" endIcon={<DeleteIcon />}>\n//                 End Icon\n//             </Button>\n//             <Button {...actions} color={\'#D05010\'} icon={<FingerprintIcon />} />\n//         </Stack>\n//     );\n// };\n//\n// export const Variants = () => {\n//     return (\n//         <Stack direction="row" spacing={3}>\n//             <Button {...actions} variant="text">\n//                 text\n//             </Button>\n//             <Button {...actions} variant="outlined">\n//                 outlined\n//             </Button>\n//             <Button {...actions} variant="contained">\n//                 contained\n//             </Button>\n//             <Button {...actions}>default</Button>\n//         </Stack>\n//     );\n// };\n//\n// export const DisableRipple = () => {\n//     return (\n//         <Stack direction="column" spacing={3}>\n//             <Stack direction="row" spacing={3}>\n//                 <Button {...actions} disableRipple color="primary">\n//                     Disable Ripple\n//                 </Button>\n//                 <Button {...actions} color={\'#D05010\'} disableRipple icon={<FingerprintIcon />} />\n//             </Stack>\n//             <Stack direction="row" spacing={3}>\n//                 <Button {...actions} color="secondary">\n//                     Ripple\n//                 </Button>\n//                 <Button {...actions} color={\'#D05010\'} icon={<FingerprintIcon />} />\n//             </Stack>\n//         </Stack>\n//     );\n// };\n//\n// export const ButtonLink = () => {\n//     return (\n//         <Stack direction={\'column\'} spacing={2}>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Button {...actions} disableRipple disableElevation variant="text" link="https://chat.openai.com/">\n//                     Chat GTP\n//                 </Button>\n//                 <Button {...actions} color={\'#D05010\'} icon={<SendIcon />} link="https://chat.openai.com/" />\n//             </Stack>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Button {...actions} variant="text">\n//                     normal button\n//                 </Button>\n//                 <Button {...actions} color={\'#D05010\'} icon={<FingerprintIcon />} />\n//             </Stack>\n//         </Stack>\n//     );\n// };\n//\n// export const Elevation = () => {\n//     return (\n//         <Stack direction={\'row\'} spacing={2}>\n//             <Button {...actions} disableElevation link="https://chat.openai.com/">\n//                 Disable Elevation\n//             </Button>\n//             <Button {...actions} link="https://chat.openai.com/">\n//                 Elevation\n//             </Button>\n//         </Stack>\n//     );\n// };\n//\n// export const ThemedAndColored = () => {\n//     return (\n//         <Stack direction="column" spacing={2}>\n//             {[undefined, \'primary\', \'secondary\', \'info\', \'success\', \'error\', \'#df01fd\'].map((color, index) => (\n//                 <Stack key={index} direction="row" spacing={2}>\n//                     {[\'contained\', \'outlined\', \'text\'].map((variant) => (\n//                         <Button {...actions} key={variant} variant={variant} color={color} sx={{ minWidth: 200 }}>\n//                             {color ?? \'Default\'}\n//                         </Button>\n//                     ))}\n//                     <Button {...actions} icon={<SendIcon />} color={color} />\n//                 </Stack>\n//             ))}\n//         </Stack>\n//     );\n// };\n//\n// export const Loading = () => {\n//     return (\n//         <Stack direction={\'column\'} spacing={2}>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Typography>Loading</Typography>\n//                 <Button {...actions} isLoading disableElevation startIcon={<SendIcon />} loadingIconPosition="start">\n//                     Start Send Data\n//                 </Button>\n//                 <Button {...actions} isLoading disableElevation endIcon={<SendIcon />} loadingIconPosition="end">\n//                     End Send Data\n//                 </Button>\n//                 <Button {...actions} isLoading disableElevation>\n//                     Send Data\n//                 </Button>\n//             </Stack>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Typography>Loading Label</Typography>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     startIcon={<SendIcon />}\n//                     loadingIconPosition="start"\n//                     loadingLabel="Loading..."\n//                 >\n//                     Start Send Data\n//                 </Button>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     endIcon={<SendIcon />}\n//                     loadingIconPosition="end"\n//                     loadingLabel="Loading..."\n//                 >\n//                     End Send Data\n//                 </Button>\n//                 <Button {...actions} isLoading disableElevation loadingLabel="Loading...">\n//                     Send Data\n//                 </Button>\n//             </Stack>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Typography>Size Small</Typography>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     startIcon={<SendIcon />}\n//                     loadingIconPosition="start"\n//                     loadingLabel="Loading..."\n//                     size="small"\n//                 >\n//                     Start Send Data\n//                 </Button>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     endIcon={<SendIcon />}\n//                     loadingIconPosition="end"\n//                     loadingLabel="Loading..."\n//                     size="small"\n//                 >\n//                     End Send Data\n//                 </Button>\n//                 <Button {...actions} isLoading disableElevation loadingLabel="Loading..." size="small">\n//                     Send Data\n//                 </Button>\n//             </Stack>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Typography>Size Medium</Typography>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     startIcon={<SendIcon />}\n//                     loadingIconPosition="start"\n//                     loadingLabel="Loading..."\n//                     size="medium"\n//                 >\n//                     Start Send Data\n//                 </Button>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     endIcon={<SendIcon />}\n//                     loadingIconPosition="end"\n//                     loadingLabel="Loading..."\n//                     size="medium"\n//                 >\n//                     End Send Data\n//                 </Button>\n//                 <Button {...actions} isLoading disableElevation loadingLabel="Loading..." size="medium">\n//                     Send Data\n//                 </Button>\n//             </Stack>\n//             <Stack direction={\'row\'} spacing={2}>\n//                 <Typography>Size Large</Typography>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     startIcon={<SendIcon />}\n//                     loadingIconPosition="start"\n//                     loadingLabel="Loading..."\n//                     size="large"\n//                 >\n//                     Start Send Data\n//                 </Button>\n//                 <Button\n//                     {...actions}\n//                     isLoading\n//                     disableElevation\n//                     endIcon={<SendIcon />}\n//                     loadingIconPosition="end"\n//                     loadingLabel="Loading..."\n//                     size="large"\n//                 >\n//                     End Send Data\n//                 </Button>\n//                 <Button {...actions} isLoading disableElevation loadingLabel="Loading..." size="large">\n//                     Send Data\n//                 </Button>\n//             </Stack>\n//         </Stack>\n//     );\n// };\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: "{\\n  args: {\\n    children: \'Primary\'\\n  }\\n}",\n      ...Primary.parameters?.docs?.source\n    },\n    description: {\n      story: "The button with default color as primary from palette theme",\n      ...Primary.parameters?.docs?.description\n    }\n  }\n};',locationsMap:{primary:{startLoc:{col:30,line:37},endLoc:{col:1,line:41},startBody:{col:30,line:37},endBody:{col:1,line:41}}}}},title:"Inputs/Button",component:__webpack_require__("./src/components/Button/Button.tsx").Z,argTypes:{},tags:["autodocs"]};var Primary={args:{children:"Primary"}};Primary.parameters=_objectSpread(_objectSpread({},Primary.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_a=Primary.parameters)||void 0===_a?void 0:_a.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    children: 'Primary'\n  }\n}"},null===(_c=null===(_b=Primary.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source),description:_objectSpread({story:"The button with default color as primary from palette theme"},null===(_e=null===(_d=Primary.parameters)||void 0===_d?void 0:_d.docs)||void 0===_e?void 0:_e.description)})});var __namedExportsOrder=["Primary"];try{Primary.displayName="Primary",Primary.__docgenInfo={description:"The button with default color as primary from palette theme",displayName:"Primary",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Button/__stories__/Button.stories.tsx#Primary"]={docgenInfo:Primary.__docgenInfo,name:"Primary",path:"src/components/Button/__stories__/Button.stories.tsx#Primary"})}catch(__react_docgen_typescript_loader_error){}}}]);