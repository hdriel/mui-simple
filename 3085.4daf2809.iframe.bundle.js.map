{"version":3,"file":"3085.4daf2809.iframe.bundle.js","mappings":";;AA+BA;ACKA;AACA;AACA;AA7BA;;;;;;AACA;AAWA;;;;;AACA","sources":["webpack://mui-simple/./src/components/_FIXED/Autocomplete/InputAutocomplete.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Chip/Chip.styled.tsx"],"sourcesContent":["import React from 'react';\nimport { styled, lighten, darken } from '@mui/material/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n\nimport { Autocomplete as MuiAutocomplete, Box as MuiBox, Stack as MuiStack } from '@mui/material';\n\nexport const Autocomplete = MuiAutocomplete;\n\nexport const Box = MuiBox;\n\nexport const Stack = MuiStack;\n\nexport const GroupHeader = styled('div')(({ theme, color }) => ({\n    position: 'sticky',\n    zIndex: 1,\n    top: '-8px',\n    padding: '4px 10px',\n    color,\n    backgroundColor: theme.palette.mode === 'light' ? color && lighten(color, 0.85) : color && darken(color, 0.8),\n}));\n\nexport const GroupItems = styled('ul')`\n    padding: 0;\n`;\n\nexport type RenderOptionCB = (\n    props: any,\n    option: string,\n    input: { index: number; inputValue: string; selected: boolean }\n) => React.ReactNode;\nexport const renderHighlightOptionCB = (fieldValue: any): RenderOptionCB => {\n    const HighlightOption: RenderOptionCB = (\n        props,\n        option,\n        { inputValue, index, selected } = { inputValue: '', index: 0, selected: false }\n    ) => {\n        const optionValue = typeof fieldValue === 'function' ? fieldValue(option) : fieldValue;\n\n        const matches = (optionValue && match(optionValue, inputValue?.toLowerCase())) || [];\n        const parts = parse(optionValue, matches);\n\n        return (\n            // todo: change to ListItem\n            <li {...props}>\n                <div\n                    style={{\n                        display: 'inline-block',\n                        alignItems: 'center',\n                    }}\n                >\n                    {parts.map((part, index) => (\n                        <span key={index} style={{ fontWeight: selected || part.highlight ? 700 : 400 }}>\n                            {part.text}\n                        </span>\n                    ))}\n                </div>\n            </li>\n        );\n    };\n\n    return HighlightOption;\n};\n","import type { ComponentType } from 'react';\nimport { Chip as MuiChip } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\nimport type { ChipProps as MuiChipProps } from '@mui/material';\nimport type { SerializedStyles } from '@emotion/serialize';\nimport type { ChipProps } from '../../decs';\n\ntype ChipStyledPropsType = Omit<ChipProps, 'label'> & MuiChipProps;\n\nfunction multiLineStyle(props: ChipStyledPropsType): SerializedStyles {\n    if (!props.multiLine) return css``;\n\n    return css`\n        height: auto;\n        & .MuiChip-label {\n            display: block;\n            white-space: normal;\n        }\n    `;\n}\n\nfunction alignEndIconStyle(props: ChipStyledPropsType): SerializedStyles {\n    if (!props.alignEndIcon) return css``;\n\n    return css`\n        & .MuiChip-deleteIcon {\n            position: absolute;\n            right: 0;\n        }\n    `;\n}\n\nexport const Chip = styled(MuiChip, {\n    shouldForwardProp: (propName: string) =>\n        !['textColor', 'customColor', 'multiLine', 'rounded', 'alignEndIcon'].includes(propName as string),\n})<ChipStyledPropsType>`\n    border-radius: ${(props: any) => (props.rounded ? undefined : '4px')};\n    background-color: ${(props: any) => props.customColor};\n    color: ${(props: any) => props.textColor};\n    ${multiLineStyle}\n    ${alignEndIconStyle}\n` as ComponentType<ChipStyledPropsType>;\n"],"names":[],"sourceRoot":""}