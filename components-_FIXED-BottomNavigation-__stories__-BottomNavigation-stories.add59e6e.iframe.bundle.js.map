{"version":3,"file":"components-_FIXED-BottomNavigation-__stories__-BottomNavigation-stories.add59e6e.iframe.bundle.js","mappings":";;AAqDA;AAGA;ACTA;;AAEA;;AAEA;;AAEA;;;;;;AA9CA;;;;;;;;;;AAaA;AACA;AACA;;;AAdA;ACHA;;;;;;ACMA;;ACJA","sources":["webpack://mui-simple/./src/components/_FIXED/BottomNavigation/BottomNavigation.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Paper/Paper.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Paper/Paper.tsx","webpack://mui-simple/./src/components/_FIXED/SVGIcon/SVGIcon.styled.tsx","webpack://mui-simple/./src/components/_FIXED/SVGIcon/SVGIcon.tsx"],"sourcesContent":["import React from 'react';\nimport type { ComponentType, PropsWithChildren } from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    BottomNavigation as MuiBottomNavigation,\n    BottomNavigationAction as MuiBottomNavigationAction,\n} from '@mui/material';\nimport type { BottomNavigationProps } from '@mui/material';\n\nimport Paper from '../Paper/Paper';\n\ninterface BottomNavigationStyledProps {\n    fixedToBottom?: boolean;\n    customColor?: string;\n    elevation?: number;\n    fixedToTop?: boolean;\n    width?: number | string;\n    position?: 'absolute' | 'fixed';\n}\n\ntype BottomNavigationStyledPropsType = BottomNavigationProps & BottomNavigationStyledProps & any;\n\nexport const BottomNavigation = styled(\n    ({\n        width,\n        elevation,\n        fixedToTop,\n        fixedToBottom,\n        position,\n        ...props\n    }: PropsWithChildren<BottomNavigationStyledProps>) => (\n        <Paper\n            sx={{\n                width,\n                ...((fixedToTop || fixedToBottom) && {\n                    position: position ?? 'fixed',\n                    left: 0,\n                    right: 0,\n                    top: fixedToTop ? 0 : undefined,\n                    bottom: fixedToBottom ? 0 : undefined,\n                    zIndex: 2,\n                }),\n            }}\n            elevation={elevation}\n        >\n            <MuiBottomNavigation {...props} />\n        </Paper>\n    ),\n    {\n        shouldForwardProp: (propName) => !['customColor'].includes(propName as string),\n    }\n)<BottomNavigationStyledPropsType>`\n    & .MuiBottomNavigationAction-root.Mui-selected {\n        color: ${(props) => props.customColor}\n` as ComponentType<BottomNavigationStyledPropsType>;\n\nexport const BottomNavigationAction: any = MuiBottomNavigationAction;\n","import { get } from 'lodash-es';\nimport { Paper as MuiPaper } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\nimport { numberToPx } from '../../../utils/helpers';\nimport type { ComponentType } from 'react';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nfunction imageStyle(props): SerializedStyles {\n    if (!props.imageSrc) return css``;\n\n    return css`\n        background-color: unset;\n\n        &::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-image: url('${props.imageSrc}');\n            background-size: ${props.imageLayout};\n            opacity: ${props.imageOpacity};\n            z-index: -1;\n        }\n    `;\n}\n\ninterface PaperStylesProps {\n    width: string | number;\n    height: string | number;\n    muiColor: string;\n    square: boolean;\n    variant: string;\n    customColor: string;\n    textColor: string;\n    imageSrc: string;\n    imageOpacity: number;\n    elevation: number;\n    imageLayout: string;\n}\nexport const Paper = styled(MuiPaper, {\n    shouldForwardProp: (propName) =>\n        !['muiColor', 'customColor', 'textColor', 'imageSrc', 'imageOpacity', 'imageLayout'].includes(\n            propName as string\n        ),\n})<PaperStylesProps>`\n    width: ${(props) => numberToPx(props.width)};\n\n    height: ${(props) => numberToPx(props.height)};\n\n    background-color: ${(props) => props.customColor};\n\n    color: ${(props) => props.textColor ?? get(props, `theme.palette.${props.muiColor}.contrastText`)};\n\n    position: relative;\n\n    z-index: 0;\n\n    ${imageStyle};\n` as ComponentType<PaperStylesProps>;\n","import React from 'react';\nimport { Paper as MuiPaper } from './Paper.styled';\nimport { useCustomColor } from '../../../utils/helpers';\nimport type { PaperProps } from '../../decs';\n\nconst Paper: React.FC<PaperProps> = ({\n    color,\n    elevation,\n    height,\n    imageLayout = 'cover',\n    imageOpacity = 1,\n    imageSrc,\n    square,\n    textColor: _textColor,\n    variant,\n    width,\n    ...props\n}): React.ReactElement | React.ReactNode => {\n    const [customColor, muiColor] = useCustomColor(color);\n    const [textColor] = useCustomColor(_textColor);\n\n    return (\n        <MuiPaper\n            customColor={customColor}\n            elevation={variant !== 'outlined' ? elevation : undefined}\n            height={height}\n            imageLayout={imageLayout}\n            imageOpacity={imageOpacity}\n            imageSrc={imageSrc}\n            muiColor={muiColor}\n            square={square}\n            textColor={textColor}\n            variant={variant}\n            width={width}\n            {...props}\n        />\n    );\n};\n\nPaper.displayName = 'Paper';\n\nexport type { PaperProps } from '../../decs';\n\nexport default Paper;\n","import { styled } from '@mui/material/styles';\nimport InlineSVG from 'react-inlinesvg';\n\nexport const SVG = styled(InlineSVG, {\n    shouldForwardProp: (propName) => !['color'].includes(propName as string),\n})`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n        ${(props: any) => ({ ...props })}\n    }\n`;\n","import React, { isValidElement } from 'react';\nimport type { PropsWithChildren } from 'react';\nimport MuiIconName from './MuiIconName';\nimport { SVG } from './SVGIcon.styled';\nimport type { SVGIconProps } from '../../decs';\nimport { useCustomColor } from '../../../utils/helpers';\n\nconst SVGIcon: React.FC<PropsWithChildren<SVGIconProps>> = ({\n    children,\n    color,\n    height,\n    iconSrc,\n    muiIconName,\n    size,\n    sx: _sx,\n    width,\n    ...props\n}): React.ReactElement | React.ReactNode => {\n    const [customColor, muiColor] = useCustomColor(color);\n    const iconName = muiIconName || (typeof children === 'string' ? children : undefined);\n    const sx = { display: 'flex', justifyContent: 'center', alignItems: 'center', ..._sx };\n\n    if (children && isValidElement(children)) {\n        return children;\n    }\n\n    return (\n        <MuiIconName\n            name={iconName}\n            color={customColor}\n            width={size ?? width}\n            height={size ?? height}\n            sx={sx}\n            {...props}\n        >\n            {iconSrc ? (\n                <SVG\n                    src={iconSrc}\n                    fill={customColor}\n                    width={size ?? width}\n                    height={size ?? height}\n                    sx={sx}\n                    {...props}\n                />\n            ) : (\n                children\n            )}\n        </MuiIconName>\n    );\n};\n\nSVGIcon.displayName = 'SVGIcon';\n\nexport type { SVGIconProps } from '../../decs';\n\nexport default SVGIcon;\n"],"names":[],"sourceRoot":""}