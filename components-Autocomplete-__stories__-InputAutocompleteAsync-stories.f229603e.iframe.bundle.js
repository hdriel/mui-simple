"use strict";(self.webpackChunk_hdriel_mui_simple=self.webpackChunk_hdriel_mui_simple||[]).push([[2614],{"./src/components/Autocomplete/__stories__/InputAutocompleteAsync.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CountrySelect:()=>CountrySelect,Default:()=>Default,DisabledOptions:()=>DisabledOptions,FilmOptions:()=>FilmOptions,GroupedByCategories:()=>GroupedByCategories,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),_mui_material__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Autocomplete/InputAutocompleteAsync.tsx"),_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Autocomplete/__stories__/InputAutocomplete.mocks.ts");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:'import React, { useState } from "react";\nimport { Box, Stack } from "@mui/material";\nimport InputAutocompleteAsync from "../InputAutocompleteAsync";\nimport { countries, timeSlots, top100Films, top100FilmsWithFirstLetters } from "./InputAutocomplete.mocks";\nexport default {\n  title: "Inputs/Inputs/InputAutocompleteAsync",\n  component: InputAutocompleteAsync,\n  decorators: [Story => <div style={{\n    width: "450px",\n    padding: "1em",\n    border: "1px dashed black"\n  }}>\r\n        <Story />\r\n      </div>]\n};\nexport const Default = () => {\n  return <InputAutocompleteAsync />;\n};\nexport const FilmOptions = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map(variant => <InputAutocompleteAsync key={variant} label="Movie" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => top100Films} getOptionLabel={option => option.title} variant={variant} />)}\r\n    </Stack>;\n};\nexport const CountrySelect = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map((variant, index) => <InputAutocompleteAsync key={variant} label="Choose a country" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} variant={variant} fetchOptionsOnFocus getOptionsPromise={async () => countries} autoHighlight getOptionLabel={option => option.label} renderOption={(props, option) => <Box component="li" sx={{\n      "& > img": {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\r\n              <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\r\n              {option.label} ({option.code}) +{option.phone}\r\n            </Box>} />)}\r\n    </Stack>;\n};\nexport const GroupedByCategories = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map(variant => <InputAutocompleteAsync key={variant} id="grouped-demo" label="With categories" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => top100FilmsWithFirstLetters} groupBy={option => option.firstLetter} sortBy="title" getOptionLabel={option => option.title} width={400} />)}\r\n    </Stack>;\n};\nexport const DisabledOptions = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const _options = timeSlots.slice(0).map((option, index) => ({\n    time: option,\n    disabled: index % 4 === 0\n  }));\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map(variant => <InputAutocompleteAsync key={variant} variant={variant} id="grouped-demo" label="Disabled options" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => _options} getOptionLabel={option => option.time} width={200} />)}\r\n    </Stack>;\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <InputAutocompleteAsync />;\\n}",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nFilmOptions.parameters = {\n  ...FilmOptions.parameters,\n  docs: {\n    ...FilmOptions.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [selectedOption, setSelectedOption] = useState(null);\\n  return <Stack spacing={4}>\\r\\n      {[\\"filled\\", \\"standard\\", \\"outlined\\"].map(variant => <InputAutocompleteAsync key={variant} label=\\"Movie\\" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => top100Films} getOptionLabel={option => option.title} variant={variant} />)}\\r\\n    </Stack>;\\n}",\n      ...FilmOptions.parameters?.docs?.source\n    }\n  }\n};\nCountrySelect.parameters = {\n  ...CountrySelect.parameters,\n  docs: {\n    ...CountrySelect.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [selectedOption, setSelectedOption] = useState(null);\\n  return <Stack spacing={4}>\\r\\n      {[\\"filled\\", \\"standard\\", \\"outlined\\"].map((variant, index) => <InputAutocompleteAsync key={variant} label=\\"Choose a country\\" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} variant={variant} fetchOptionsOnFocus getOptionsPromise={async () => countries} autoHighlight getOptionLabel={option => option.label} renderOption={(props, option) => <Box component=\\"li\\" sx={{\\n      \\"& > img\\": {\\n        mr: 2,\\n        flexShrink: 0\\n      }\\n    }} {...props}>\\r\\n              <img loading=\\"lazy\\" width=\\"20\\" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt=\\"\\" />\\r\\n              {option.label} ({option.code}) +{option.phone}\\r\\n            </Box>} />)}\\r\\n    </Stack>;\\n}",\n      ...CountrySelect.parameters?.docs?.source\n    }\n  }\n};\nGroupedByCategories.parameters = {\n  ...GroupedByCategories.parameters,\n  docs: {\n    ...GroupedByCategories.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [selectedOption, setSelectedOption] = useState(null);\\n  return <Stack spacing={4}>\\r\\n      {[\\"filled\\", \\"standard\\", \\"outlined\\"].map(variant => <InputAutocompleteAsync key={variant} id=\\"grouped-demo\\" label=\\"With categories\\" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => top100FilmsWithFirstLetters} groupBy={option => option.firstLetter} sortBy=\\"title\\" getOptionLabel={option => option.title} width={400} />)}\\r\\n    </Stack>;\\n}",\n      ...GroupedByCategories.parameters?.docs?.source\n    }\n  }\n};\nDisabledOptions.parameters = {\n  ...DisabledOptions.parameters,\n  docs: {\n    ...DisabledOptions.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [selectedOption, setSelectedOption] = useState(null);\\n  const _options = timeSlots.slice(0).map((option, index) => ({\\n    time: option,\\n    disabled: index % 4 === 0\\n  }));\\n  return <Stack spacing={4}>\\r\\n      {[\\"filled\\", \\"standard\\", \\"outlined\\"].map(variant => <InputAutocompleteAsync key={variant} variant={variant} id=\\"grouped-demo\\" label=\\"Disabled options\\" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => _options} getOptionLabel={option => option.time} width={200} />)}\\r\\n    </Stack>;\\n}",\n      ...DisabledOptions.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{default:{startLoc:{col:23,line:16},endLoc:{col:1,line:18},startBody:{col:23,line:16},endBody:{col:1,line:18}},"film-options":{startLoc:{col:27,line:19},endLoc:{col:1,line:24},startBody:{col:27,line:19},endBody:{col:1,line:24}},"country-select":{startLoc:{col:29,line:25},endLoc:{col:1,line:38},startBody:{col:29,line:25},endBody:{col:1,line:38}},"grouped-by-categories":{startLoc:{col:35,line:39},endLoc:{col:1,line:44},startBody:{col:35,line:39},endBody:{col:1,line:44}},"disabled-options":{startLoc:{col:31,line:45},endLoc:{col:1,line:54},startBody:{col:31,line:45},endBody:{col:1,line:54}}}}},title:"Inputs/Inputs/InputAutocompleteAsync",component:_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__.Z,decorators:[Story=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"450px",padding:"1em",border:"1px dashed black"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null))]},Default=()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__.Z,null);Default.displayName="Default";const FilmOptions=()=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{spacing:4},["filled","standard","outlined"].map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__.Z,{key:variant,label:"Movie",selectedOption,setSelectedOption:(e,option)=>setSelectedOption(option),fetchOptionsOnFocus:!0,getOptionsPromise:async()=>_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.gE,getOptionLabel:option=>option.title,variant}))))};FilmOptions.displayName="FilmOptions";const CountrySelect=()=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{spacing:4},["filled","standard","outlined"].map(((variant,index)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__.Z,{key:variant,label:"Choose a country",selectedOption,setSelectedOption:(e,option)=>setSelectedOption(option),variant,fetchOptionsOnFocus:!0,getOptionsPromise:async()=>_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.hW,autoHighlight:!0,getOptionLabel:option=>option.label,renderOption:(props,option)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Z,_extends({component:"li",sx:{"& > img":{mr:2,flexShrink:0}}},props),react__WEBPACK_IMPORTED_MODULE_0__.createElement("img",{loading:"lazy",width:"20",src:`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`,srcSet:`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`,alt:""}),option.label," (",option.code,") +",option.phone)}))))};CountrySelect.displayName="CountrySelect";const GroupedByCategories=()=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{spacing:4},["filled","standard","outlined"].map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__.Z,{key:variant,id:"grouped-demo",label:"With categories",selectedOption,setSelectedOption:(e,option)=>setSelectedOption(option),fetchOptionsOnFocus:!0,getOptionsPromise:async()=>_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.K$,groupBy:option=>option.firstLetter,sortBy:"title",getOptionLabel:option=>option.title,width:400}))))};GroupedByCategories.displayName="GroupedByCategories";const DisabledOptions=()=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),_options=_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.bp.slice(0).map(((option,index)=>({time:option,disabled:index%4==0})));return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{spacing:4},["filled","standard","outlined"].map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocompleteAsync__WEBPACK_IMPORTED_MODULE_1__.Z,{key:variant,variant,id:"grouped-demo",label:"Disabled options",selectedOption,setSelectedOption:(e,option)=>setSelectedOption(option),fetchOptionsOnFocus:!0,getOptionsPromise:async()=>_options,getOptionLabel:option=>option.time,width:200}))))};DisabledOptions.displayName="DisabledOptions",Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},Default.parameters?.docs),{},{source:_objectSpread({originalSource:"() => {\n  return <InputAutocompleteAsync />;\n}"},Default.parameters?.docs?.source)})}),FilmOptions.parameters=_objectSpread(_objectSpread({},FilmOptions.parameters),{},{docs:_objectSpread(_objectSpread({},FilmOptions.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map(variant => <InputAutocompleteAsync key={variant} label="Movie" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => top100Films} getOptionLabel={option => option.title} variant={variant} />)}\r\n    </Stack>;\n}'},FilmOptions.parameters?.docs?.source)})}),CountrySelect.parameters=_objectSpread(_objectSpread({},CountrySelect.parameters),{},{docs:_objectSpread(_objectSpread({},CountrySelect.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map((variant, index) => <InputAutocompleteAsync key={variant} label="Choose a country" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} variant={variant} fetchOptionsOnFocus getOptionsPromise={async () => countries} autoHighlight getOptionLabel={option => option.label} renderOption={(props, option) => <Box component="li" sx={{\n      "& > img": {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\r\n              <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\r\n              {option.label} ({option.code}) +{option.phone}\r\n            </Box>} />)}\r\n    </Stack>;\n}'},CountrySelect.parameters?.docs?.source)})}),GroupedByCategories.parameters=_objectSpread(_objectSpread({},GroupedByCategories.parameters),{},{docs:_objectSpread(_objectSpread({},GroupedByCategories.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map(variant => <InputAutocompleteAsync key={variant} id="grouped-demo" label="With categories" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => top100FilmsWithFirstLetters} groupBy={option => option.firstLetter} sortBy="title" getOptionLabel={option => option.title} width={400} />)}\r\n    </Stack>;\n}'},GroupedByCategories.parameters?.docs?.source)})}),DisabledOptions.parameters=_objectSpread(_objectSpread({},DisabledOptions.parameters),{},{docs:_objectSpread(_objectSpread({},DisabledOptions.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const _options = timeSlots.slice(0).map((option, index) => ({\n    time: option,\n    disabled: index % 4 === 0\n  }));\n  return <Stack spacing={4}>\r\n      {["filled", "standard", "outlined"].map(variant => <InputAutocompleteAsync key={variant} variant={variant} id="grouped-demo" label="Disabled options" selectedOption={selectedOption} setSelectedOption={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => _options} getOptionLabel={option => option.time} width={200} />)}\r\n    </Stack>;\n}'},DisabledOptions.parameters?.docs?.source)})});const __namedExportsOrder=["Default","FilmOptions","CountrySelect","GroupedByCategories","DisabledOptions"]},"./src/components/Autocomplete/InputAutocompleteAsync.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>InputAutocompleteAsync,m:()=>useAutoCompleteAsync});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__),_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Autocomplete/InputAutocomplete.tsx"),_Progress_CircularProgress_CircularProgress__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Progress/CircularProgress/CircularProgress.tsx"),_utils_helpers__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/utils/helpers.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function useAutoCompleteAsync({getOptionsPromise,sleep:_sleep,getOptionsCallback,fetchOptionsOnFocus}){const[open,setOpen]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[options,setOptions]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),[loading,setLoading]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{let active=!0;if(open&&!options.length)return getOptionsPromise&&(setLoading(!0),getOptionsPromise().then((async options=>(await(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_3__._v)(_sleep),options))).then((async options=>getOptionsCallback?.()??[...options])).then((options=>active&&setOptions(options))).finally((()=>setLoading(!1)))),()=>{active=!1}}),[open,getOptionsPromise]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{!open&&fetchOptionsOnFocus&&setOptions([])}),[open,fetchOptionsOnFocus]);const endCmp=loading?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Progress_CircularProgress_CircularProgress__WEBPACK_IMPORTED_MODULE_2__.Z,{color:"inherit",size:20}):null;return{onOpen:()=>setOpen(!0),onClose:()=>setOpen(!1),options,open,loading,endCmp}}function InputAutocompleteAsync(_ref){let props=_extends({},(function _objectDestructuringEmpty(obj){if(null==obj)throw new TypeError("Cannot destructure "+obj)}(_ref),_ref));const asyncProps=useAutoCompleteAsync(props);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},props,asyncProps))}InputAutocompleteAsync.displayName="InputAutocompleteAsync",InputAutocompleteAsync.propTypes={getOptionLabel:prop_types__WEBPACK_IMPORTED_MODULE_4___default().func,getOptionsPromise:prop_types__WEBPACK_IMPORTED_MODULE_4___default().func,sleep:prop_types__WEBPACK_IMPORTED_MODULE_4___default().number,fetchOptionsOnFocus:prop_types__WEBPACK_IMPORTED_MODULE_4___default().bool},InputAutocompleteAsync.defaultProps={getOptionLabel:void 0,getOptionsPromise:void 0,sleep:1e3,fetchOptionsOnFocus:void 0};try{useAutoCompleteAsync.displayName="useAutoCompleteAsync",useAutoCompleteAsync.__docgenInfo={description:"",displayName:"useAutoCompleteAsync",props:{getOptionsPromise:{defaultValue:{value:"undefined"},description:"",name:"getOptionsPromise",required:!1,type:{name:"any"}},sleep:{defaultValue:{value:"1000"},description:"",name:"sleep",required:!1,type:{name:"any"}},getOptionsCallback:{defaultValue:null,description:"",name:"getOptionsCallback",required:!0,type:{name:"any"}},fetchOptionsOnFocus:{defaultValue:{value:"undefined"},description:"",name:"fetchOptionsOnFocus",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Autocomplete/InputAutocompleteAsync.tsx#useAutoCompleteAsync"]={docgenInfo:useAutoCompleteAsync.__docgenInfo,name:"useAutoCompleteAsync",path:"src/components/Autocomplete/InputAutocompleteAsync.tsx#useAutoCompleteAsync"})}catch(__react_docgen_typescript_loader_error){}try{InputAutocompleteAsync.displayName="InputAutocompleteAsync",InputAutocompleteAsync.__docgenInfo={description:"",displayName:"InputAutocompleteAsync",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Autocomplete/InputAutocompleteAsync.tsx#InputAutocompleteAsync"]={docgenInfo:InputAutocompleteAsync.__docgenInfo,name:"InputAutocompleteAsync",path:"src/components/Autocomplete/InputAutocompleteAsync.tsx#InputAutocompleteAsync"})}catch(__react_docgen_typescript_loader_error){}}}]);