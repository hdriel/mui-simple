{"version":3,"file":"4476.d8b61316.iframe.bundle.js","mappings":";AAQA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAMA;AAHA;AAOA;;AAUA;;;;;AAKA;AAMA;AAEA;;AAUA;;;;;AAKA;;AAOA;;ACnCA;;AAGA;;AAxBA;;;;;AAUA;;;;;AAMA;AAhCA;;;;;AAQA;;;;;AAMA;AAmCA;;AAkBA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAIA","sources":["webpack://@hdriel/mui-simple/./src/components/Divider/Divider.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Typography/Typography.styled.tsx"],"sourcesContent":["import { Divider as MuiDivider } from \"@mui/material\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport { numberToPx } from \"../../utils/helpers\";\r\n\r\nfunction getCustomBorderStyle({ color, thicknessValue, borderPosition }) {\r\n  const customColorStyle =\r\n    color &&\r\n    css`\r\n      ${borderPosition}-color: ${color};\r\n    `;\r\n\r\n  const thicknessStyle =\r\n    thicknessValue &&\r\n    css`\r\n      ${borderPosition}-width: ${thicknessValue};\r\n    `;\r\n\r\n  return css`\r\n    ${customColorStyle};\r\n    ${thicknessStyle};\r\n  `;\r\n}\r\n\r\nfunction getCustomColorStyle({ color }) {\r\n  if (!color) return css``;\r\n\r\n  return css`\r\n    color: ${color};\r\n  `;\r\n}\r\n\r\nfunction verticalStyle(props) {\r\n  if (props.orientation !== \"vertical\") return css``;\r\n\r\n  const { thickness, customColor: color } = props;\r\n\r\n  const thicknessValue =\r\n    (thickness !== undefined && numberToPx(thickness)) || \"thin\";\r\n\r\n  return css`\r\n    & .MuiDivider-wrapper {\r\n      ${getCustomColorStyle({ color })};     \r\n    }\r\n    \r\n    &::before,\r\n    &::after {\r\n      ${getCustomBorderStyle({\r\n        color,\r\n        thicknessValue,\r\n        borderPosition: \"border-left\",\r\n      })}   \r\n  `;\r\n}\r\n\r\nfunction horizontalStyle(props) {\r\n  if (props.orientation !== \"horizontal\") return css``;\r\n\r\n  const { thickness, customColor: color } = props;\r\n\r\n  const thicknessValue =\r\n    (thickness !== undefined && numberToPx(thickness)) || \"thin\";\r\n\r\n  return css`\r\n    & .MuiDivider-wrapper {\r\n      ${getCustomColorStyle({ color })};\r\n    }\r\n\r\n    &::before,\r\n    &::after {\r\n      ${getCustomBorderStyle({\r\n        color,\r\n        thicknessValue,\r\n        borderPosition: \"border-top\",\r\n      })}\r\n    }\r\n  `;\r\n}\r\n\r\nexport const Divider = styled(MuiDivider, {\r\n  shouldForwardProp: (propName) => ![\"customColor\"].includes(propName),\r\n})`\r\n  ${verticalStyle}\r\n  ${horizontalStyle}\r\n`;\r\n","import { Box, Typography as MuiTypography } from \"@mui/material\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport { numberToPx } from \"../../utils/helpers\";\r\n\r\nfunction ellipsisRow1(props) {\r\n  if (props.noWrap || props.rows !== 1) return css``;\r\n\r\n  return css`\r\n    text-overflow: ellipsis;\r\n    white-space: normal;\r\n    overflow: hidden;\r\n    display: -webkit-box !important;\r\n    -webkit-line-clamp: ${props.rows};\r\n    -webkit-box-orient: vertical;\r\n    & > * {\r\n      white-space: unset !important;\r\n    }\r\n  `;\r\n}\r\n\r\nfunction ellipsisRows(props) {\r\n  if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\r\n    return css``;\r\n  }\r\n\r\n  return css`\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: normal;\r\n    display: -webkit-box !important;\r\n    -webkit-line-clamp: ${props.rows};\r\n    -webkit-box-orient: vertical;\r\n    & > * {\r\n      white-space: unset !important;\r\n    }\r\n  `;\r\n}\r\n\r\nexport const Border = styled(Box, {\r\n  shouldForwardProp: (propName) => ![\"autoWidth\", \"noWrap\"].includes(propName),\r\n})`\r\n  width: ${(props) =>\r\n    numberToPx(props.width) ?? (props.autoWidth ? \"auto\" : \"100%\")};\r\n  display: flex;\r\n  border: ${(props) =>\r\n    props.border && typeof props.border === \"boolean\"\r\n      ? \"1px solid black\"\r\n      : props.border};\r\n\r\n  ${ellipsisRows}\r\n  ${ellipsisRow1}\r\n`;\r\n\r\nexport const Typography = styled(MuiTypography, {\r\n  shouldForwardProp: (propName) =>\r\n    ![\r\n      \"fontSize\",\r\n      \"customColor\",\r\n      \"bold\",\r\n      \"italic\",\r\n      \"underline\",\r\n      \"strike\",\r\n      \"charsCase\",\r\n      \"sup\",\r\n      \"sub\",\r\n      \"monospace\",\r\n      \"lineHeight\",\r\n      \"bgColor\",\r\n    ].includes(propName),\r\n})`\r\n  width: 100%;\r\n  color: ${(props) => props.customColor};\r\n  background-color: ${(props) => props.bgColor};\r\n  font-weight: ${(props) =>\r\n    props.bold && typeof props.bold === \"boolean\" ? \"bold\" : props.bold};\r\n\r\n  font-size: ${(props) => numberToPx(props.fontSize)};\r\n  font-style: ${(props) => (props.italic ? \"italic\" : undefined)};\r\n  text-decoration: ${(props) => (props.underline ? \"underline\" : undefined)};\r\n  text-decoration: ${(props) => (props.strike ? \"line-through\" : undefined)};\r\n  text-transform: ${(props) =>\r\n    ({ upper: \"uppercase\", lower: \"lowercase\", capital: \"capitalize\" }[\r\n      props.charsCase\r\n    ])};\r\n  vertical-align: ${(props) =>\r\n    props.sup ? \"super\" : props.sub ? \"sub\" : undefined};\r\n  line-height: ${(props) => props.lineHeight};\r\n  ${(props) =>\r\n    props.monospace\r\n      ? css`\r\n          font-family: monospace;\r\n        `\r\n      : undefined};\r\n  white-space: normal;\r\n\r\n  &:has(:not(:empty)) {\r\n    display: inherit;\r\n  }\r\n`;\r\n"],"names":[],"sourceRoot":""}