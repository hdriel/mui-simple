{"version":3,"file":"4476.6d9742a5.iframe.bundle.js","mappings":";AAQA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAMA;AAHA;AAOA;;AAUA;;;;;AAKA;AAMA;AAEA;;AAUA;;;;;AAKA;;AAOA;;ACnCA;;AAGA;;AAxBA;;;;;AAUA;;;;;AAMA;AAhCA;;;;;AAQA;;;;;AAMA;AAmCA;;AAkBA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAIA","sources":["webpack://@hdriel/mui-simple/./src/components/Divider/Divider.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Typography/Typography.styled.tsx"],"sourcesContent":["import { Divider as MuiDivider } from \"@mui/material\";\nimport { styled, css } from \"@mui/material/styles\";\nimport { numberToPx } from \"../../utils/helpers\";\n\nfunction getCustomBorderStyle({ color, thicknessValue, borderPosition }) {\n  const customColorStyle =\n    color &&\n    css`\n      ${borderPosition}-color: ${color};\n    `;\n\n  const thicknessStyle =\n    thicknessValue &&\n    css`\n      ${borderPosition}-width: ${thicknessValue};\n    `;\n\n  return css`\n    ${customColorStyle};\n    ${thicknessStyle};\n  `;\n}\n\nfunction getCustomColorStyle({ color }) {\n  if (!color) return css``;\n\n  return css`\n    color: ${color};\n  `;\n}\n\nfunction verticalStyle(props) {\n  if (props.orientation !== \"vertical\") return css``;\n\n  const { thickness, customColor: color } = props;\n\n  const thicknessValue =\n    (thickness !== undefined && numberToPx(thickness)) || \"thin\";\n\n  return css`\n    & .MuiDivider-wrapper {\n      ${getCustomColorStyle({ color })};     \n    }\n    \n    &::before,\n    &::after {\n      ${getCustomBorderStyle({\n        color,\n        thicknessValue,\n        borderPosition: \"border-left\",\n      })}   \n  `;\n}\n\nfunction horizontalStyle(props) {\n  if (props.orientation !== \"horizontal\") return css``;\n\n  const { thickness, customColor: color } = props;\n\n  const thicknessValue =\n    (thickness !== undefined && numberToPx(thickness)) || \"thin\";\n\n  return css`\n    & .MuiDivider-wrapper {\n      ${getCustomColorStyle({ color })};\n    }\n\n    &::before,\n    &::after {\n      ${getCustomBorderStyle({\n        color,\n        thicknessValue,\n        borderPosition: \"border-top\",\n      })}\n    }\n  `;\n}\n\nexport const Divider = styled(MuiDivider, {\n  shouldForwardProp: (propName) => ![\"customColor\"].includes(propName),\n})`\n  ${verticalStyle}\n  ${horizontalStyle}\n`;\n","import { Box, Typography as MuiTypography } from \"@mui/material\";\nimport { styled, css } from \"@mui/material/styles\";\nimport { numberToPx } from \"../../utils/helpers\";\n\nfunction ellipsisRow1(props) {\n  if (props.noWrap || props.rows !== 1) return css``;\n\n  return css`\n    text-overflow: ellipsis;\n    white-space: normal;\n    overflow: hidden;\n    display: -webkit-box !important;\n    -webkit-line-clamp: ${props.rows};\n    -webkit-box-orient: vertical;\n    & > * {\n      white-space: unset !important;\n    }\n  `;\n}\n\nfunction ellipsisRows(props) {\n  if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\n    return css``;\n  }\n\n  return css`\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: normal;\n    display: -webkit-box !important;\n    -webkit-line-clamp: ${props.rows};\n    -webkit-box-orient: vertical;\n    & > * {\n      white-space: unset !important;\n    }\n  `;\n}\n\nexport const Border = styled(Box, {\n  shouldForwardProp: (propName) => ![\"autoWidth\", \"noWrap\"].includes(propName),\n})`\n  width: ${(props) =>\n    numberToPx(props.width) ?? (props.autoWidth ? \"auto\" : \"100%\")};\n  display: flex;\n  border: ${(props) =>\n    props.border && typeof props.border === \"boolean\"\n      ? \"1px solid black\"\n      : props.border};\n\n  ${ellipsisRows}\n  ${ellipsisRow1}\n`;\n\nexport const Typography = styled(MuiTypography, {\n  shouldForwardProp: (propName) =>\n    ![\n      \"fontSize\",\n      \"customColor\",\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"charsCase\",\n      \"sup\",\n      \"sub\",\n      \"monospace\",\n      \"lineHeight\",\n      \"bgColor\",\n    ].includes(propName),\n})`\n  width: 100%;\n  color: ${(props) => props.customColor};\n  background-color: ${(props) => props.bgColor};\n  font-weight: ${(props) =>\n    props.bold && typeof props.bold === \"boolean\" ? \"bold\" : props.bold};\n\n  font-size: ${(props) => numberToPx(props.fontSize)};\n  font-style: ${(props) => (props.italic ? \"italic\" : undefined)};\n  text-decoration: ${(props) => (props.underline ? \"underline\" : undefined)};\n  text-decoration: ${(props) => (props.strike ? \"line-through\" : undefined)};\n  text-transform: ${(props) =>\n    ({ upper: \"uppercase\", lower: \"lowercase\", capital: \"capitalize\" }[\n      props.charsCase\n    ])};\n  vertical-align: ${(props) =>\n    props.sup ? \"super\" : props.sub ? \"sub\" : undefined};\n  line-height: ${(props) => props.lineHeight};\n  ${(props) =>\n    props.monospace\n      ? css`\n          font-family: monospace;\n        `\n      : undefined};\n  white-space: normal;\n\n  &:has(:not(:empty)) {\n    display: inherit;\n  }\n`;\n"],"names":[],"sourceRoot":""}