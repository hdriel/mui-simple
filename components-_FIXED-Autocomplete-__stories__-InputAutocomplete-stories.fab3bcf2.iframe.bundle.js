"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[2513],{"./src/components/_FIXED/Autocomplete/__stories__/InputAutocomplete.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,EndIcon:()=>EndIcon,FilmOptions:()=>FilmOptions,GroupBy:()=>GroupBy,IncludeInputInList:()=>IncludeInputInList,OptionsConverter:()=>OptionsConverter,OptionsObjectList:()=>OptionsObjectList,OptionsStringList:()=>OptionsStringList,OptionsWithDisabled:()=>OptionsWithDisabled,Placeholder:()=>Placeholder,RenderOption:()=>RenderOption,Sort:()=>Sort,StartCmpExternal:()=>StartCmpExternal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),_mui_material__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/_FIXED/Autocomplete/InputAutocomplete.tsx"),_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/_FIXED/Autocomplete/__stories__/InputAutocomplete.mocks.ts");const _excluded=["title"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==typeof i?i:String(i)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Box, Stack } from '@mui/material';\n\nimport InputAutocomplete from '../InputAutocomplete';\nimport { countries, timeSlots, top100Films, top100FilmsWithFirstLetters } from './InputAutocomplete.mocks';\n\nconst meta: Meta<typeof InputAutocomplete> = {\n    title: 'Inputs/Inputs/Autocomplete/InputAutocomplete',\n    component: InputAutocomplete,\n    tags: ['autodocs'],\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof InputAutocomplete>;\n\nexport const Default: Story = {\n    args: {},\n};\n\nconst OPTIONS = [\n    { title: 'The Shawshank Redemption', year: 1994, id: 0 },\n    { title: 'The Godfather', year: 1972, id: 1 },\n    { title: 'The Godfather: Part II', year: 1974, id: 2 },\n    { title: 'The Dark Knight', year: 2008, id: 3 },\n    { title: '12 Angry Men', year: 1957, id: 4 },\n    { title: \"Schindler's List\", year: 1993, id: 5 },\n    { title: 'Pulp Fiction', year: 1994, id: 6 },\n];\n\nconst render = (args) => {\n    const [selectedOption, setSelectedOption] = useState(args.value ?? null);\n\n    return <InputAutocomplete {...args} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} />;\n};\n\nexport const IncludeInputInList: Story = {\n    args: {\n        label: 'Movie',\n        includeInputInList: false,\n        options: OPTIONS.map(({ title, ...item }) => ({ ...item, label: title })),\n    },\n    render,\n};\n\nexport const OptionsStringList: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS.map((o) => o.title),\n        value: ['The Dark Knight'],\n    },\n    render,\n};\n\nexport const EndIcon: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS.map((o) => o.title),\n        value: ['The Dark Knight'],\n        endCmp: 'Person',\n        freeSolo: true,\n        padding: 0,\n    },\n    render,\n};\n\nexport const OptionsObjectList: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS,\n        getOptionLabel: 'title',\n    },\n    render,\n};\n\nexport const OptionsConverter: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS,\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const Placeholder: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS,\n        placeholder: 'choose you movie name',\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const StartCmpExternal: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS,\n        startCmpExternal: 'Tv',\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const Sort: Story = {\n    args: {\n        label: 'Movie',\n        options: OPTIONS,\n        sortBy: 'year',\n        sortDir: -1,\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const FilmOptions = () => {\n    const [selectedOption, setSelectedOption] = useState(null);\n\n    return (\n        <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map((variant) => (\n                <InputAutocomplete\n                    key={variant}\n                    // getOptionLabel={(option) => option.title}\n                    label=\"Movie\"\n                    optionConverter={(film) => ({ id: film.title, label: `${film.title} (${film.year})` })}\n                    options={top100Films}\n                    value={selectedOption}\n                    onChange={(e, option) => setSelectedOption(option)}\n                    variant={variant}\n                />\n            ))}\n        </Stack>\n    );\n};\n\nexport const RenderOption: Story = {\n    args: {\n        id: 'grouped-demo',\n        label: 'Choose a country',\n        options: countries,\n        autoHighlight: true,\n        getOptionLabel: (option) => option.label,\n        renderOption: (props, option) => (\n            <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                <img\n                    loading=\"lazy\"\n                    width=\"20\"\n                    src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n                    srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n                    alt=\"\"\n                />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n        ),\n    },\n    render,\n};\n\nexport const GroupBy: Story = {\n    args: {\n        id: 'grouped categories',\n        label: 'Categories',\n        options: top100FilmsWithFirstLetters,\n        groupBy: (option) => option.firstLetter,\n        sortBy: 'title',\n        getOptionLabel: (option) => option.title,\n        width: 400,\n    },\n    render,\n};\n\nexport const OptionsWithDisabled: Story = {\n    args: {\n        id: 'grouped-demo',\n        label: 'Disabled options',\n        options: timeSlots.slice(0).map((option, index) => ({ id: index, time: option, disabled: index % 4 === 0 })),\n        getOptionLabel: (option) => option.time,\n        width: 200,\n    },\n    render,\n};\n\n/*\n    openOnFocus: true,\n    readOnly: undefined,\n    selectOnFocus: false,\n    size: undefined,\n    variant: 'outlined',\n*/\n",locationsMap:{default:{startLoc:{col:30,line:18},endLoc:{col:1,line:20},startBody:{col:30,line:18},endBody:{col:1,line:20}},"include-input-in-list":{startLoc:{col:41,line:38},endLoc:{col:1,line:45},startBody:{col:41,line:38},endBody:{col:1,line:45}},"options-string-list":{startLoc:{col:40,line:47},endLoc:{col:1,line:54},startBody:{col:40,line:47},endBody:{col:1,line:54}},"end-icon":{startLoc:{col:30,line:56},endLoc:{col:1,line:66},startBody:{col:30,line:56},endBody:{col:1,line:66}},"options-object-list":{startLoc:{col:40,line:68},endLoc:{col:1,line:75},startBody:{col:40,line:68},endBody:{col:1,line:75}},"options-converter":{startLoc:{col:39,line:77},endLoc:{col:1,line:84},startBody:{col:39,line:77},endBody:{col:1,line:84}},placeholder:{startLoc:{col:34,line:86},endLoc:{col:1,line:94},startBody:{col:34,line:86},endBody:{col:1,line:94}},"start-cmp-external":{startLoc:{col:39,line:96},endLoc:{col:1,line:104},startBody:{col:39,line:96},endBody:{col:1,line:104}},sort:{startLoc:{col:27,line:106},endLoc:{col:1,line:115},startBody:{col:27,line:106},endBody:{col:1,line:115}},"film-options":{startLoc:{col:27,line:117},endLoc:{col:1,line:136},startBody:{col:27,line:117},endBody:{col:1,line:136}},"render-option":{startLoc:{col:35,line:138},endLoc:{col:1,line:159},startBody:{col:35,line:138},endBody:{col:1,line:159}},"group-by":{startLoc:{col:30,line:161},endLoc:{col:1,line:172},startBody:{col:30,line:161},endBody:{col:1,line:172}},"options-with-disabled":{startLoc:{col:42,line:174},endLoc:{col:1,line:183},startBody:{col:42,line:174},endBody:{col:1,line:183}}}}},title:"Inputs/Inputs/Autocomplete/InputAutocomplete",component:_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,tags:["autodocs"]},Default={args:{}},OPTIONS=[{title:"The Shawshank Redemption",year:1994,id:0},{title:"The Godfather",year:1972,id:1},{title:"The Godfather: Part II",year:1974,id:2},{title:"The Dark Knight",year:2008,id:3},{title:"12 Angry Men",year:1957,id:4},{title:"Schindler's List",year:1993,id:5},{title:"Pulp Fiction",year:1994,id:6}],render=args=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(args.value??null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{value:selectedOption,onChange:(e,option)=>setSelectedOption(option)}))};render.displayName="render";const IncludeInputInList={args:{label:"Movie",includeInputInList:!1,options:OPTIONS.map((_ref=>{let{title}=_ref;return _objectSpread(_objectSpread({},_objectWithoutProperties(_ref,_excluded)),{},{label:title})}))},render},OptionsStringList={args:{label:"Movie",options:OPTIONS.map((o=>o.title)),value:["The Dark Knight"]},render},EndIcon={args:{label:"Movie",options:OPTIONS.map((o=>o.title)),value:["The Dark Knight"],endCmp:"Person",freeSolo:!0,padding:0},render},OptionsObjectList={args:{label:"Movie",options:OPTIONS,getOptionLabel:"title"},render},OptionsConverter={args:{label:"Movie",options:OPTIONS,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},Placeholder={args:{label:"Movie",options:OPTIONS,placeholder:"choose you movie name",optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},StartCmpExternal={args:{label:"Movie",options:OPTIONS,startCmpExternal:"Tv",optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},Sort={args:{label:"Movie",options:OPTIONS,sortBy:"year",sortDir:-1,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},FilmOptions=()=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{spacing:4},["filled","standard","outlined"].map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,{key:variant,label:"Movie",optionConverter:film=>({id:film.title,label:`${film.title} (${film.year})`}),options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.gE,value:selectedOption,onChange:(e,option)=>setSelectedOption(option),variant}))))};FilmOptions.displayName="FilmOptions";const RenderOption={args:{id:"grouped-demo",label:"Choose a country",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.hW,autoHighlight:!0,getOptionLabel:option=>option.label,renderOption:(props,option)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Z,_extends({component:"li",sx:{"& > img":{mr:2,flexShrink:0}}},props),react__WEBPACK_IMPORTED_MODULE_0__.createElement("img",{loading:"lazy",width:"20",src:`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`,srcSet:`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`,alt:""}),option.label," (",option.code,") +",option.phone)},render},GroupBy={args:{id:"grouped categories",label:"Categories",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.K$,groupBy:option=>option.firstLetter,sortBy:"title",getOptionLabel:option=>option.title,width:400},render},OptionsWithDisabled={args:{id:"grouped-demo",label:"Disabled options",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.bp.slice(0).map(((option,index)=>({id:index,time:option,disabled:index%4==0}))),getOptionLabel:option=>option.time,width:200},render};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {}\n}",...Default.parameters?.docs?.source}}},IncludeInputInList.parameters={...IncludeInputInList.parameters,docs:{...IncludeInputInList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    options: OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n}",...IncludeInputInList.parameters?.docs?.source}}},OptionsStringList.parameters={...OptionsStringList.parameters,docs:{...OptionsStringList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS.map(o => o.title),\n    value: ['The Dark Knight']\n  },\n  render\n}",...OptionsStringList.parameters?.docs?.source}}},EndIcon.parameters={...EndIcon.parameters,docs:{...EndIcon.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS.map(o => o.title),\n    value: ['The Dark Knight'],\n    endCmp: 'Person',\n    freeSolo: true,\n    padding: 0\n  },\n  render\n}",...EndIcon.parameters?.docs?.source}}},OptionsObjectList.parameters={...OptionsObjectList.parameters,docs:{...OptionsObjectList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    getOptionLabel: 'title'\n  },\n  render\n}",...OptionsObjectList.parameters?.docs?.source}}},OptionsConverter.parameters={...OptionsConverter.parameters,docs:{...OptionsConverter.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...OptionsConverter.parameters?.docs?.source}}},Placeholder.parameters={...Placeholder.parameters,docs:{...Placeholder.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    placeholder: 'choose you movie name',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...Placeholder.parameters?.docs?.source}}},StartCmpExternal.parameters={...StartCmpExternal.parameters,docs:{...StartCmpExternal.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    startCmpExternal: 'Tv',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...StartCmpExternal.parameters?.docs?.source}}},Sort.parameters={...Sort.parameters,docs:{...Sort.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...Sort.parameters?.docs?.source}}},FilmOptions.parameters={...FilmOptions.parameters,docs:{...FilmOptions.parameters?.docs,source:{originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocomplete key={variant}\n    // getOptionLabel={(option) => option.title}\n    label=\"Movie\" optionConverter={film => ({\n      id: film.title,\n      label: `${film.title} (${film.year})`\n    })} options={top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} />)}\n        </Stack>;\n}",...FilmOptions.parameters?.docs?.source}}},RenderOption.parameters={...RenderOption.parameters,docs:{...RenderOption.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: \'grouped-demo\',\n    label: \'Choose a country\',\n    options: countries,\n    autoHighlight: true,\n    getOptionLabel: option => option.label,\n    renderOption: (props, option) => <Box component="li" sx={{\n      \'& > img\': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n}',...RenderOption.parameters?.docs?.source}}},GroupBy.parameters={...GroupBy.parameters,docs:{...GroupBy.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    options: top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sortBy: 'title',\n    getOptionLabel: option => option.title,\n    width: 400\n  },\n  render\n}",...GroupBy.parameters?.docs?.source}}},OptionsWithDisabled.parameters={...OptionsWithDisabled.parameters,docs:{...OptionsWithDisabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    options: timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n}",...OptionsWithDisabled.parameters?.docs?.source}}};const __namedExportsOrder=["Default","IncludeInputInList","OptionsStringList","EndIcon","OptionsObjectList","OptionsConverter","Placeholder","StartCmpExternal","Sort","FilmOptions","RenderOption","GroupBy","OptionsWithDisabled"]}}]);