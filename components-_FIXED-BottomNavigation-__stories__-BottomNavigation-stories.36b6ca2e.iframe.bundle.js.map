{"version":3,"file":"components-_FIXED-BottomNavigation-__stories__-BottomNavigation-stories.36b6ca2e.iframe.bundle.js","mappings":";;AAqDA;AAGA;ACTA;;AAEA;;AAEA;;AAEA;;;;;;AA9CA;;;;;;;;;;AAaA;AACA;AACA;;;AAdA;ACRA;;;;;;ACWA","sources":["webpack://mui-simple/./src/components/_FIXED/BottomNavigation/BottomNavigation.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Paper/Paper.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Paper/Paper.tsx","webpack://mui-simple/./src/components/_FIXED/SVGIcon/SVGIcon.styled.tsx"],"sourcesContent":["import React from 'react';\nimport type { ComponentType, PropsWithChildren } from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    BottomNavigation as MuiBottomNavigation,\n    BottomNavigationAction as MuiBottomNavigationAction,\n} from '@mui/material';\nimport type { BottomNavigationProps } from '@mui/material';\n\nimport Paper from '../Paper/Paper';\n\ninterface BottomNavigationStyledProps {\n    fixedToBottom?: boolean;\n    customColor?: string;\n    elevation?: number;\n    fixedToTop?: boolean;\n    width?: number | string;\n    position?: 'absolute' | 'fixed';\n}\n\ntype BottomNavigationStyledPropsType = BottomNavigationProps & BottomNavigationStyledProps & any;\n\nexport const BottomNavigation = styled(\n    ({\n        width,\n        elevation,\n        fixedToTop,\n        fixedToBottom,\n        position,\n        ...props\n    }: PropsWithChildren<BottomNavigationStyledProps>) => (\n        <Paper\n            sx={{\n                width,\n                ...((fixedToTop || fixedToBottom) && {\n                    position: position ?? 'fixed',\n                    left: 0,\n                    right: 0,\n                    top: fixedToTop ? 0 : undefined,\n                    bottom: fixedToBottom ? 0 : undefined,\n                    zIndex: 2,\n                }),\n            }}\n            elevation={elevation}\n        >\n            <MuiBottomNavigation {...props} />\n        </Paper>\n    ),\n    {\n        shouldForwardProp: (propName: string) => !['customColor'].includes(propName as string),\n    }\n)<BottomNavigationStyledPropsType>`\n    & .MuiBottomNavigationAction-root.Mui-selected {\n        color: ${(props: any) => props.customColor}\n` as ComponentType<BottomNavigationStyledPropsType>;\n\nexport const BottomNavigationAction: any = MuiBottomNavigationAction;\n","import { get } from 'lodash-es';\nimport { Paper as MuiPaper } from '@mui/material';\nimport { styled, css } from '@mui/material/styles';\nimport { numberToPx } from '../../../utils/helpers';\nimport type { ComponentType } from 'react';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nfunction imageStyle(props): SerializedStyles {\n    if (!props.imageSrc) return css``;\n\n    return css`\n        background-color: unset;\n\n        &::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-image: url('${props.imageSrc}');\n            background-size: ${props.imageLayout};\n            opacity: ${props.imageOpacity};\n            z-index: -1;\n        }\n    `;\n}\n\ninterface PaperStylesProps {\n    width: string | number;\n    height: string | number;\n    muiColor: string;\n    square: boolean;\n    variant: string;\n    customColor: string;\n    textColor: string;\n    imageSrc: string;\n    imageOpacity: number;\n    elevation: number;\n    imageLayout: string;\n}\nexport const Paper = styled(MuiPaper, {\n    shouldForwardProp: (propName: string) =>\n        !['muiColor', 'customColor', 'textColor', 'imageSrc', 'imageOpacity', 'imageLayout'].includes(\n            propName as string\n        ),\n})<PaperStylesProps>`\n    width: ${(props: any) => numberToPx(props.width)};\n\n    height: ${(props: any) => numberToPx(props.height)};\n\n    background-color: ${(props: any) => props.customColor};\n\n    color: ${(props: any) => props.textColor ?? get(props, `theme.palette.${props.muiColor}.contrastText`)};\n\n    position: relative;\n\n    z-index: 0;\n\n    ${imageStyle};\n` as ComponentType<PaperStylesProps>;\n","const _excluded = [\"color\", \"elevation\", \"height\", \"imageLayout\", \"imageOpacity\", \"imageSrc\", \"square\", \"textColor\", \"variant\", \"width\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport React from 'react';\nimport { Paper as MuiPaper } from './Paper.styled';\nimport { useCustomColor } from '../../../utils/helpers';\nconst Paper = _ref => {\n  let {\n      color,\n      elevation,\n      height,\n      imageLayout = 'cover',\n      imageOpacity = 1,\n      imageSrc,\n      square,\n      textColor: _textColor,\n      variant,\n      width\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const [customColor, muiColor] = useCustomColor(color);\n  const [textColor] = useCustomColor(_textColor);\n  return /*#__PURE__*/React.createElement(MuiPaper, _extends({\n    customColor: customColor,\n    elevation: variant !== 'outlined' ? elevation : undefined,\n    height: height,\n    imageLayout: imageLayout,\n    imageOpacity: imageOpacity,\n    imageSrc: imageSrc,\n    muiColor: muiColor,\n    square: square,\n    textColor: textColor,\n    variant: variant,\n    width: width\n  }, props));\n};\nPaper.displayName = \"Paper\";\nPaper.displayName = 'Paper';\nexport default Paper;","import { styled } from '@mui/material/styles';\nimport InlineSVG from 'react-inlinesvg';\n\nexport const SVG = styled(InlineSVG, {\n    shouldForwardProp: (propName: string) => !['color'].includes(propName as string),\n})`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n        ${(props: any) => ({ ...props })}\n    }\n`;\n"],"names":[],"sourceRoot":""}