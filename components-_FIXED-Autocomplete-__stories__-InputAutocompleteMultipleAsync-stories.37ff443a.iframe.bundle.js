"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[2057],{"./src/components/_FIXED/Autocomplete/__stories__/InputAutocompleteMultipleAsync.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,FilmOptions:()=>FilmOptions,GroupBy:()=>GroupBy,GroupByCategories:()=>GroupByCategories,IncludeInputInList:()=>IncludeInputInList,Keys:()=>Keys,OptionsConverter:()=>OptionsConverter,OptionsObjectList:()=>OptionsObjectList,OptionsStringList:()=>OptionsStringList,OptionsWithDisabled:()=>OptionsWithDisabled,Placeholder:()=>Placeholder,RenderOption:()=>RenderOption,Sort:()=>Sort,StartCmpExternal:()=>StartCmpExternal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>InputAutocompleteMultipleAsync_stories});var react=__webpack_require__("./node_modules/react/index.js"),Stack=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),InputAutocompleteMultiple=__webpack_require__("./src/components/_FIXED/Autocomplete/InputAutocompleteMultiple.tsx"),useAutoCompleteAsync=__webpack_require__("./src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx"),_excluded=["getOptionsPromise","sleep","getOptionsCallback","fetchOptionsOnFocus","LOADING_LABEL"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var InputAutocompleteMultipleAsync=function(_ref){var getOptionsPromise=_ref.getOptionsPromise,sleep=_ref.sleep,getOptionsCallback=_ref.getOptionsCallback,fetchOptionsOnFocus=_ref.fetchOptionsOnFocus,LOADING_LABEL=_ref.LOADING_LABEL,props=_objectWithoutProperties(_ref,_excluded),asyncProps=(0,useAutoCompleteAsync.m)({LOADING_LABEL,getOptionsPromise,sleep,getOptionsCallback,fetchOptionsOnFocus});return react.createElement(InputAutocompleteMultiple.Z,_extends({},props,asyncProps))};InputAutocompleteMultipleAsync.displayName="InputAutocompleteMultipleAsync",InputAutocompleteMultipleAsync.defaultProps={getOptionLabel:void 0,getOptionsPromise:void 0,sleep:0,fetchOptionsOnFocus:void 0,LOADING_LABEL:void 0};const Autocomplete_InputAutocompleteMultipleAsync=InputAutocompleteMultipleAsync;try{InputAutocompleteMultipleAsync.displayName="InputAutocompleteMultipleAsync",InputAutocompleteMultipleAsync.__docgenInfo={description:"",displayName:"InputAutocompleteMultipleAsync",props:{autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"boolean"}},autoHighlight:{defaultValue:null,description:"",name:"autoHighlight",required:!1,type:{name:"boolean"}},blurOnSelect:{defaultValue:null,description:"",name:"blurOnSelect",required:!1,type:{name:"boolean"}},chipProps:{defaultValue:null,description:"",name:"chipProps",required:!1,type:{name:"ChipProps | ((props: any) => ChipProps)"}},clearOnBlur:{defaultValue:null,description:"",name:"clearOnBlur",required:!1,type:{name:"boolean"}},clearOnPressEscape:{defaultValue:null,description:"",name:"clearOnPressEscape",required:!1,type:{name:"boolean"}},creationAllowed:{defaultValue:null,description:"",name:"creationAllowed",required:!1,type:{name:"boolean"}},CREATION_PREFIX_LABEL:{defaultValue:null,description:"",name:"CREATION_PREFIX_LABEL",required:!1,type:{name:"string"}},NO_OPTIONS_LABEL:{defaultValue:null,description:"",name:"NO_OPTIONS_LABEL",required:!1,type:{name:"string"}},disableClearableSolo:{defaultValue:null,description:"",name:"disableClearableSolo",required:!1,type:{name:"boolean"}},disableCloseOnSelect:{defaultValue:null,description:"",name:"disableCloseOnSelect",required:!1,type:{name:"boolean"}},disableListWrap:{defaultValue:null,description:"",name:"disableListWrap",required:!1,type:{name:"boolean"}},disablePortal:{defaultValue:null,description:"",name:"disablePortal",required:!1,type:{name:"boolean"}},fieldId:{defaultValue:null,description:"",name:"fieldId",required:!1,type:{name:"string"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((...args: any) => ReactNode) | { ignoreAccents?: boolean; ignoreCase?: boolean; limitResultOptions?: number; matchFrom?: string; stringify?: string | (() => void); trim?: boolean; }"}},filterSelectedOptions:{defaultValue:null,description:"",name:"filterSelectedOptions",required:!1,type:{name:"boolean"}},freeSolo:{defaultValue:null,description:"",name:"freeSolo",required:!1,type:{name:"boolean"}},getOptionLabel:{defaultValue:{value:"undefined"},description:"",name:"getOptionLabel",required:!1,type:{name:"string | ((option: any) => string)"}},groupBy:{defaultValue:null,description:"",name:"groupBy",required:!1,type:{name:"string | ((option: any) => any)"}},handleHomeEndKeys:{defaultValue:null,description:"",name:"handleHomeEndKeys",required:!1,type:{name:"boolean"}},hideStartActionsOnEmpty:{defaultValue:null,description:"",name:"hideStartActionsOnEmpty",required:!1,type:{name:"boolean"}},highlightField:{defaultValue:null,description:"",name:"highlightField",required:!1,type:{name:"string"}},highlightSearchResults:{defaultValue:null,description:"",name:"highlightSearchResults",required:!1,type:{name:"boolean"}},includeInputInList:{defaultValue:null,description:"",name:"includeInputInList",required:!1,type:{name:"boolean"}},multiple:{defaultValue:null,description:"",name:"multiple",required:!1,type:{name:"boolean"}},openOnFocus:{defaultValue:null,description:"",name:"openOnFocus",required:!1,type:{name:"boolean"}},optionConverter:{defaultValue:null,description:"",name:"optionConverter",required:!1,type:{name:"(item: any, index: number) => { [key: string]: any; label: ReactNode; id: string | number; }"}},raiseSelectedToTop:{defaultValue:null,description:"",name:"raiseSelectedToTop",required:!1,type:{name:"boolean"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"(props: object, option: any, { selected }: { selected: boolean; }) => ReactNode | ReactElement<any, string | JSXElementConstructor<any>>"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"any"}},selectOnFocus:{defaultValue:null,description:"",name:"selectOnFocus",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"((event: any, optionId: string | number, action?: string) => void) & ((event: any, optionIds: (string | number)[]) => void)"}},sortBy:{defaultValue:null,description:"",name:"sortBy",required:!1,type:{name:"string | (() => void)"}},sortDir:{defaultValue:null,description:"",name:"sortDir",required:!1,type:{name:"number | boolean"}},getOptionsPromise:{defaultValue:{value:"undefined"},description:"",name:"getOptionsPromise",required:!1,type:{name:"() => void"}},sleep:{defaultValue:{value:"0"},description:"",name:"sleep",required:!1,type:{name:"number"}},fetchOptionsOnFocus:{defaultValue:{value:"undefined"},description:"",name:"fetchOptionsOnFocus",required:!1,type:{name:"boolean"}},LOADING_LABEL:{defaultValue:{value:"undefined"},description:"",name:"LOADING_LABEL",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Autocomplete/InputAutocompleteMultipleAsync.tsx#InputAutocompleteMultipleAsync"]={docgenInfo:InputAutocompleteMultipleAsync.__docgenInfo,name:"InputAutocompleteMultipleAsync",path:"src/components/_FIXED/Autocomplete/InputAutocompleteMultipleAsync.tsx#InputAutocompleteMultipleAsync"})}catch(__react_docgen_typescript_loader_error){}var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,InputAutocomplete_mocks=__webpack_require__("./src/components/_FIXED/Autocomplete/__stories__/InputAutocomplete.mocks.ts"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;g&&(g=0,op[0]&&(_=0)),_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},InputAutocompleteMultipleAsync_stories_excluded=["title"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function InputAutocompleteMultipleAsync_stories_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function InputAutocompleteMultipleAsync_stories_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function InputAutocompleteMultipleAsync_stories_extends(){return InputAutocompleteMultipleAsync_stories_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},InputAutocompleteMultipleAsync_stories_extends.apply(this,arguments)}const InputAutocompleteMultipleAsync_stories={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Box, Stack } from '@mui/material';\nimport InputAutocompleteMultipleAsync from '../InputAutocompleteMultipleAsync';\nimport { countries, timeSlots, top100Films, top100FilmsWithFirstLetters } from './InputAutocomplete.mocks';\nconst meta: Meta<typeof InputAutocompleteMultipleAsync> = {\n  title: 'Inputs/Inputs/Autocomplete/InputAutocompleteMultipleAsync',\n  component: InputAutocompleteMultipleAsync,\n  tags: ['autodocs']\n};\nexport default meta;\ntype Story = StoryObj<typeof InputAutocompleteMultipleAsync>;\nexport const Default: Story = {\n  args: {}\n};\nconst OPTIONS = [{\n  title: 'The Shawshank Redemption',\n  year: 1994,\n  id: 0\n}, {\n  title: 'The Godfather',\n  year: 1972,\n  id: 1\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974,\n  id: 2\n}, {\n  title: 'The Dark Knight',\n  year: 2008,\n  id: 3\n}, {\n  title: '12 Angry Men',\n  year: 1957,\n  id: 4\n}, {\n  title: \"Schindler's List\",\n  year: 1993,\n  id: 5\n}, {\n  title: 'Pulp Fiction',\n  year: 1994,\n  id: 6\n}];\nconst render = args => {\n  const [selectedOption, setSelectedOption] = useState(args.value ?? []);\n  return <InputAutocompleteMultipleAsync {...args} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} />;\n};\nexport const IncludeInputInList: Story = {\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    sleep: 1e3,\n    getOptionsPromise: async () => OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n};\nexport const OptionsStringList: Story = {\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS.map(o => o.title),\n    sleep: 1e3,\n    value: ['The Dark Knight']\n  },\n  render\n};\nexport const OptionsObjectList: Story = {\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sleep: 1e3,\n    getOptionLabel: 'title'\n  },\n  render\n};\nexport const OptionsConverter: Story = {\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const Placeholder: Story = {\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    placeholder: 'choose you movie name',\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const StartCmpExternal: Story = {\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    startCmpExternal: 'Tv',\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const Sort: Story = {\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const FilmOptions = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocompleteMultipleAsync key={variant} label=\"Movie\" autoHighlight optionConverter={(film, index) => ({\n      id: index,\n      label: `${film.title} (${film.year})`\n    })} getOptionsPromise={async () => top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} sleep={1e3} />)}\n        </Stack>;\n};\nexport const RenderOption: Story = {\n  args: {\n    id: 'grouped-demo',\n    label: 'Choose a country',\n    getOptionsPromise: async () => countries,\n    autoHighlight: true,\n    renderOption: (props, option) => <Box component=\"li\" sx={{\n      '& > img': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading=\"lazy\" width=\"20\" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt=\"\" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n};\nexport const GroupBy: Story = {\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sleep: 1e3,\n    sortBy: 'title',\n    getOptionLabel: 'title',\n    width: 400\n  },\n  render\n};\nexport const OptionsWithDisabled: Story = {\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    fetchOptionsOnFocus: true,\n    sleep: 1e3,\n    getOptionsPromise: async () => timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n};\n\n/*\n    openOnFocus: true,\n    readOnly: undefined,\n    selectOnFocus: false,\n    size: undefined,\n    variant: 'outlined',\n*/\n\nexport const Keys = () => {\n  const [selectedOption, setSelectedOption] = useState([]);\n  return <InputAutocompleteMultipleAsync id=\"grouped-demo\" label=\"Keys\" value={selectedOption} onChange={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => [{\n    key: '37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4',\n    Key: 'videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4'\n  }, {\n    key: 'ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4',\n    Key: 'videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4'\n  }]} getOptionLabel=\"key\" fieldId=\"Key\" />;\n};\nexport const GroupByCategories: Story = {\n  args: {\n    id: 'grouped-demo',\n    label: 'With categories',\n    fetchOptionsOnFocus: true,\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sortBy: 'title',\n    getOptionLabel: option => option.title,\n    width: 400\n  },\n  render\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {}\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nIncludeInputInList.parameters = {\n  ...IncludeInputInList.parameters,\n  docs: {\n    ...IncludeInputInList.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    includeInputInList: false,\\n    sleep: 1e3,\\n    getOptionsPromise: async () => OPTIONS.map(({\\n      title,\\n      ...item\\n    }) => ({\\n      ...item,\\n      label: title\\n    }))\\n  },\\n  render\\n}\",\n      ...IncludeInputInList.parameters?.docs?.source\n    }\n  }\n};\nOptionsStringList.parameters = {\n  ...OptionsStringList.parameters,\n  docs: {\n    ...OptionsStringList.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    getOptionsPromise: async () => OPTIONS.map(o => o.title),\\n    sleep: 1e3,\\n    value: ['The Dark Knight']\\n  },\\n  render\\n}\",\n      ...OptionsStringList.parameters?.docs?.source\n    }\n  }\n};\nOptionsObjectList.parameters = {\n  ...OptionsObjectList.parameters,\n  docs: {\n    ...OptionsObjectList.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    getOptionsPromise: async () => OPTIONS,\\n    sleep: 1e3,\\n    getOptionLabel: 'title'\\n  },\\n  render\\n}\",\n      ...OptionsObjectList.parameters?.docs?.source\n    }\n  }\n};\nOptionsConverter.parameters = {\n  ...OptionsConverter.parameters,\n  docs: {\n    ...OptionsConverter.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    getOptionsPromise: async () => OPTIONS,\\n    sleep: 1e3,\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...OptionsConverter.parameters?.docs?.source\n    }\n  }\n};\nPlaceholder.parameters = {\n  ...Placeholder.parameters,\n  docs: {\n    ...Placeholder.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    getOptionsPromise: async () => OPTIONS,\\n    placeholder: 'choose you movie name',\\n    sleep: 1e3,\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...Placeholder.parameters?.docs?.source\n    }\n  }\n};\nStartCmpExternal.parameters = {\n  ...StartCmpExternal.parameters,\n  docs: {\n    ...StartCmpExternal.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    getOptionsPromise: async () => OPTIONS,\\n    startCmpExternal: 'Tv',\\n    sleep: 1e3,\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...StartCmpExternal.parameters?.docs?.source\n    }\n  }\n};\nSort.parameters = {\n  ...Sort.parameters,\n  docs: {\n    ...Sort.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    getOptionsPromise: async () => OPTIONS,\\n    sortBy: 'year',\\n    sortDir: -1,\\n    sleep: 1e3,\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...Sort.parameters?.docs?.source\n    }\n  }\n};\nFilmOptions.parameters = {\n  ...FilmOptions.parameters,\n  docs: {\n    ...FilmOptions.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const [selectedOption, setSelectedOption] = useState(null);\\n  return <Stack spacing={4}>\\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocompleteMultipleAsync key={variant} label=\\\"Movie\\\" autoHighlight optionConverter={(film, index) => ({\\n      id: index,\\n      label: `${film.title} (${film.year})`\\n    })} getOptionsPromise={async () => top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} sleep={1e3} />)}\\n        </Stack>;\\n}\",\n      ...FilmOptions.parameters?.docs?.source\n    }\n  }\n};\nRenderOption.parameters = {\n  ...RenderOption.parameters,\n  docs: {\n    ...RenderOption.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped-demo',\\n    label: 'Choose a country',\\n    getOptionsPromise: async () => countries,\\n    autoHighlight: true,\\n    renderOption: (props, option) => <Box component=\\\"li\\\" sx={{\\n      '& > img': {\\n        mr: 2,\\n        flexShrink: 0\\n      }\\n    }} {...props}>\\n                <img loading=\\\"lazy\\\" width=\\\"20\\\" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt=\\\"\\\" />\\n                {option.label} ({option.code}) +{option.phone}\\n            </Box>\\n  },\\n  render\\n}\",\n      ...RenderOption.parameters?.docs?.source\n    }\n  }\n};\nGroupBy.parameters = {\n  ...GroupBy.parameters,\n  docs: {\n    ...GroupBy.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped categories',\\n    label: 'Categories',\\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\\n    groupBy: option => option.firstLetter,\\n    sleep: 1e3,\\n    sortBy: 'title',\\n    getOptionLabel: 'title',\\n    width: 400\\n  },\\n  render\\n}\",\n      ...GroupBy.parameters?.docs?.source\n    }\n  }\n};\nOptionsWithDisabled.parameters = {\n  ...OptionsWithDisabled.parameters,\n  docs: {\n    ...OptionsWithDisabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped-demo',\\n    label: 'Disabled options',\\n    fetchOptionsOnFocus: true,\\n    sleep: 1e3,\\n    getOptionsPromise: async () => timeSlots.slice(0).map((option, index) => ({\\n      id: index,\\n      time: option,\\n      disabled: index % 4 === 0\\n    })),\\n    getOptionLabel: option => option.time,\\n    width: 200\\n  },\\n  render\\n}\",\n      ...OptionsWithDisabled.parameters?.docs?.source\n    }\n  }\n};\nKeys.parameters = {\n  ...Keys.parameters,\n  docs: {\n    ...Keys.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const [selectedOption, setSelectedOption] = useState([]);\\n  return <InputAutocompleteMultipleAsync id=\\\"grouped-demo\\\" label=\\\"Keys\\\" value={selectedOption} onChange={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => [{\\n    key: '37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4',\\n    Key: 'videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4'\\n  }, {\\n    key: 'ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4',\\n    Key: 'videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4'\\n  }]} getOptionLabel=\\\"key\\\" fieldId=\\\"Key\\\" />;\\n}\",\n      ...Keys.parameters?.docs?.source\n    }\n  }\n};\nGroupByCategories.parameters = {\n  ...GroupByCategories.parameters,\n  docs: {\n    ...GroupByCategories.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped-demo',\\n    label: 'With categories',\\n    fetchOptionsOnFocus: true,\\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\\n    groupBy: option => option.firstLetter,\\n    sortBy: 'title',\\n    getOptionLabel: option => option.title,\\n    width: 400\\n  },\\n  render\\n}\",\n      ...GroupByCategories.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{default:{startLoc:{col:30,line:13},endLoc:{col:1,line:15},startBody:{col:30,line:13},endBody:{col:1,line:15}},"include-input-in-list":{startLoc:{col:41,line:49},endLoc:{col:1,line:63},startBody:{col:41,line:49},endBody:{col:1,line:63}},"options-string-list":{startLoc:{col:40,line:64},endLoc:{col:1,line:72},startBody:{col:40,line:64},endBody:{col:1,line:72}},"options-object-list":{startLoc:{col:40,line:73},endLoc:{col:1,line:81},startBody:{col:40,line:73},endBody:{col:1,line:81}},"options-converter":{startLoc:{col:39,line:82},endLoc:{col:1,line:94},startBody:{col:39,line:82},endBody:{col:1,line:94}},placeholder:{startLoc:{col:34,line:95},endLoc:{col:1,line:108},startBody:{col:34,line:95},endBody:{col:1,line:108}},"start-cmp-external":{startLoc:{col:39,line:109},endLoc:{col:1,line:122},startBody:{col:39,line:109},endBody:{col:1,line:122}},sort:{startLoc:{col:27,line:123},endLoc:{col:1,line:137},startBody:{col:27,line:123},endBody:{col:1,line:137}},"film-options":{startLoc:{col:27,line:138},endLoc:{col:1,line:146},startBody:{col:27,line:138},endBody:{col:1,line:146}},"render-option":{startLoc:{col:35,line:147},endLoc:{col:1,line:164},startBody:{col:35,line:147},endBody:{col:1,line:164}},"group-by":{startLoc:{col:30,line:165},endLoc:{col:1,line:177},startBody:{col:30,line:165},endBody:{col:1,line:177}},"options-with-disabled":{startLoc:{col:42,line:178},endLoc:{col:1,line:193},startBody:{col:42,line:178},endBody:{col:1,line:193}},keys:{startLoc:{col:20,line:203},endLoc:{col:1,line:212},startBody:{col:20,line:203},endBody:{col:1,line:212}},"group-by-categories":{startLoc:{col:40,line:213},endLoc:{col:1,line:225},startBody:{col:40,line:213},endBody:{col:1,line:225}}}}},title:"Inputs/Inputs/Autocomplete/InputAutocompleteMultipleAsync",component:Autocomplete_InputAutocompleteMultipleAsync,tags:["autodocs"]};var Default={args:{}},OPTIONS=[{title:"The Shawshank Redemption",year:1994,id:0},{title:"The Godfather",year:1972,id:1},{title:"The Godfather: Part II",year:1974,id:2},{title:"The Dark Knight",year:2008,id:3},{title:"12 Angry Men",year:1957,id:4},{title:"Schindler's List",year:1993,id:5},{title:"Pulp Fiction",year:1994,id:6}],render=function(args){var _a,_b=(0,react.useState)(null!==(_a=args.value)&&void 0!==_a?_a:[]),selectedOption=_b[0],setSelectedOption=_b[1];return react.createElement(Autocomplete_InputAutocompleteMultipleAsync,InputAutocompleteMultipleAsync_stories_extends({},args,{value:selectedOption,onChange:function(e,option){return setSelectedOption(option)}}))};render.displayName="render";var IncludeInputInList={args:{label:"Movie",includeInputInList:!1,sleep:1e3,getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS.map((function(_ref){var title=_ref.title;return _objectSpread(_objectSpread({},InputAutocompleteMultipleAsync_stories_objectWithoutProperties(_ref,InputAutocompleteMultipleAsync_stories_excluded)),{},{label:title})}))]}))}))}},render},OptionsStringList={args:{label:"Movie",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS.map((function(o){return o.title}))]}))}))},sleep:1e3,value:["The Dark Knight"]},render},OptionsObjectList={args:{label:"Movie",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS]}))}))},sleep:1e3,getOptionLabel:"title"},render},OptionsConverter={args:{label:"Movie",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS]}))}))},sleep:1e3,optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},Placeholder={args:{label:"Movie",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS]}))}))},placeholder:"choose you movie name",sleep:1e3,optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},StartCmpExternal={args:{label:"Movie",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS]}))}))},startCmpExternal:"Tv",sleep:1e3,optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},Sort={args:{label:"Movie",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,OPTIONS]}))}))},sortBy:"year",sortDir:-1,sleep:1e3,optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},FilmOptions=function(){var _a=(0,react.useState)(null),selectedOption=_a[0],setSelectedOption=_a[1];return react.createElement(Stack.Z,{spacing:4},["filled","standard","outlined"].map((function(variant){return react.createElement(Autocomplete_InputAutocompleteMultipleAsync,{key:variant,label:"Movie",autoHighlight:!0,optionConverter:function(film,index){return{id:index,label:"".concat(film.title," (").concat(film.year,")")}},getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,InputAutocomplete_mocks.gE]}))}))},value:selectedOption,onChange:function(e,option){return setSelectedOption(option)},variant,sleep:1e3})})))};FilmOptions.displayName="FilmOptions";var RenderOption={args:{id:"grouped-demo",label:"Choose a country",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,InputAutocomplete_mocks.hW]}))}))},autoHighlight:!0,renderOption:function(props,option){return react.createElement(Box.Z,InputAutocompleteMultipleAsync_stories_extends({component:"li",sx:{"& > img":{mr:2,flexShrink:0}}},props),react.createElement("img",{loading:"lazy",width:"20",src:"https://flagcdn.com/w20/".concat(option.code.toLowerCase(),".png"),srcSet:"https://flagcdn.com/w40/".concat(option.code.toLowerCase(),".png 2x"),alt:""}),option.label," (",option.code,") +",option.phone)}},render},GroupBy={args:{id:"grouped categories",label:"Categories",getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,InputAutocomplete_mocks.K$]}))}))},groupBy:function(option){return option.firstLetter},sleep:1e3,sortBy:"title",getOptionLabel:"title",width:400},render},OptionsWithDisabled={args:{id:"grouped-demo",label:"Disabled options",fetchOptionsOnFocus:!0,sleep:1e3,getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,InputAutocomplete_mocks.bp.slice(0).map((function(option,index){return{id:index,time:option,disabled:index%4==0}}))]}))}))},getOptionLabel:function(option){return option.time},width:200},render},Keys=function(){var _a=(0,react.useState)([]),selectedOption=_a[0],setSelectedOption=_a[1];return react.createElement(Autocomplete_InputAutocompleteMultipleAsync,{id:"grouped-demo",label:"Keys",value:selectedOption,onChange:function(e,option){return setSelectedOption(option)},fetchOptionsOnFocus:!0,getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,[{key:"37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4",Key:"videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4"},{key:"ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4",Key:"videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4"}]]}))}))},getOptionLabel:"key",fieldId:"Key"})};Keys.displayName="Keys";var GroupByCategories={args:{id:"grouped-demo",label:"With categories",fetchOptionsOnFocus:!0,getOptionsPromise:function(){return __awaiter(void 0,void 0,void 0,(function(){return __generator(this,(function(_a){return[2,InputAutocomplete_mocks.K$]}))}))},groupBy:function(option){return option.firstLetter},sortBy:"title",getOptionLabel:function(option){return option.title},width:400},render};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{},{source:_objectSpread({originalSource:"{\n  args: {}\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),IncludeInputInList.parameters=_objectSpread(_objectSpread({},IncludeInputInList.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_d=IncludeInputInList.parameters)||void 0===_d?void 0:_d.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    sleep: 1e3,\n    getOptionsPromise: async () => OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n}"},null===(_f=null===(_e=IncludeInputInList.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),OptionsStringList.parameters=_objectSpread(_objectSpread({},OptionsStringList.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_g=OptionsStringList.parameters)||void 0===_g?void 0:_g.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS.map(o => o.title),\n    sleep: 1e3,\n    value: ['The Dark Knight']\n  },\n  render\n}"},null===(_j=null===(_h=OptionsStringList.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),OptionsObjectList.parameters=_objectSpread(_objectSpread({},OptionsObjectList.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_k=OptionsObjectList.parameters)||void 0===_k?void 0:_k.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sleep: 1e3,\n    getOptionLabel: 'title'\n  },\n  render\n}"},null===(_m=null===(_l=OptionsObjectList.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),OptionsConverter.parameters=_objectSpread(_objectSpread({},OptionsConverter.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_o=OptionsConverter.parameters)||void 0===_o?void 0:_o.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_q=null===(_p=OptionsConverter.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),Placeholder.parameters=_objectSpread(_objectSpread({},Placeholder.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_r=Placeholder.parameters)||void 0===_r?void 0:_r.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    placeholder: 'choose you movie name',\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_t=null===(_s=Placeholder.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),StartCmpExternal.parameters=_objectSpread(_objectSpread({},StartCmpExternal.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_u=StartCmpExternal.parameters)||void 0===_u?void 0:_u.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    startCmpExternal: 'Tv',\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_w=null===(_v=StartCmpExternal.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})}),Sort.parameters=_objectSpread(_objectSpread({},Sort.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_x=Sort.parameters)||void 0===_x?void 0:_x.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_z=null===(_y=Sort.parameters)||void 0===_y?void 0:_y.docs)||void 0===_z?void 0:_z.source)})}),FilmOptions.parameters=_objectSpread(_objectSpread({},FilmOptions.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_0=FilmOptions.parameters)||void 0===_0?void 0:_0.docs),{},{source:_objectSpread({originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocompleteMultipleAsync key={variant} label=\"Movie\" autoHighlight optionConverter={(film, index) => ({\n      id: index,\n      label: `${film.title} (${film.year})`\n    })} getOptionsPromise={async () => top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} sleep={1e3} />)}\n        </Stack>;\n}"},null===(_2=null===(_1=FilmOptions.parameters)||void 0===_1?void 0:_1.docs)||void 0===_2?void 0:_2.source)})}),RenderOption.parameters=_objectSpread(_objectSpread({},RenderOption.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_3=RenderOption.parameters)||void 0===_3?void 0:_3.docs),{},{source:_objectSpread({originalSource:'{\n  args: {\n    id: \'grouped-demo\',\n    label: \'Choose a country\',\n    getOptionsPromise: async () => countries,\n    autoHighlight: true,\n    renderOption: (props, option) => <Box component="li" sx={{\n      \'& > img\': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n}'},null===(_5=null===(_4=RenderOption.parameters)||void 0===_4?void 0:_4.docs)||void 0===_5?void 0:_5.source)})}),GroupBy.parameters=_objectSpread(_objectSpread({},GroupBy.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_6=GroupBy.parameters)||void 0===_6?void 0:_6.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sleep: 1e3,\n    sortBy: 'title',\n    getOptionLabel: 'title',\n    width: 400\n  },\n  render\n}"},null===(_8=null===(_7=GroupBy.parameters)||void 0===_7?void 0:_7.docs)||void 0===_8?void 0:_8.source)})}),OptionsWithDisabled.parameters=_objectSpread(_objectSpread({},OptionsWithDisabled.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_9=OptionsWithDisabled.parameters)||void 0===_9?void 0:_9.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    fetchOptionsOnFocus: true,\n    sleep: 1e3,\n    getOptionsPromise: async () => timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n}"},null===(_11=null===(_10=OptionsWithDisabled.parameters)||void 0===_10?void 0:_10.docs)||void 0===_11?void 0:_11.source)})}),Keys.parameters=_objectSpread(_objectSpread({},Keys.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_12=Keys.parameters)||void 0===_12?void 0:_12.docs),{},{source:_objectSpread({originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState([]);\n  return <InputAutocompleteMultipleAsync id=\"grouped-demo\" label=\"Keys\" value={selectedOption} onChange={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => [{\n    key: '37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4',\n    Key: 'videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4'\n  }, {\n    key: 'ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4',\n    Key: 'videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4'\n  }]} getOptionLabel=\"key\" fieldId=\"Key\" />;\n}"},null===(_14=null===(_13=Keys.parameters)||void 0===_13?void 0:_13.docs)||void 0===_14?void 0:_14.source)})}),GroupByCategories.parameters=_objectSpread(_objectSpread({},GroupByCategories.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_15=GroupByCategories.parameters)||void 0===_15?void 0:_15.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    id: 'grouped-demo',\n    label: 'With categories',\n    fetchOptionsOnFocus: true,\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sortBy: 'title',\n    getOptionLabel: option => option.title,\n    width: 400\n  },\n  render\n}"},null===(_17=null===(_16=GroupByCategories.parameters)||void 0===_16?void 0:_16.docs)||void 0===_17?void 0:_17.source)})});var __namedExportsOrder=["Default","IncludeInputInList","OptionsStringList","OptionsObjectList","OptionsConverter","Placeholder","StartCmpExternal","Sort","FilmOptions","RenderOption","GroupBy","OptionsWithDisabled","Keys","GroupByCategories"]},"./src/components/_FIXED/Autocomplete/InputAutocompleteMultiple.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_icons_material__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mui/icons-material/esm/Check.js"),_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@mui/icons-material/esm/Close.js"),_mui_material__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/_FIXED/Autocomplete/InputAutocomplete.tsx"),_Chip_Chip__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/_FIXED/Chip/Chip.tsx"),_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/_FIXED/Checkbox/Checkbox.tsx"),_utils_helpers__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/utils/helpers.ts"),_excluded=["value","name","onChange","limitTags","filterSelectedOptions","chipProps","fieldId","renderOption","checkboxStyle","getOptionLabel","options","readOnly","raiseSelectedToTop"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var InputAutocompleteMultiple=function(_ref){var selectedOptions=_ref.value,name=_ref.name,onChange=_ref.onChange,limitTags=_ref.limitTags,filterSelectedOptions=_ref.filterSelectedOptions,chipProps=_ref.chipProps,fieldId=_ref.fieldId,_renderOption=_ref.renderOption,checkboxStyle=_ref.checkboxStyle,_getOptionLabel=_ref.getOptionLabel,options=_ref.options,readOnly=_ref.readOnly,raiseSelectedToTop=_ref.raiseSelectedToTop,props=_objectWithoutProperties(_ref,_excluded);selectedOptions=[].concat(selectedOptions);var getOptionLabel=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return"function"==typeof _getOptionLabel?_getOptionLabel:function(option){return(null==option?void 0:option[_getOptionLabel])||""}}),[_getOptionLabel]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({value:selectedOptions,onChange:function(event,options,action){var optionIds=options.filter((function(v){return(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_4__.$K)(v)})).map((function(o){var _a;return null!==(_a=o[fieldId])&&void 0!==_a?_a:o}));if(event.target.name=name,event.target.value=optionIds,"clear"===action){var newOptionsIds=selectedOptions.filter((function(option){return null==option?void 0:option.disabled})).map((function(o){var _a;return null!==(_a=o[fieldId])&&void 0!==_a?_a:o}));event.target.value=newOptionsIds,onChange(event,newOptionsIds)}else onChange(event,optionIds)},name,multiple:!0,raiseSelectedToTop,disableCloseOnSelect:!0,blurOnSelect:!1,limitTags,filterSelectedOptions,getOptionLabel,readOnly,options,renderOption:function(props,option,_a){var _b,_c,selected=_a.selected,label=null!==(_c=null!==(_b=null==_renderOption?void 0:_renderOption(props,option,{selected}))&&void 0!==_b?_b:null==getOptionLabel?void 0:getOptionLabel(option))&&void 0!==_c?_c:option;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li",props,checkboxStyle?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_3__.Z,{style:{marginRight:2},checked:selected,edge:"start"}):null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Z,{sx:{width:"100%",display:"flex",justifyContent:"space-between"}},label,!checkboxStyle&&selected?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_6__.Z,null):null))},renderTags:function(value,getTagProps){return value.filter((function(v){return(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_4__.$K)(v)})).map((function(option,index){var _a,label=null!==(_a=null==getOptionLabel?void 0:getOptionLabel(option))&&void 0!==_a?_a:option.label,disabled=readOnly?void 0:option.disabled,onDelete=readOnly||option.disabled?void 0:getTagProps({index}).onDelete;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Chip_Chip__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({key:label},getTagProps({index}),"function"==typeof chipProps?chipProps(option):chipProps,{label,disabled,onDelete}))}))}},props))};InputAutocompleteMultiple.displayName="InputAutocompleteMultiple",InputAutocompleteMultiple.defaultProps={checkboxStyle:!0,chipProps:{rounded:!1,endIcon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__.Z,null)},filterSelectedOptions:!1,limitTags:void 0,raiseSelectedToTop:void 0,readOnly:void 0,renderOption:void 0,value:[],getOptionLabel:"label",fieldId:"id",onChange:void 0};const __WEBPACK_DEFAULT_EXPORT__=InputAutocompleteMultiple;try{InputAutocompleteMultiple.displayName="InputAutocompleteMultiple",InputAutocompleteMultiple.__docgenInfo={description:"",displayName:"InputAutocompleteMultiple",props:{value:{defaultValue:{value:"[]"},description:"",name:"value",required:!1,type:{name:"any[]"}},onChange:{defaultValue:{value:"undefined"},description:"",name:"onChange",required:!1,type:{name:"(event: any, optionIds: (string | number)[]) => void"}},limitTags:{defaultValue:{value:"undefined"},description:"",name:"limitTags",required:!1,type:{name:"number"}},checkboxStyle:{defaultValue:{value:"true"},description:"",name:"checkboxStyle",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Autocomplete/InputAutocompleteMultiple.tsx#InputAutocompleteMultiple"]={docgenInfo:InputAutocompleteMultiple.__docgenInfo,name:"InputAutocompleteMultiple",path:"src/components/_FIXED/Autocomplete/InputAutocompleteMultiple.tsx#InputAutocompleteMultiple"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{m:()=>useAutoCompleteAsync});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_utils_helpers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/utils/helpers.ts"),_Progress_CircularProgress_CircularProgress__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/_FIXED/Progress/CircularProgress/CircularProgress.tsx"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=function(thisArg,body){var f,y,t,g,_={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;g&&(g=0,op[0]&&(_=0)),_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))};function useAutoCompleteAsync(_a){var _this=this,LOADING_LABEL=_a.LOADING_LABEL,getOptionsPromise=_a.getOptionsPromise,_sleep=_a.sleep,getOptionsCallback=_a.getOptionsCallback,fetchOptionsOnFocus=_a.fetchOptionsOnFocus,_b=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),open=_b[0],setOpen=_b[1],_c=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),options=_c[0],setOptions=_c[1],_d=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),loading=_d[0],setLoading=_d[1];(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((function(){var active=!0;if(open&&!options.length)return getOptionsPromise&&(setLoading(!0),getOptionsPromise().then((function(options){return __awaiter(_this,void 0,void 0,(function(){return __generator(this,(function(_a){switch(_a.label){case 0:return[4,(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__._v)(_sleep)];case 1:return _a.sent(),[2,options]}}))}))})).then((function(options){return __awaiter(_this,void 0,void 0,(function(){var _a;return __generator(this,(function(_b){return[2,null!==(_a=null==getOptionsCallback?void 0:getOptionsCallback())&&void 0!==_a?_a:__spreadArray([],options,!0)]}))}))})).then((function(options){return active&&setOptions(options)})).finally((function(){return setLoading(!1)}))),function(){active=!1}}),[open]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((function(){!open&&fetchOptionsOnFocus&&setOptions([])}),[open,fetchOptionsOnFocus]);var endCmp=loading?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Progress_CircularProgress_CircularProgress__WEBPACK_IMPORTED_MODULE_2__.Z,{color:"inherit",size:20}):null;return{onOpen:function(){return setOpen(!0)},onClose:function(){return setOpen(!1)},options,open,loading,endCmp,loadingText:LOADING_LABEL}}try{useAutoCompleteAsync.displayName="useAutoCompleteAsync",useAutoCompleteAsync.__docgenInfo={description:"",displayName:"useAutoCompleteAsync",props:{LOADING_LABEL:{defaultValue:null,description:"",name:"LOADING_LABEL",required:!0,type:{name:"any"}},getOptionsPromise:{defaultValue:null,description:"",name:"getOptionsPromise",required:!0,type:{name:"any"}},sleep:{defaultValue:null,description:"",name:"sleep",required:!0,type:{name:"any"}},getOptionsCallback:{defaultValue:null,description:"",name:"getOptionsCallback",required:!0,type:{name:"any"}},fetchOptionsOnFocus:{defaultValue:null,description:"",name:"fetchOptionsOnFocus",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx#useAutoCompleteAsync"]={docgenInfo:useAutoCompleteAsync.__docgenInfo,name:"useAutoCompleteAsync",path:"src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx#useAutoCompleteAsync"})}catch(__react_docgen_typescript_loader_error){}}}]);