"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[4103],{"./src/components/_FIXED/Autocomplete/__stories__/InputAutocomplete.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,EndIcon:()=>EndIcon,FilmOptions:()=>FilmOptions,GroupBy:()=>GroupBy,IncludeInputInList:()=>IncludeInputInList,OptionsConverter:()=>OptionsConverter,OptionsObjectList:()=>OptionsObjectList,OptionsStringList:()=>OptionsStringList,OptionsWithDisabled:()=>OptionsWithDisabled,Placeholder:()=>Placeholder,RenderOption:()=>RenderOption,Sort:()=>Sort,StartCmpExternal:()=>StartCmpExternal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),_mui_material__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/_FIXED/Autocomplete/InputAutocomplete.tsx"),_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/_FIXED/Autocomplete/__stories__/InputAutocomplete.mocks.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Inputs/Inputs/Autocomplete/InputAutocomplete",component:_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.A,tags:["autodocs"]},Default={args:{}},OPTIONS=[{title:"The Shawshank Redemption",year:1994,id:0},{title:"The Godfather",year:1972,id:1},{title:"The Godfather: Part II",year:1974,id:2},{title:"The Dark Knight",year:2008,id:3},{title:"12 Angry Men",year:1957,id:4},{title:"Schindler's List",year:1993,id:5},{title:"Pulp Fiction",year:1994,id:6}],render=args=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(args.value??null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.A,{...args,value:selectedOption,onChange:(e,option)=>setSelectedOption(option)})},IncludeInputInList={args:{label:"Movie",includeInputInList:!1,options:OPTIONS.map((({title,...item})=>({...item,label:title})))},render},OptionsStringList={args:{label:"Movie",options:OPTIONS.map((o=>o.title)),value:["The Dark Knight"]},render},EndIcon={args:{label:"Movie",options:OPTIONS.map((o=>o.title)),value:["The Dark Knight"],endCmp:"Person",freeSolo:!0,padding:0},render},OptionsObjectList={args:{label:"Movie",options:OPTIONS,getOptionLabel:"title"},render},OptionsConverter={args:{label:"Movie",options:OPTIONS,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},Placeholder={args:{label:"Movie",options:OPTIONS,placeholder:"choose you movie name",optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},StartCmpExternal={args:{label:"Movie",options:OPTIONS,startCmpExternal:"Tv",optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},Sort={args:{label:"Movie",options:OPTIONS,sortBy:"year",sortDir:-1,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},FilmOptions=()=>{const[selectedOption,setSelectedOption]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.A,{spacing:4},["filled","standard","outlined"].map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.A,{key:variant,label:"Movie",optionConverter:film=>({id:film.title,label:`${film.title} (${film.year})`}),options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.S1,value:selectedOption,onChange:(e,option)=>setSelectedOption(option),variant}))))},RenderOption={args:{id:"grouped-demo",label:"Choose a country",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.Xr,autoHighlight:!0,getOptionLabel:option=>option.label,renderOption:(props,option)=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.A,{component:"li",sx:{"& > img":{mr:2,flexShrink:0}},...props},react__WEBPACK_IMPORTED_MODULE_0__.createElement("img",{loading:"lazy",width:"20",src:`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`,srcSet:`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`,alt:""}),option.label," (",option.code,") +",option.phone)},render},GroupBy={args:{id:"grouped categories",label:"Categories",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.Xx,groupBy:option=>option.firstLetter,sortBy:"title",getOptionLabel:option=>option.title,width:400},render},OptionsWithDisabled={args:{id:"grouped-demo",label:"Disabled options",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.Vw.slice(0).map(((option,index)=>({id:index,time:option,disabled:index%4==0}))),getOptionLabel:option=>option.time,width:200},render},__namedExportsOrder=["Default","IncludeInputInList","OptionsStringList","EndIcon","OptionsObjectList","OptionsConverter","Placeholder","StartCmpExternal","Sort","FilmOptions","RenderOption","GroupBy","OptionsWithDisabled"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {}\n}",...Default.parameters?.docs?.source}}},IncludeInputInList.parameters={...IncludeInputInList.parameters,docs:{...IncludeInputInList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    options: OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n}",...IncludeInputInList.parameters?.docs?.source}}},OptionsStringList.parameters={...OptionsStringList.parameters,docs:{...OptionsStringList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS.map(o => o.title),\n    value: ['The Dark Knight']\n  },\n  render\n}",...OptionsStringList.parameters?.docs?.source}}},EndIcon.parameters={...EndIcon.parameters,docs:{...EndIcon.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS.map(o => o.title),\n    value: ['The Dark Knight'],\n    endCmp: 'Person',\n    freeSolo: true,\n    padding: 0\n  },\n  render\n}",...EndIcon.parameters?.docs?.source}}},OptionsObjectList.parameters={...OptionsObjectList.parameters,docs:{...OptionsObjectList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    getOptionLabel: 'title'\n  },\n  render\n}",...OptionsObjectList.parameters?.docs?.source}}},OptionsConverter.parameters={...OptionsConverter.parameters,docs:{...OptionsConverter.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...OptionsConverter.parameters?.docs?.source}}},Placeholder.parameters={...Placeholder.parameters,docs:{...Placeholder.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    placeholder: 'choose you movie name',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...Placeholder.parameters?.docs?.source}}},StartCmpExternal.parameters={...StartCmpExternal.parameters,docs:{...StartCmpExternal.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    startCmpExternal: 'Tv',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...StartCmpExternal.parameters?.docs?.source}}},Sort.parameters={...Sort.parameters,docs:{...Sort.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...Sort.parameters?.docs?.source}}},FilmOptions.parameters={...FilmOptions.parameters,docs:{...FilmOptions.parameters?.docs,source:{originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocomplete key={variant}\n    // getOptionLabel={(option) => option.title}\n    label=\"Movie\" optionConverter={film => ({\n      id: film.title,\n      label: `${film.title} (${film.year})`\n    })} options={top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} />)}\n        </Stack>;\n}",...FilmOptions.parameters?.docs?.source}}},RenderOption.parameters={...RenderOption.parameters,docs:{...RenderOption.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: \'grouped-demo\',\n    label: \'Choose a country\',\n    options: countries,\n    autoHighlight: true,\n    getOptionLabel: option => option.label,\n    renderOption: (props, option) => <Box component="li" sx={{\n      \'& > img\': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n}',...RenderOption.parameters?.docs?.source}}},GroupBy.parameters={...GroupBy.parameters,docs:{...GroupBy.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    options: top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sortBy: 'title',\n    getOptionLabel: option => option.title,\n    width: 400\n  },\n  render\n}",...GroupBy.parameters?.docs?.source}}},OptionsWithDisabled.parameters={...OptionsWithDisabled.parameters,docs:{...OptionsWithDisabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    options: timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n}",...OptionsWithDisabled.parameters?.docs?.source}}}}}]);