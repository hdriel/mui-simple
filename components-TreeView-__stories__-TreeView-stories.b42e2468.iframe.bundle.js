"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[8469],{"./src/components/TreeView/__stories__/TreeView.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicTreeView:()=>BasicTreeView,CustomItem:()=>CustomItem,Default:()=>Default,GmailCloneStyles:()=>GmailCloneStyles,IndentBorderStyles:()=>IndentBorderStyles,MultiSelection:()=>MultiSelection,__namedExportsOrder:()=>__namedExportsOrder,default:()=>TreeView_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),ExpandMore=__webpack_require__("./node_modules/@mui/icons-material/esm/ExpandMore.js"),ChevronRight=__webpack_require__("./node_modules/@mui/icons-material/esm/ChevronRight.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator.js"),TreeView=__webpack_require__("./node_modules/@mui/lab/TreeView/TreeView.js"),TreeItem=__webpack_require__("./node_modules/@mui/lab/TreeItem/TreeItem.js"),treeItemClasses=__webpack_require__("./node_modules/@mui/lab/TreeItem/treeItemClasses.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");function borderedStyles(props){return props.bordered?emotion_react_browser_esm.iv`
        & .${treeItemClasses.Z.group} {
            margin-left: 15px;
            padding-left: 18px;
            border-left: 1px dashed ${(0,colorManipulator.Fq)(props.theme.palette.text.primary,.4)};
        }
    `:emotion_react_browser_esm.iv``}function closeIconFade(props){return props.closeIconFade?emotion_react_browser_esm.iv`
        & .${treeItemClasses.Z.iconContainer} {
            & .close {
                opacity: 0.3;
            }
        }
    `:emotion_react_browser_esm.iv``}function selectedColor(props){return emotion_react_browser_esm.iv`
        color: ${props.theme.palette.text.secondary};
        & .${treeItemClasses.Z.content} {
            color: ${props.theme.palette.text.secondary};

            &.Mui-focused,
            &.Mui-selected,
            &.Mui-selected.Mui-focused {
                color: var(--tree-view-color);
                background-color: var(--tree-view-bg-color, ${props.theme.palette.action.selected}});
            }

            &:hover {
                background-color: ${props.theme.palette.action.hover};
            }
        }
    `}function edgeCorners(props){return props.edgeCorners?emotion_react_browser_esm.iv`
        & .${treeItemClasses.Z.content} {
            border-top-right-radius: ${props.theme.spacing(2)};
            border-bottom-right-radius: ${props.theme.spacing(2)};
        }
    `:emotion_react_browser_esm.iv``}try{borderedStyles.displayName="borderedStyles",borderedStyles.__docgenInfo={description:"",displayName:"borderedStyles",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styles.tsx#borderedStyles"]={docgenInfo:borderedStyles.__docgenInfo,name:"borderedStyles",path:"src/components/TreeView/TreeView.styles.tsx#borderedStyles"})}catch(__react_docgen_typescript_loader_error){}try{closeIconFade.displayName="closeIconFade",closeIconFade.__docgenInfo={description:"",displayName:"closeIconFade",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styles.tsx#closeIconFade"]={docgenInfo:closeIconFade.__docgenInfo,name:"closeIconFade",path:"src/components/TreeView/TreeView.styles.tsx#closeIconFade"})}catch(__react_docgen_typescript_loader_error){}try{selectedColor.displayName="selectedColor",selectedColor.__docgenInfo={description:"",displayName:"selectedColor",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styles.tsx#selectedColor"]={docgenInfo:selectedColor.__docgenInfo,name:"selectedColor",path:"src/components/TreeView/TreeView.styles.tsx#selectedColor"})}catch(__react_docgen_typescript_loader_error){}try{edgeCorners.displayName="edgeCorners",edgeCorners.__docgenInfo={description:"",displayName:"edgeCorners",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styles.tsx#edgeCorners"]={docgenInfo:edgeCorners.__docgenInfo,name:"edgeCorners",path:"src/components/TreeView/TreeView.styles.tsx#edgeCorners"})}catch(__react_docgen_typescript_loader_error){}const TreeView_styled_TreeView=(0,styled.ZP)(TreeView.Z,{shouldForwardProp:propName=>!["maxWidth","height"].includes(propName)})`
    height: ${props=>props.height};
    flex-grow: 1;
    max-width: ${props=>props.maxWidth?`${props.maxWidth}px`:void 0};
    overflow-y: auto;
    overflow-x: hidden;
`,TreeView_styled_TreeItem=TreeItem.Z,LabelIconTreeItemStyled=(0,styled.ZP)(TreeItem.Z)((({theme})=>({color:theme.palette.text.secondary,[`& .${treeItemClasses.Z.content}`]:{width:"auto",color:theme.palette.text.secondary,borderTopRightRadius:theme.spacing(2),borderBottomRightRadius:theme.spacing(2),paddingRight:theme.spacing(1),fontWeight:theme.typography.fontWeightMedium,"&.Mui-expanded":{fontWeight:theme.typography.fontWeightRegular},"&:hover":{backgroundColor:theme.palette.action.hover},"&.Mui-focused, &.Mui-selected, &.Mui-selected.Mui-focused":{backgroundColor:`var(--tree-view-bg-color, ${theme.palette.action.selected})`,color:"var(--tree-view-color)"},[`& .${treeItemClasses.Z.label}`]:{fontWeight:"inherit",color:"inherit"}},[`& .${treeItemClasses.Z.group}`]:{marginLeft:0,[`& .${treeItemClasses.Z.content}`]:{paddingLeft:theme.spacing(2)}}}))),IndentBorderTreeItemStyled=(0,styled.ZP)(TreeItem.Z)((({theme})=>({[`& .${treeItemClasses.Z.iconContainer}`]:{"& .close":{opacity:.3}},[`& .${treeItemClasses.Z.group}`]:{marginLeft:15,paddingLeft:18,borderLeft:`1px dashed ${(0,colorManipulator.Fq)(theme.palette.text.primary,.4)}`}}))),TreeItemStyled=(0,styled.ZP)(TreeItem.Z,{shouldForwardProp:propName=>!["bordered","closeIconFade"].includes(propName)})`
    ${closeIconFade}
    ${borderedStyles}
  ${selectedColor}
  ${edgeCorners}

  & .${treeItemClasses.Z.content} {
        width: auto;

        padding-right: ${props=>props.theme.spacing(1)};
        font-weight: ${props=>props.theme.typography.fontWeightMedium};

        &.Mui-expanded {
            font-weight: ${props=>props.theme.typography.fontWeightRegular};
        }

        & .${treeItemClasses.Z.label} {
            font-weight: inherit;
            color: inherit;
        }
    }

    & .${treeItemClasses.Z.group} {
        margin-left: 0;

        & .${treeItemClasses.Z.content} {
            padding-left: ${props=>props.theme.spacing(2)};
        }
    }
`;try{TreeView_styled_TreeView.displayName="TreeView",TreeView_styled_TreeView.__docgenInfo={description:"",displayName:"TreeView",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styled.tsx#TreeView"]={docgenInfo:TreeView_styled_TreeView.__docgenInfo,name:"TreeView",path:"src/components/TreeView/TreeView.styled.tsx#TreeView"})}catch(__react_docgen_typescript_loader_error){}try{TreeView_styled_TreeItem.displayName="TreeItem",TreeView_styled_TreeItem.__docgenInfo={description:"",displayName:"TreeItem",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styled.tsx#TreeItem"]={docgenInfo:TreeView_styled_TreeItem.__docgenInfo,name:"TreeItem",path:"src/components/TreeView/TreeView.styled.tsx#TreeItem"})}catch(__react_docgen_typescript_loader_error){}try{LabelIconTreeItemStyled.displayName="LabelIconTreeItemStyled",LabelIconTreeItemStyled.__docgenInfo={description:"",displayName:"LabelIconTreeItemStyled",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styled.tsx#LabelIconTreeItemStyled"]={docgenInfo:LabelIconTreeItemStyled.__docgenInfo,name:"LabelIconTreeItemStyled",path:"src/components/TreeView/TreeView.styled.tsx#LabelIconTreeItemStyled"})}catch(__react_docgen_typescript_loader_error){}try{IndentBorderTreeItemStyled.displayName="IndentBorderTreeItemStyled",IndentBorderTreeItemStyled.__docgenInfo={description:"",displayName:"IndentBorderTreeItemStyled",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styled.tsx#IndentBorderTreeItemStyled"]={docgenInfo:IndentBorderTreeItemStyled.__docgenInfo,name:"IndentBorderTreeItemStyled",path:"src/components/TreeView/TreeView.styled.tsx#IndentBorderTreeItemStyled"})}catch(__react_docgen_typescript_loader_error){}try{TreeItemStyled.displayName="TreeItemStyled",TreeItemStyled.__docgenInfo={description:"",displayName:"TreeItemStyled",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.styled.tsx#TreeItemStyled"]={docgenInfo:TreeItemStyled.__docgenInfo,name:"TreeItemStyled",path:"src/components/TreeView/TreeView.styled.tsx#TreeItemStyled"})}catch(__react_docgen_typescript_loader_error){}var Collapse=__webpack_require__("./node_modules/@mui/material/Collapse/Collapse.js"),react_spring_web_modern=__webpack_require__("./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs");function TransitionComponent(props){const style=(0,react_spring_web_modern.q_)({from:{opacity:0,transform:"translate3d(0,-20px,0)"},to:{opacity:props.in?1:0,transform:`translate3d(0,${props.in?0:20}px,0)`}});return react.createElement(react_spring_web_modern.q.div,{style},react.createElement(Collapse.Z,props))}TransitionComponent.displayName="TransitionComponent",TransitionComponent.propTypes={in:prop_types_default().bool};try{TreeViewtransition.displayName="TreeViewtransition",TreeViewtransition.__docgenInfo={description:"",displayName:"TreeViewtransition",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.transition.tsx#TreeViewtransition"]={docgenInfo:TreeViewtransition.__docgenInfo,name:"TreeViewtransition",path:"src/components/TreeView/TreeView.transition.tsx#TreeViewtransition"})}catch(__react_docgen_typescript_loader_error){}var useTreeItem=__webpack_require__("./node_modules/@mui/lab/TreeItem/useTreeItem.js");const _excluded=["nodeId","TransitionComponent","children","closeIconFade","closeIconFadeStyles","borderedStyles","edgeCornersStyles"],_excluded2=["children"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}const TreeView_excluded=["nodes","collapseIcon","expandIcon","endIcon","multiSelect","expandedIds","onExpended","selectedIds","onSelected","useStyle","LabelComponent","TreeItemComponent","TransitionComponent","closeIconFadeStyles","borderedStyles","edgeCornersStyles"],TreeView_excluded2=["id","label"];function TreeView_extends(){return TreeView_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},TreeView_extends.apply(this,arguments)}function TreeView_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function TreeView_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function TreeView_TreeView(_ref){let{nodes,collapseIcon,expandIcon,endIcon,multiSelect,expandedIds,onExpended,selectedIds,onSelected,useStyle,LabelComponent,TreeItemComponent,TransitionComponent,closeIconFadeStyles,borderedStyles,edgeCornersStyles}=_ref,props=TreeView_objectWithoutProperties(_ref,TreeView_excluded);const handleToggle=onExpended?(event,nodeIds)=>{onExpended([].concat(nodeIds))}:void 0,handleSelect=onSelected?(event,nodeIds)=>{onSelected([].concat(nodeIds))}:void 0,CustomTreeItem=LabelComponent?function withTreeViewItem(Component,TreeItemComponent=TreeView_styled_TreeItem){const CustomTreeItemChild=(0,react.forwardRef)(((props,ref)=>{const _ref=props??{},{nodeId,TransitionComponent,children,closeIconFade,closeIconFadeStyles,borderedStyles,edgeCornersStyles}=_ref,restProps=_objectWithoutProperties(_ref,_excluded),{disabled,expanded,selected,focused,handleExpansion,handleSelection,preventSelection}=(0,useTreeItem.Z)(nodeId);return props&&react.createElement(TreeItemComponent,{key:nodeId,ref,nodeId,TransitionComponent,closeIconFade,bordered:borderedStyles,closeIconFadeStyles,borderedStyles,edgeCornersStyles,label:react.createElement(Component,_extends({},restProps,{nodeId,itemDisabled:disabled,itemExpanded:expanded,itemSelected:selected,itemFocused:focused,onExpandedItem:event=>handleExpansion?.(event),onSelectedItem:event=>handleSelection?.(event),preventSelectItem:preventSelection})),style:{"--tree-view-color":restProps.color,"--tree-view-bg-color":restProps.bgColor}},[].concat(children??[])?.map((({props:treeItemProps},index)=>react.createElement(CustomTreeItemChild,_extends({key:treeItemProps?.nodeId??index},treeItemProps)))))}));return function renderTree(_ref2){let{children}=_ref2,props=_objectWithoutProperties(_ref2,_excluded2);return react.createElement(CustomTreeItemChild,props,[].concat(children??[])?.map((({props:treeItemProps})=>renderTree(treeItemProps))))}}(LabelComponent,TreeItemStyled):TreeItemComponent,renderTree=nodes=>nodes?.map((_ref2=>{let{id,label}=_ref2,node=TreeView_objectWithoutProperties(_ref2,TreeView_excluded2);return react.createElement(CustomTreeItem,TreeView_extends({key:id,id,nodeId:id,label,TransitionComponent},node),renderTree(node.children))}));return react.createElement(Box.Z,null,react.createElement(TreeView_styled_TreeView,TreeView_extends({defaultCollapseIcon:collapseIcon,defaultExpandIcon:expandIcon,defaultEndIcon:endIcon,multiSelect,expanded:expandedIds,selected:selectedIds,onNodeToggle:handleToggle,onNodeSelect:handleSelect,maxWidth:400},props),CustomTreeItem&&renderTree(nodes)))}TreeView_TreeView.displayName="TreeView";const nodePropTypes=prop_types_default().arrayOf(prop_types_default().shape({id:prop_types_default().string,label:prop_types_default().string,children:prop_types_default().array}));TreeView_TreeView.propTypes={nodes:nodePropTypes,collapseIcon:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().node]),expandIcon:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().node]),multiSelect:prop_types_default().bool,expandedIds:prop_types_default().arrayOf(prop_types_default().string),onExpended:prop_types_default().func,selectedIds:prop_types_default().arrayOf(prop_types_default().string),onSelected:prop_types_default().func,useStyle:prop_types_default().oneOf(["default","LabelIcon","IndentBorder"]),LabelComponent:prop_types_default().any,TreeItemComponent:prop_types_default().any,closeIconFadeStyles:prop_types_default().bool,borderedStyles:prop_types_default().bool,edgeCornersStyles:prop_types_default().bool},TreeView_TreeView.defaultProps={nodes:[],collapseIcon:react.createElement(ExpandMore.Z,null),expandIcon:react.createElement(ChevronRight.Z,null),endIcon:void 0,multiSelect:void 0,expandedIds:void 0,onExpended:void 0,selectedIds:void 0,onSelected:void 0,LabelComponent:void 0,TreeItemComponent:TreeView_styled_TreeItem,TransitionComponent,closeIconFadeStyles:!1,borderedStyles:!1,edgeCornersStyles:!1};try{TreeView_TreeView.displayName="TreeView",TreeView_TreeView.__docgenInfo={description:"",displayName:"TreeView",props:{nodes:{defaultValue:{value:"[]"},description:"",name:"nodes",required:!1,type:{name:"any"}},collapseIcon:{defaultValue:{value:"<ExpandMoreIcon />"},description:"",name:"collapseIcon",required:!1,type:{name:"any"}},expandIcon:{defaultValue:{value:"<ChevronRightIcon />"},description:"",name:"expandIcon",required:!1,type:{name:"any"}},endIcon:{defaultValue:{value:"undefined"},description:"",name:"endIcon",required:!1,type:{name:"any"}},multiSelect:{defaultValue:{value:"undefined"},description:"",name:"multiSelect",required:!1,type:{name:"any"}},expandedIds:{defaultValue:{value:"undefined"},description:"",name:"expandedIds",required:!1,type:{name:"any"}},onExpended:{defaultValue:{value:"undefined"},description:"",name:"onExpended",required:!1,type:{name:"any"}},selectedIds:{defaultValue:{value:"undefined"},description:"",name:"selectedIds",required:!1,type:{name:"any"}},onSelected:{defaultValue:{value:"undefined"},description:"",name:"onSelected",required:!1,type:{name:"any"}},useStyle:{defaultValue:null,description:"",name:"useStyle",required:!0,type:{name:"any"}},LabelComponent:{defaultValue:{value:"undefined"},description:"",name:"LabelComponent",required:!1,type:{name:"any"}},TreeItemComponent:{defaultValue:null,description:"",name:"TreeItemComponent",required:!0,type:{name:"any"}},TransitionComponent:{defaultValue:null,description:"",name:"TransitionComponent",required:!0,type:{name:"any"}},closeIconFadeStyles:{defaultValue:{value:"false"},description:"",name:"closeIconFadeStyles",required:!1,type:{name:"any"}},borderedStyles:{defaultValue:{value:"false"},description:"",name:"borderedStyles",required:!1,type:{name:"any"}},edgeCornersStyles:{defaultValue:{value:"false"},description:"",name:"edgeCornersStyles",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.tsx#TreeView"]={docgenInfo:TreeView_TreeView.__docgenInfo,name:"TreeView",path:"src/components/TreeView/TreeView.tsx#TreeView"})}catch(__react_docgen_typescript_loader_error){}var Button=__webpack_require__("./src/components/_FIXED/Button/Button.tsx"),Typography=__webpack_require__("./src/components/_FIXED/Typography/Typography.tsx"),SVGIcon=__webpack_require__("./src/components/_FIXED/SVGIcon/SVGIcon.tsx"),ArrowDropDown=__webpack_require__("./node_modules/@mui/icons-material/esm/ArrowDropDown.js"),ArrowRight=__webpack_require__("./node_modules/@mui/icons-material/esm/ArrowRight.js");const LabelIconTreeItem_excluded=["bgColor","color","icon","info","label"];function LabelIconTreeItem_extends(){return LabelIconTreeItem_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},LabelIconTreeItem_extends.apply(this,arguments)}function LabelIconTreeItem_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function LabelIconTreeItem_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}const LabelIconTreeItem=(0,react.forwardRef)(((props,ref)=>{const _ref=props??{},{bgColor,color,icon:labelIcon,info:labelInfo,label:labelText}=_ref,other=LabelIconTreeItem_objectWithoutProperties(_ref,LabelIconTreeItem_excluded);return props&&react.createElement(LabelIconTreeItemStyled,LabelIconTreeItem_extends({ref},other,{label:react.createElement(Box.Z,{sx:{display:"flex",alignItems:"center",p:.5,pr:0}},labelIcon&&react.createElement(Box.Z,{color:"inherit",sx:{mr:1,display:"flex",alignItems:"center"}},react.createElement(SVGIcon.Z,{muiIconName:labelIcon},labelIcon)),labelText&&react.createElement(Typography.Z,{variant:"body2",sx:{fontWeight:"inherit",flexGrow:1}},labelText),labelInfo&&react.createElement(Typography.Z,{variant:"caption",color:"inherit"},labelInfo)),style:{"--tree-view-color":color,"--tree-view-bg-color":bgColor}}))}));LabelIconTreeItem.propTypes={bgColor:prop_types_default().string,color:prop_types_default().string,icon:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().node,prop_types_default().any]),info:prop_types_default().string,label:prop_types_default().string.isRequired},LabelIconTreeItem.defaultProps={bgColor:void 0,color:void 0,icon:void 0,info:void 0,label:void 0};const TreeItemComponents_LabelIconTreeItem=LabelIconTreeItem,LabelIconTreeItemIcons={collapseIcon:react.createElement(ArrowDropDown.Z,null),expandIcon:react.createElement(ArrowRight.Z,null),endIcon:react.createElement("div",{style:{width:24}})};try{LabelIconTreeItem.displayName="LabelIconTreeItem",LabelIconTreeItem.__docgenInfo={description:"",displayName:"LabelIconTreeItem",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeItemComponents/LabelIconTreeItem.tsx#LabelIconTreeItem"]={docgenInfo:LabelIconTreeItem.__docgenInfo,name:"LabelIconTreeItem",path:"src/components/TreeView/TreeItemComponents/LabelIconTreeItem.tsx#LabelIconTreeItem"})}catch(__react_docgen_typescript_loader_error){}var SvgIcon=__webpack_require__("./node_modules/@mui/material/SvgIcon/SvgIcon.js");function TreeView_icons_extends(){return TreeView_icons_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},TreeView_icons_extends.apply(this,arguments)}function MinusSquare(props){return react.createElement(SvgIcon.Z,TreeView_icons_extends({fontSize:"inherit",style:{width:14,height:14}},props),react.createElement("path",{d:"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z"}))}function PlusSquare(props){return react.createElement(SvgIcon.Z,TreeView_icons_extends({fontSize:"inherit",style:{width:14,height:14}},props),react.createElement("path",{d:"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z"}))}function CloseSquare(props){return react.createElement(SvgIcon.Z,TreeView_icons_extends({className:"close",fontSize:"inherit",style:{width:14,height:14}},props),react.createElement("path",{d:"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z"}))}MinusSquare.displayName="MinusSquare",PlusSquare.displayName="PlusSquare",CloseSquare.displayName="CloseSquare";try{MinusSquare.displayName="MinusSquare",MinusSquare.__docgenInfo={description:"",displayName:"MinusSquare",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.icons.tsx#MinusSquare"]={docgenInfo:MinusSquare.__docgenInfo,name:"MinusSquare",path:"src/components/TreeView/TreeView.icons.tsx#MinusSquare"})}catch(__react_docgen_typescript_loader_error){}try{PlusSquare.displayName="PlusSquare",PlusSquare.__docgenInfo={description:"",displayName:"PlusSquare",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.icons.tsx#PlusSquare"]={docgenInfo:PlusSquare.__docgenInfo,name:"PlusSquare",path:"src/components/TreeView/TreeView.icons.tsx#PlusSquare"})}catch(__react_docgen_typescript_loader_error){}try{CloseSquare.displayName="CloseSquare",CloseSquare.__docgenInfo={description:"",displayName:"CloseSquare",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeView.icons.tsx#CloseSquare"]={docgenInfo:CloseSquare.__docgenInfo,name:"CloseSquare",path:"src/components/TreeView/TreeView.icons.tsx#CloseSquare"})}catch(__react_docgen_typescript_loader_error){}const IndentBorderTreeItem_excluded=["bgColor","color","icon","label"];function IndentBorderTreeItem_extends(){return IndentBorderTreeItem_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},IndentBorderTreeItem_extends.apply(this,arguments)}function IndentBorderTreeItem_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function IndentBorderTreeItem_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}const IndentBorderTreeItem=(0,react.forwardRef)(((props,ref)=>{const _ref=props??{},{bgColor,color,icon,label}=_ref,other=IndentBorderTreeItem_objectWithoutProperties(_ref,IndentBorderTreeItem_excluded);return props&&react.createElement(IndentBorderTreeItemStyled,IndentBorderTreeItem_extends({ref},other,{label,style:{"--tree-view-color":color,"--tree-view-bg-color":bgColor}}))}));IndentBorderTreeItem.propTypes={bgColor:prop_types_default().string,color:prop_types_default().string,label:prop_types_default().string.isRequired},IndentBorderTreeItem.defaultProps={bgColor:void 0,color:void 0,label:void 0};const TreeItemComponents_IndentBorderTreeItem=IndentBorderTreeItem,IndentBorderTreeItemIcons={collapseIcon:react.createElement(MinusSquare,null),expandIcon:react.createElement(PlusSquare,null),endIcon:react.createElement(CloseSquare,null)};try{IndentBorderTreeItem.displayName="IndentBorderTreeItem",IndentBorderTreeItem.__docgenInfo={description:"",displayName:"IndentBorderTreeItem",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TreeView/TreeItemComponents/IndentBorderTreeItem.tsx#IndentBorderTreeItem"]={docgenInfo:IndentBorderTreeItem.__docgenInfo,name:"IndentBorderTreeItem",path:"src/components/TreeView/TreeItemComponents/IndentBorderTreeItem.tsx#IndentBorderTreeItem"})}catch(__react_docgen_typescript_loader_error){}function TreeView_stories_extends(){return TreeView_stories_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},TreeView_stories_extends.apply(this,arguments)}const TreeView_stories={parameters:{storySource:{source:"import React from 'react';\nimport { action } from '@storybook/addon-actions';\n\nimport TreeView from '../TreeView';\nimport { Box } from '@mui/material';\nimport Button from '../../_FIXED/Button/Button';\n\nimport LabelIconTreeItem, { LabelIconTreeItemIcons } from '../TreeItemComponents/LabelIconTreeItem';\nimport IndentBorderTreeItem, { IndentBorderTreeItemIcons } from '../TreeItemComponents/IndentBorderTreeItem';\n\nimport SVGIcon from '../../_FIXED/SVGIcon/SVGIcon';\nimport Typography from '../../_FIXED/Typography/Typography';\n\nexport default {\n    title: 'Lab/TreeView',\n    component: TreeView,\n};\n\nconst actions = {\n    onClick: action('onClick'),\n};\n\nexport const Default = () => {\n    return <TreeView {...actions} />;\n};\n\nexport const BasicTreeView = () => {\n    const nodes = [\n        {\n            id: '1',\n            label: 'Applications',\n            children: [{ id: '2', label: 'Calendar' }],\n        },\n        {\n            id: '5',\n            label: 'Documents',\n            children: [\n                { id: '10', label: 'OSS' },\n                { id: '6', label: 'MUI', children: [{ id: '8', label: 'index.js' }] },\n            ],\n        },\n    ];\n    return <TreeView nodes={nodes} />;\n};\n\nexport const MultiSelection = () => {\n    const nodes = [\n        {\n            id: '1',\n            label: 'Applications',\n            children: [\n                { id: '2', label: 'Calendar' },\n                { id: '3', label: 'Chrome' },\n                { id: '4', label: 'Webstorm' },\n            ],\n        },\n        {\n            id: '5',\n            label: 'Documents',\n            children: [\n                {\n                    id: '6',\n                    label: 'MUI',\n                    children: [\n                        {\n                            id: '7',\n                            label: 'src',\n                            children: [\n                                { id: '8', label: 'index.js' },\n                                { id: '9', label: 'tree-view.js' },\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n    ];\n\n    const [expanded, setExpanded] = React.useState([]);\n    const [selected, setSelected] = React.useState([]);\n\n    const handleExpandClick = () => {\n        setExpanded((oldExpanded) => (oldExpanded.length === 0 ? ['1', '5', '6', '7'] : []));\n    };\n    const handleSelectClick = () => {\n        setSelected((oldSelected) => (oldSelected.length === 0 ? ['1', '2', '3', '4', '5', '6', '7', '8', '9'] : []));\n    };\n\n    return (\n        <Box sx={{ height: 270, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}>\n            <Box sx={{ mb: 1 }}>\n                <Button onClick={handleExpandClick}>{expanded.length === 0 ? 'Expand all' : 'Collapse all'}</Button>\n                <Button onClick={handleSelectClick}>{selected.length === 0 ? 'Select all' : 'Unselect all'}</Button>\n            </Box>\n\n            <TreeView\n                nodes={nodes}\n                expandedIds={expanded}\n                selectedIds={selected}\n                onExpended={setExpanded}\n                onSelected={setSelected}\n                multiSelect\n            />\n        </Box>\n    );\n};\n\nexport const GmailCloneStyles = () => {\n    const nodes = [\n        {\n            id: '1',\n            label: 'All Mail',\n            icon: 'Mail',\n        },\n        {\n            id: '2',\n            label: 'Trash',\n            icon: 'Delete',\n        },\n        {\n            id: '3',\n            label: 'Categories',\n            icon: 'Label',\n            children: [\n                {\n                    id: '5',\n                    label: 'Social',\n                    icon: 'SupervisorAccount',\n                    info: '90',\n                    color: '#1a73e8',\n                    bgColor: '#e8f0fe',\n                },\n                {\n                    id: '6',\n                    label: 'Updates',\n                    icon: 'Info',\n                    info: '2,294',\n                    color: '#e3742f',\n                    bgColor: '#fcefe3',\n                },\n                {\n                    id: '7',\n                    label: 'Forums',\n                    icon: 'Forum',\n                    info: '3,566',\n                    color: '#a250f5',\n                    bgColor: '#f3e8fd',\n                },\n                {\n                    id: '8',\n                    label: 'Promotions',\n                    icon: 'LocalOffer',\n                    info: '733',\n                    color: '#3c8039',\n                    bgColor: '#e6f4ea',\n                },\n            ],\n        },\n        {\n            id: '4',\n            label: 'History',\n            icon: 'Label',\n        },\n    ];\n\n    const [expanded, setExpanded] = React.useState(['3']);\n    const [selected, setSelected] = React.useState([]);\n\n    return (\n        <TreeView\n            nodes={nodes}\n            expandedIds={expanded}\n            selectedIds={selected}\n            onExpended={setExpanded}\n            onSelected={setSelected}\n            TreeItemComponent={LabelIconTreeItem}\n            {...LabelIconTreeItemIcons}\n        />\n    );\n};\n\nexport const IndentBorderStyles = () => {\n    const nodes = [\n        {\n            id: '1',\n            label: 'Main',\n            children: [\n                {\n                    id: '2',\n                    label: 'Hello',\n                },\n                {\n                    id: '3',\n                    label: 'Subtree with children',\n                    children: [\n                        {\n                            id: '6',\n                            label: 'Hello',\n                        },\n                        {\n                            id: '7',\n                            label: 'Sub-subtree with children',\n                            children: [\n                                {\n                                    id: '9',\n                                    label: 'Child 1',\n                                },\n                                {\n                                    id: '10',\n                                    label: 'Child 2',\n                                },\n                                {\n                                    id: '11',\n                                    label: 'Child 3',\n                                },\n                            ],\n                        },\n                        {\n                            id: '8',\n                            label: 'Hello',\n                        },\n                    ],\n                },\n                {\n                    id: '4',\n                    label: 'World',\n                },\n                {\n                    id: '5',\n                    label: 'Something something',\n                },\n            ],\n        },\n    ];\n\n    const [expanded, setExpanded] = React.useState(['1']);\n    const [selected, setSelected] = React.useState([]);\n\n    return (\n        <TreeView\n            nodes={nodes}\n            expandedIds={expanded}\n            selectedIds={selected}\n            onExpended={setExpanded}\n            onSelected={setSelected}\n            TreeItemComponent={IndentBorderTreeItem}\n            {...IndentBorderTreeItemIcons}\n        />\n    );\n};\n\nconst StyledTreeItemContent = (props) => {\n    const { nodeId, icon: labelIcon, info: labelInfo, label: labelText, selected } = props ?? {};\n\n    return (\n        props && (\n            <Box sx={{ display: 'flex', alignItems: 'center', p: 0.5, pr: 0 }}>\n                {labelIcon && (\n                    <Box color=\"inherit\" sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>\n                        <SVGIcon muiIconName={labelIcon}>{labelIcon}</SVGIcon>\n                    </Box>\n                )}\n                {labelText && (\n                    <Typography\n                        variant=\"body2\"\n                        sx={{\n                            fontWeight: 'inherit',\n                            flexGrow: 1,\n                            bgColor: selected ? 'red' : undefined,\n                        }}\n                    >\n                        {labelText} ({nodeId})\n                    </Typography>\n                )}\n                {labelInfo && (\n                    <Typography variant=\"caption\" color=\"inherit\">\n                        {labelInfo}\n                    </Typography>\n                )}\n            </Box>\n        )\n    );\n};\n\nexport const CustomItem = () => {\n    const nodes = [\n        {\n            id: '1',\n            label: 'Main',\n            icon: 'Home',\n            info: 'test',\n            // color: \"red\",\n            // bgColor: \"yellow\",\n            children: [\n                {\n                    id: '2',\n                    label: 'Hello',\n                },\n                {\n                    id: '3',\n                    label: 'Subtree with children',\n                    children: [\n                        {\n                            id: '6',\n                            label: 'Hello',\n                        },\n                        {\n                            id: '7',\n                            label: 'Sub-subtree with children',\n                            children: [\n                                {\n                                    id: '9',\n                                    label: 'Child 1',\n                                },\n                                {\n                                    id: '10',\n                                    label: 'Child 2',\n                                },\n                                {\n                                    id: '11',\n                                    label: 'Child 3',\n                                },\n                            ],\n                        },\n                        {\n                            id: '8',\n                            label: 'Hello',\n                        },\n                    ],\n                },\n                {\n                    id: '4',\n                    label: 'World',\n                },\n                {\n                    id: '5',\n                    label: 'Something something',\n                },\n            ],\n        },\n    ];\n\n    const [expanded, setExpanded] = React.useState(['1']);\n    const [selected, setSelected] = React.useState([]);\n\n    return (\n        <TreeView\n            nodes={nodes}\n            expandedIds={expanded}\n            selectedIds={selected}\n            onExpended={setExpanded}\n            onSelected={setSelected}\n            TransitionComponent={null}\n            LabelComponent={StyledTreeItemContent}\n        />\n    );\n};\n",locationsMap:{default:{startLoc:{col:23,line:23},endLoc:{col:1,line:25},startBody:{col:23,line:23},endBody:{col:1,line:25}},"basic-tree-view":{startLoc:{col:29,line:27},endLoc:{col:1,line:44},startBody:{col:29,line:27},endBody:{col:1,line:44}},"multi-selection":{startLoc:{col:30,line:46},endLoc:{col:1,line:106},startBody:{col:30,line:46},endBody:{col:1,line:106}},"gmail-clone-styles":{startLoc:{col:32,line:108},endLoc:{col:1,line:180},startBody:{col:32,line:108},endBody:{col:1,line:180}},"indent-border-styles":{startLoc:{col:34,line:182},endLoc:{col:1,line:250},startBody:{col:34,line:182},endBody:{col:1,line:250}},"custom-item":{startLoc:{col:26,line:285},endLoc:{col:1,line:357},startBody:{col:26,line:285},endBody:{col:1,line:357}}}}},title:"Lab/TreeView",component:TreeView_TreeView},actions={onClick:(0,dist.aD)("onClick")},Default=()=>react.createElement(TreeView_TreeView,actions);Default.displayName="Default";const BasicTreeView=()=>react.createElement(TreeView_TreeView,{nodes:[{id:"1",label:"Applications",children:[{id:"2",label:"Calendar"}]},{id:"5",label:"Documents",children:[{id:"10",label:"OSS"},{id:"6",label:"MUI",children:[{id:"8",label:"index.js"}]}]}]});BasicTreeView.displayName="BasicTreeView";const MultiSelection=()=>{const[expanded,setExpanded]=react.useState([]),[selected,setSelected]=react.useState([]);return react.createElement(Box.Z,{sx:{height:270,flexGrow:1,maxWidth:400,overflowY:"auto"}},react.createElement(Box.Z,{sx:{mb:1}},react.createElement(Button.Z,{onClick:()=>{setExpanded((oldExpanded=>0===oldExpanded.length?["1","5","6","7"]:[]))}},0===expanded.length?"Expand all":"Collapse all"),react.createElement(Button.Z,{onClick:()=>{setSelected((oldSelected=>0===oldSelected.length?["1","2","3","4","5","6","7","8","9"]:[]))}},0===selected.length?"Select all":"Unselect all")),react.createElement(TreeView_TreeView,{nodes:[{id:"1",label:"Applications",children:[{id:"2",label:"Calendar"},{id:"3",label:"Chrome"},{id:"4",label:"Webstorm"}]},{id:"5",label:"Documents",children:[{id:"6",label:"MUI",children:[{id:"7",label:"src",children:[{id:"8",label:"index.js"},{id:"9",label:"tree-view.js"}]}]}]}],expandedIds:expanded,selectedIds:selected,onExpended:setExpanded,onSelected:setSelected,multiSelect:!0}))};MultiSelection.displayName="MultiSelection";const GmailCloneStyles=()=>{const[expanded,setExpanded]=react.useState(["3"]),[selected,setSelected]=react.useState([]);return react.createElement(TreeView_TreeView,TreeView_stories_extends({nodes:[{id:"1",label:"All Mail",icon:"Mail"},{id:"2",label:"Trash",icon:"Delete"},{id:"3",label:"Categories",icon:"Label",children:[{id:"5",label:"Social",icon:"SupervisorAccount",info:"90",color:"#1a73e8",bgColor:"#e8f0fe"},{id:"6",label:"Updates",icon:"Info",info:"2,294",color:"#e3742f",bgColor:"#fcefe3"},{id:"7",label:"Forums",icon:"Forum",info:"3,566",color:"#a250f5",bgColor:"#f3e8fd"},{id:"8",label:"Promotions",icon:"LocalOffer",info:"733",color:"#3c8039",bgColor:"#e6f4ea"}]},{id:"4",label:"History",icon:"Label"}],expandedIds:expanded,selectedIds:selected,onExpended:setExpanded,onSelected:setSelected,TreeItemComponent:TreeItemComponents_LabelIconTreeItem},LabelIconTreeItemIcons))};GmailCloneStyles.displayName="GmailCloneStyles";const IndentBorderStyles=()=>{const[expanded,setExpanded]=react.useState(["1"]),[selected,setSelected]=react.useState([]);return react.createElement(TreeView_TreeView,TreeView_stories_extends({nodes:[{id:"1",label:"Main",children:[{id:"2",label:"Hello"},{id:"3",label:"Subtree with children",children:[{id:"6",label:"Hello"},{id:"7",label:"Sub-subtree with children",children:[{id:"9",label:"Child 1"},{id:"10",label:"Child 2"},{id:"11",label:"Child 3"}]},{id:"8",label:"Hello"}]},{id:"4",label:"World"},{id:"5",label:"Something something"}]}],expandedIds:expanded,selectedIds:selected,onExpended:setExpanded,onSelected:setSelected,TreeItemComponent:TreeItemComponents_IndentBorderTreeItem},IndentBorderTreeItemIcons))};IndentBorderStyles.displayName="IndentBorderStyles";const StyledTreeItemContent=props=>{const{nodeId,icon:labelIcon,info:labelInfo,label:labelText,selected}=props??{};return props&&react.createElement(Box.Z,{sx:{display:"flex",alignItems:"center",p:.5,pr:0}},labelIcon&&react.createElement(Box.Z,{color:"inherit",sx:{mr:1,display:"flex",alignItems:"center"}},react.createElement(SVGIcon.Z,{muiIconName:labelIcon},labelIcon)),labelText&&react.createElement(Typography.Z,{variant:"body2",sx:{fontWeight:"inherit",flexGrow:1,bgColor:selected?"red":void 0}},labelText," (",nodeId,")"),labelInfo&&react.createElement(Typography.Z,{variant:"caption",color:"inherit"},labelInfo))},CustomItem=()=>{const[expanded,setExpanded]=react.useState(["1"]),[selected,setSelected]=react.useState([]);return react.createElement(TreeView_TreeView,{nodes:[{id:"1",label:"Main",icon:"Home",info:"test",children:[{id:"2",label:"Hello"},{id:"3",label:"Subtree with children",children:[{id:"6",label:"Hello"},{id:"7",label:"Sub-subtree with children",children:[{id:"9",label:"Child 1"},{id:"10",label:"Child 2"},{id:"11",label:"Child 3"}]},{id:"8",label:"Hello"}]},{id:"4",label:"World"},{id:"5",label:"Something something"}]}],expandedIds:expanded,selectedIds:selected,onExpended:setExpanded,onSelected:setSelected,TransitionComponent:null,LabelComponent:StyledTreeItemContent})};CustomItem.displayName="CustomItem",Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => {\n  return <TreeView {...actions} />;\n}",...Default.parameters?.docs?.source}}},BasicTreeView.parameters={...BasicTreeView.parameters,docs:{...BasicTreeView.parameters?.docs,source:{originalSource:"() => {\n  const nodes = [{\n    id: '1',\n    label: 'Applications',\n    children: [{\n      id: '2',\n      label: 'Calendar'\n    }]\n  }, {\n    id: '5',\n    label: 'Documents',\n    children: [{\n      id: '10',\n      label: 'OSS'\n    }, {\n      id: '6',\n      label: 'MUI',\n      children: [{\n        id: '8',\n        label: 'index.js'\n      }]\n    }]\n  }];\n  return <TreeView nodes={nodes} />;\n}",...BasicTreeView.parameters?.docs?.source}}},MultiSelection.parameters={...MultiSelection.parameters,docs:{...MultiSelection.parameters?.docs,source:{originalSource:"() => {\n  const nodes = [{\n    id: '1',\n    label: 'Applications',\n    children: [{\n      id: '2',\n      label: 'Calendar'\n    }, {\n      id: '3',\n      label: 'Chrome'\n    }, {\n      id: '4',\n      label: 'Webstorm'\n    }]\n  }, {\n    id: '5',\n    label: 'Documents',\n    children: [{\n      id: '6',\n      label: 'MUI',\n      children: [{\n        id: '7',\n        label: 'src',\n        children: [{\n          id: '8',\n          label: 'index.js'\n        }, {\n          id: '9',\n          label: 'tree-view.js'\n        }]\n      }]\n    }]\n  }];\n  const [expanded, setExpanded] = React.useState([]);\n  const [selected, setSelected] = React.useState([]);\n  const handleExpandClick = () => {\n    setExpanded(oldExpanded => oldExpanded.length === 0 ? ['1', '5', '6', '7'] : []);\n  };\n  const handleSelectClick = () => {\n    setSelected(oldSelected => oldSelected.length === 0 ? ['1', '2', '3', '4', '5', '6', '7', '8', '9'] : []);\n  };\n  return <Box sx={{\n    height: 270,\n    flexGrow: 1,\n    maxWidth: 400,\n    overflowY: 'auto'\n  }}>\n            <Box sx={{\n      mb: 1\n    }}>\n                <Button onClick={handleExpandClick}>{expanded.length === 0 ? 'Expand all' : 'Collapse all'}</Button>\n                <Button onClick={handleSelectClick}>{selected.length === 0 ? 'Select all' : 'Unselect all'}</Button>\n            </Box>\n\n            <TreeView nodes={nodes} expandedIds={expanded} selectedIds={selected} onExpended={setExpanded} onSelected={setSelected} multiSelect />\n        </Box>;\n}",...MultiSelection.parameters?.docs?.source}}},GmailCloneStyles.parameters={...GmailCloneStyles.parameters,docs:{...GmailCloneStyles.parameters?.docs,source:{originalSource:"() => {\n  const nodes = [{\n    id: '1',\n    label: 'All Mail',\n    icon: 'Mail'\n  }, {\n    id: '2',\n    label: 'Trash',\n    icon: 'Delete'\n  }, {\n    id: '3',\n    label: 'Categories',\n    icon: 'Label',\n    children: [{\n      id: '5',\n      label: 'Social',\n      icon: 'SupervisorAccount',\n      info: '90',\n      color: '#1a73e8',\n      bgColor: '#e8f0fe'\n    }, {\n      id: '6',\n      label: 'Updates',\n      icon: 'Info',\n      info: '2,294',\n      color: '#e3742f',\n      bgColor: '#fcefe3'\n    }, {\n      id: '7',\n      label: 'Forums',\n      icon: 'Forum',\n      info: '3,566',\n      color: '#a250f5',\n      bgColor: '#f3e8fd'\n    }, {\n      id: '8',\n      label: 'Promotions',\n      icon: 'LocalOffer',\n      info: '733',\n      color: '#3c8039',\n      bgColor: '#e6f4ea'\n    }]\n  }, {\n    id: '4',\n    label: 'History',\n    icon: 'Label'\n  }];\n  const [expanded, setExpanded] = React.useState(['3']);\n  const [selected, setSelected] = React.useState([]);\n  return <TreeView nodes={nodes} expandedIds={expanded} selectedIds={selected} onExpended={setExpanded} onSelected={setSelected} TreeItemComponent={LabelIconTreeItem} {...LabelIconTreeItemIcons} />;\n}",...GmailCloneStyles.parameters?.docs?.source}}},IndentBorderStyles.parameters={...IndentBorderStyles.parameters,docs:{...IndentBorderStyles.parameters?.docs,source:{originalSource:"() => {\n  const nodes = [{\n    id: '1',\n    label: 'Main',\n    children: [{\n      id: '2',\n      label: 'Hello'\n    }, {\n      id: '3',\n      label: 'Subtree with children',\n      children: [{\n        id: '6',\n        label: 'Hello'\n      }, {\n        id: '7',\n        label: 'Sub-subtree with children',\n        children: [{\n          id: '9',\n          label: 'Child 1'\n        }, {\n          id: '10',\n          label: 'Child 2'\n        }, {\n          id: '11',\n          label: 'Child 3'\n        }]\n      }, {\n        id: '8',\n        label: 'Hello'\n      }]\n    }, {\n      id: '4',\n      label: 'World'\n    }, {\n      id: '5',\n      label: 'Something something'\n    }]\n  }];\n  const [expanded, setExpanded] = React.useState(['1']);\n  const [selected, setSelected] = React.useState([]);\n  return <TreeView nodes={nodes} expandedIds={expanded} selectedIds={selected} onExpended={setExpanded} onSelected={setSelected} TreeItemComponent={IndentBorderTreeItem} {...IndentBorderTreeItemIcons} />;\n}",...IndentBorderStyles.parameters?.docs?.source}}},CustomItem.parameters={...CustomItem.parameters,docs:{...CustomItem.parameters?.docs,source:{originalSource:"() => {\n  const nodes = [{\n    id: '1',\n    label: 'Main',\n    icon: 'Home',\n    info: 'test',\n    // color: \"red\",\n    // bgColor: \"yellow\",\n    children: [{\n      id: '2',\n      label: 'Hello'\n    }, {\n      id: '3',\n      label: 'Subtree with children',\n      children: [{\n        id: '6',\n        label: 'Hello'\n      }, {\n        id: '7',\n        label: 'Sub-subtree with children',\n        children: [{\n          id: '9',\n          label: 'Child 1'\n        }, {\n          id: '10',\n          label: 'Child 2'\n        }, {\n          id: '11',\n          label: 'Child 3'\n        }]\n      }, {\n        id: '8',\n        label: 'Hello'\n      }]\n    }, {\n      id: '4',\n      label: 'World'\n    }, {\n      id: '5',\n      label: 'Something something'\n    }]\n  }];\n  const [expanded, setExpanded] = React.useState(['1']);\n  const [selected, setSelected] = React.useState([]);\n  return <TreeView nodes={nodes} expandedIds={expanded} selectedIds={selected} onExpended={setExpanded} onSelected={setSelected} TransitionComponent={null} LabelComponent={StyledTreeItemContent} />;\n}",...CustomItem.parameters?.docs?.source}}};const __namedExportsOrder=["Default","BasicTreeView","MultiSelection","GmailCloneStyles","IndentBorderStyles","CustomItem"]},"./src/components/_FIXED/Typography/Typography.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_Text__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/_FIXED/Typography/Text.tsx"),_TextEllipsis__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/_FIXED/Typography/TextEllipsis.tsx");const Typography=props=>[props.showTooltipOnEllipsis,props.onEllipsisChange].some((v=>v))?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_TextEllipsis__WEBPACK_IMPORTED_MODULE_2__.Z,props):react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Text__WEBPACK_IMPORTED_MODULE_1__.Z,props);Typography.defaultProps={align:void 0,alignCenter:void 0,alignJustify:void 0,alignLeft:void 0,alignRight:void 0,autoWidth:!0,bgColor:void 0,bold:void 0,border:void 0,borderStyle:void 0,charsCase:void 0,color:void 0,component:"span",dynamicEllipsis:!0,fullWidth:void 0,gutterBottom:void 0,isEllipsis:!1,italic:void 0,justifyContent:void 0,lineHeight:void 0,link:void 0,monospace:void 0,noWrap:void 0,onEllipsisChange:void 0,paragraph:void 0,rows:void 0,showTooltipOnEllipsis:!0,size:"inherit",strike:void 0,sub:void 0,sup:void 0,textDirection:void 0,tooltip:!1,tooltipPlacement:void 0,underline:void 0,width:void 0};const __WEBPACK_DEFAULT_EXPORT__=Typography;try{Typography.displayName="Typography",Typography.__docgenInfo={description:"",displayName:"Typography",props:{alignCenter:{defaultValue:{value:"undefined"},description:"",name:"alignCenter",required:!1,type:{name:"boolean"}},alignJustify:{defaultValue:{value:"undefined"},description:"",name:"alignJustify",required:!1,type:{name:"boolean"}},alignLeft:{defaultValue:{value:"undefined"},description:"",name:"alignLeft",required:!1,type:{name:"boolean"}},alignRight:{defaultValue:{value:"undefined"},description:"",name:"alignRight",required:!1,type:{name:"boolean"}},autoWidth:{defaultValue:{value:"true"},description:"",name:"autoWidth",required:!1,type:{name:"boolean"}},bgColor:{defaultValue:{value:"undefined"},description:"",name:"bgColor",required:!1,type:{name:"string"}},bold:{defaultValue:{value:"undefined"},description:"",name:"bold",required:!1,type:{name:"string | boolean"}},border:{defaultValue:{value:"undefined"},description:"",name:"border",required:!1,type:{name:"string | boolean"}},charsCase:{defaultValue:{value:"undefined"},description:"",name:"charsCase",required:!1,type:{name:"enum",value:[{value:'"upper"'},{value:'"lower"'},{value:'"capital"'}]}},color:{defaultValue:{value:"undefined"},description:"",name:"color",required:!1,type:{name:"string"}},component:{defaultValue:{value:"span"},description:"",name:"component",required:!1,type:{name:"string"}},fullWidth:{defaultValue:{value:"undefined"},description:"",name:"fullWidth",required:!1,type:{name:"boolean"}},gutterBottom:{defaultValue:{value:"undefined"},description:"",name:"gutterBottom",required:!1,type:{name:"boolean"}},italic:{defaultValue:{value:"undefined"},description:"",name:"italic",required:!1,type:{name:"boolean"}},justifyContent:{defaultValue:{value:"undefined"},description:"",name:"justifyContent",required:!1,type:{name:"string"}},lineHeight:{defaultValue:{value:"undefined"},description:"",name:"lineHeight",required:!1,type:{name:"number"}},link:{defaultValue:{value:"undefined"},description:"",name:"link",required:!1,type:{name:"string"}},monospace:{defaultValue:{value:"undefined"},description:"",name:"monospace",required:!1,type:{name:"boolean"}},paragraph:{defaultValue:{value:"undefined"},description:"",name:"paragraph",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"inherit"},description:"",name:"size",required:!1,type:{name:"string | number"}},strike:{defaultValue:{value:"undefined"},description:"",name:"strike",required:!1,type:{name:"boolean"}},sub:{defaultValue:{value:"undefined"},description:"",name:"sub",required:!1,type:{name:"boolean"}},sup:{defaultValue:{value:"undefined"},description:"",name:"sup",required:!1,type:{name:"boolean"}},textDirection:{defaultValue:{value:"undefined"},description:"",name:"textDirection",required:!1,type:{name:"enum",value:[{value:'"ltr"'},{value:'"rtl"'}]}},tooltip:{defaultValue:{value:"false"},description:"",name:"tooltip",required:!1,type:{name:"string | boolean"}},tooltipPlacement:{defaultValue:{value:"undefined"},description:"",name:"tooltipPlacement",required:!1,type:{name:"enum",value:[{value:'"bottom-end"'},{value:'"bottom-start"'},{value:'"bottom"'},{value:'"left-end"'},{value:'"left-start"'},{value:'"left"'},{value:'"right-end"'},{value:'"right-start"'},{value:'"right"'},{value:'"top-end"'},{value:'"top-start"'},{value:'"top"'}]}},underline:{defaultValue:{value:"undefined"},description:"",name:"underline",required:!1,type:{name:"boolean"}},width:{defaultValue:{value:"undefined"},description:"",name:"width",required:!1,type:{name:"string | number"}},dynamicEllipsis:{defaultValue:{value:"true"},description:"",name:"dynamicEllipsis",required:!1,type:{name:"true"}},noWrap:{defaultValue:{value:"undefined"},description:"",name:"noWrap",required:!1,type:{name:"boolean"}},onEllipsisChange:{defaultValue:{value:"undefined"},description:"",name:"onEllipsisChange",required:!1,type:{name:"(isEllipsis: boolean) => void"}},rows:{defaultValue:{value:"undefined"},description:"",name:"rows",required:!1,type:{name:"number"}},showTooltipOnEllipsis:{defaultValue:{value:"true"},description:"",name:"showTooltipOnEllipsis",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Typography/Typography.tsx#Typography"]={docgenInfo:Typography.__docgenInfo,name:"Typography",path:"src/components/_FIXED/Typography/Typography.tsx#Typography"})}catch(__react_docgen_typescript_loader_error){}}}]);
//# sourceMappingURL=components-TreeView-__stories__-TreeView-stories.b42e2468.iframe.bundle.js.map