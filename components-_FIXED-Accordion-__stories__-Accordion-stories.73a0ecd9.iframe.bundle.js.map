{"version":3,"file":"components-_FIXED-Accordion-__stories__-Accordion-stories.73a0ecd9.iframe.bundle.js","mappings":";AASA;;;;;;;AAQA;;AAQA;;;;;;;;;AASA;;;AAIA;AAOA;;AAGA;ACfA;AAWA;AAOA;;AAEA;AACA;AACA;;;;;AAOA;;AAMA;AAIA;;AAEA;AACA;;AAIA;AAIA;;;;;;;;;;;ACxEA;;;;;AAMA;;;;;AAYA;;;;;AAMA;ACZA;;;AAGA;AACA;AACA;AAuBA","sources":["webpack://mui-simple/./src/components/_FIXED/Accordion/Accordion.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Accordion/Accordion.styled.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styles.tsx","webpack://mui-simple/./src/components/_FIXED/Typography/Typography.styled.tsx"],"sourcesContent":["import { css } from '@mui/material/styles';\nimport type { Theme } from '@mui/material';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nexport function customStyleAccordion(props: { useCustomStyle: boolean; theme: Theme }): SerializedStyles {\n    if (!props.useCustomStyle) return css``;\n    const { theme } = props;\n\n    return css`\n        border: 1px solid ${theme.palette.divider};\n        &:not(:last-child) {\n            border-bottom: 0;\n        }\n        &:before {\n            display: none;\n        }\n    `;\n}\n\nexport function customStyleSummary(props: { useCustomStyle: boolean; theme: Theme }): SerializedStyles {\n    if (!props.useCustomStyle) return css``;\n    const { theme } = props;\n\n    return css`\n        &.MuiAccordionSummary-root {\n            background-color: ${theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, .05)' : 'rgba(0, 0, 0, .03)'};\n\n            flex-direction: row-reverse;\n\n            & .MuiAccordionSummary-expandIconWrapper.Mui-expanded {\n                transform: rotate(90deg);\n            }\n\n            & .MuiAccordionSummary-content {\n                margin-left: ${theme.spacing(1)};\n            }\n        }\n    `;\n}\n\nexport function customStyleDetails(props: { useCustomStyle: boolean; theme: Theme }): SerializedStyles {\n    if (!props.useCustomStyle) return css``;\n\n    const { theme } = props;\n    return css`\n        padding: ${theme.spacing(2)};\n        border-top: 1px solid rgba(0, 0, 0, 0.125);\n    `;\n}\n","import React from 'react';\nimport type { ComponentType } from 'react';\nimport { styled, css } from '@mui/material/styles';\nimport {\n    Accordion as MuiAccordion,\n    AccordionSummary as MuiAccordionSummary,\n    AccordionDetails as MuiAccordionDetails,\n    Box,\n} from '@mui/material';\nimport type {\n    AccordionProps as MuiAccordionProps,\n    AccordionSummaryProps,\n    AccordionDetailsProps,\n    BoxProps,\n} from '@mui/material';\nimport { customStyleAccordion, customStyleDetails, customStyleSummary } from './Accordion.styles';\n\ninterface AccordionStyledPropsType\n    extends Omit<MuiAccordionProps, 'disabled' | 'expanded' | 'onChange' | 'TransitionProps'> {\n    useCustomStyle?: boolean;\n    [key: string]: any;\n}\n\nexport const Accordion: React.FC<AccordionStyledPropsType> = styled(\n    ({ useCustomStyle, ...props }: AccordionStyledPropsType) => (\n        <MuiAccordion {...(useCustomStyle && { disableGutters: true, elevation: 0, square: true })} {...props}>\n            {props.children}\n        </MuiAccordion>\n    ),\n    {\n        shouldForwardProp: (propName: string) => !['useCustomStyle'].includes(propName as string),\n    }\n)`\n    ${customStyleAccordion};\n`;\n\ntype _AccordionSummaryProps = AccordionSummaryProps & {\n    label?: string;\n    bgColor?: string;\n    titleColor?: string;\n    bottomSecondaryLabel?: boolean;\n    [key: string]: any;\n};\n\nexport const AccordionSummary: React.FC<_AccordionSummaryProps> = styled(\n    ({ label, ...props }: _AccordionSummaryProps) => <MuiAccordionSummary {...props} />,\n    {\n        shouldForwardProp: (propName: string) =>\n            !['bottomSecondaryLabel', 'useCustomStyle', 'bgColor', 'titleColor'].includes(propName as string),\n    }\n)`\n    ${customStyleSummary};\n    &.MuiAccordionSummary-root {\n        background-color: ${(props: any) => props.bgColor};\n        color: ${(props: any) => props.titleColor};\n        ${(props: any) =>\n            props.bottomSecondaryLabel\n                ? css`\n                      & > div {\n                          display: flex;\n                          flex-direction: column;\n                      }\n                  `\n                : css``}\n    }\n`;\n\ntype AccordionDetailsStyledPropsType = AccordionDetailsProps & any;\nexport const AccordionDetails = styled(MuiAccordionDetails, {\n    shouldForwardProp: (propName: string) =>\n        !['useCustomStyle', 'disabledContentPadding', 'bgColorDetails'].includes(propName as string),\n})<AccordionDetailsStyledPropsType>`\n    background-color: ${(props: any) => props.bgColorDetails};\n    padding-bottom: 1em;\n    ${customStyleDetails}\n    ${(props: any) =>\n        props.disabledContentPadding\n            ? css`\n                  padding: 0;\n              `\n            : css``}\n` as ComponentType<AccordionDetailsStyledPropsType>;\n\nexport const ShowMoreWrapper = styled(Box)<BoxProps>`\n    display: flex;\n    align-items: center;\n    justify-content: end;\n    padding: 0;\n    margin-bottom: -10px;\n`;\n","import { css } from '@mui/material/styles';\nimport type { SerializedStyles } from '@emotion/serialize';\n\nexport function ellipsisRow1(props): SerializedStyles {\n    if (props.noWrap || props.rows !== 1) return css``;\n\n    return css`\n        text-overflow: ellipsis;\n        white-space: normal;\n        overflow: hidden;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\n\nexport function ellipsisRows(props): SerializedStyles {\n    if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\n        return css``;\n    }\n\n    return css`\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: normal;\n        display: -webkit-box !important;\n        -webkit-line-clamp: ${props.rows};\n        -webkit-box-orient: vertical;\n        & > * {\n            white-space: unset !important;\n        }\n    `;\n}\n","import React from 'react';\nimport type { ComponentType } from 'react';\nimport { Box, Typography as MuiTypography } from '@mui/material';\nimport type { TypographyProps, BoxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport classNames from 'classnames';\n\nimport { ellipsisRow1, ellipsisRows } from './Typography.styles';\nimport { numberToPx } from '../../../utils/helpers';\n\ninterface TypographyBorderProps {\n    autoWidth?: boolean;\n    border?: boolean | string;\n    noWrap?: boolean;\n    rows?: number;\n    width?: string | number;\n    [key: string]: any;\n}\ntype TypographyBorderPropsType = Omit<BoxProps, 'border'> & TypographyBorderProps;\n\nexport const Border = styled(Box, {\n    shouldForwardProp: (propName: string) => !['autoWidth', 'noWrap', 'border', 'rows'].includes(propName as string),\n})<TypographyBorderPropsType>`\n    width: ${(props: any) => numberToPx(props.width) ?? (props.autoWidth ? 'auto' : '100%')};\n    display: flex;\n    align-items: center;\n    border: ${(props: any) => (props.border && typeof props.border === 'boolean' ? '1px solid black' : props.border)};\n    ${ellipsisRows}\n    ${ellipsisRow1}\n` as ComponentType<TypographyBorderPropsType>;\n\ninterface TypographyStyledProps {\n    bgColor?: string;\n    bold?: boolean | string;\n    charsCase?: string;\n    customColor?: string;\n    fontSize?: number | string;\n    italic?: boolean;\n    lineHeight?: string | number;\n    monospace?: boolean;\n    myClassName?: string | string[];\n    strike?: boolean;\n    sub?: boolean;\n    sup?: boolean;\n    underline?: boolean;\n\n    [key: string]: any;\n}\ntype TypographyStyledPropsType = Omit<TypographyProps, 'fontSize' | 'align' | 'border' | 'component'> &\n    TypographyStyledProps;\n\nexport const Typography = styled(\n    ({ className, myClassName, children, ...props }: TypographyStyledPropsType) => (\n        <MuiTypography className={classNames([className, myClassName])} component=\"span\" {...props}>\n            {children}\n        </MuiTypography>\n    ),\n    {\n        shouldForwardProp: (propName: string) =>\n            ![\n                'bgColor',\n                'bold',\n                'charsCase',\n                'customColor',\n                'font',\n                'fontSize',\n                'italic',\n                'lineHeight',\n                'monospace',\n                'strike',\n                'sub',\n                'sup',\n                'textDirection',\n                'textWidth',\n                'underline',\n            ].includes(propName),\n    }\n    // @ts-expect-error\n)<TypographyStyledPropsType>((props) => ({\n    position: 'relative',\n    display: props.display ?? 'unset',\n    color: props.customColor,\n    backgroundColor: props.bgColor,\n    fontWeight: props.bold && typeof props.bold === 'boolean' ? 'bold' : props.bold,\n    fontSize: numberToPx(props.fontSize),\n    fontStyle: props.italic ? 'italic' : undefined,\n    fontFamily: props.font ?? undefined,\n    textDecoration: props.strike ? 'line-through' : props.underline ? 'underline' : undefined,\n    textTransform: { upper: 'uppercase', lower: 'lowercase', capital: 'capitalize' }[props.charsCase],\n    verticalAlign: props.sup ? 'super' : props.sub ? 'sub' : undefined,\n    lineHeight: props.lineHeight,\n    direction: props.textDirection ? `${props.textDirection as string} /* @noflip */` : undefined,\n    whiteSpace: props.noWrap ? 'nowrap' : 'normal',\n    width: props.textWidth ?? 'inherit',\n    ...(props.justifyContent && { justifyContent: props.justifyContent }),\n    ...(props.monospace && { fontFamily: 'monospace' }),\n})) as ComponentType<TypographyStyledPropsType>;\n"],"names":[],"sourceRoot":""}