{"version":3,"file":"components-_FIXED-AppBar-__stories__-AppBar-stories.84fddea0.iframe.bundle.js","mappings":";AAcA;AACA;AAKA;;;AAGA;;AAIA;;;;;;;;AChBA;;;;;;;;;;;;ACAA;;ACJA","sources":["webpack://mui-simple/./src/components/_FIXED/AppBar/AppBar.styled.tsx","webpack://mui-simple/./src/components/_FIXED/FloatingActionButton/FloatingActionButton.styled.tsx","webpack://mui-simple/./src/components/_FIXED/SVGIcon/SVGIcon.styled.tsx","webpack://mui-simple/./src/components/_FIXED/SVGIcon/SVGIcon.tsx"],"sourcesContent":["import type { ComponentType } from 'react';\nimport type { AppBarProps } from '@mui/material';\nimport { AppBar as MuiAppBar, Toolbar as MuiToolbar, Box as MuiBox } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\ninterface AppBarStyledProps {\n    drawerWidth?: number;\n    customColor?: string;\n}\ntype AppBarStyledPropsType = AppBarStyledProps & AppBarProps;\n\nexport const AppBar = styled(MuiAppBar, {\n    shouldForwardProp: (propName) => !['drawerWidth', 'customColor'].includes(propName as string),\n})<AppBarStyledPropsType>`\n    width: calc(100% - ${(props) => props.drawerWidth}px);\n    transition: ${(props) =>\n        props.theme.transitions.create('width', {\n            easing: props.theme.transitions.easing.sharp,\n            duration: props.theme.transitions.duration.enteringScreen,\n        })};\n    margin-left: ${(props) => props.drawerWidth}px;\n\n    &.MuiPaper-root {\n        background-color: ${(props) => props.customColor};\n    }\n` as ComponentType<AppBarStyledPropsType>;\n\nexport const Toolbar = styled(MuiToolbar)`\n    padding: 0 0.5em;\n`;\n\nexport const Box = MuiBox;\n","import { Fab as MuiFab } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const Fab = styled(MuiFab, {\n    shouldForwardProp: (propName) => !['customColor'].includes(propName as string),\n})<{ customColor: string }>`\n    &.MuiButtonBase-root {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 0.5em;\n        background-color: ${(props) => props.customColor};\n\n        &.MuiFab-extended {\n            width: max-content;\n        }\n    }\n`;\n","import { styled } from '@mui/material/styles';\nimport InlineSVG from 'react-inlinesvg';\n\nexport const SVG = styled(InlineSVG, {\n    shouldForwardProp: (propName) => !['color'].includes(propName as string),\n})`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n        ${(props: any) => ({ ...props })}\n    }\n`;\n","import React, { isValidElement } from 'react';\nimport type { PropsWithChildren } from 'react';\nimport MuiIconName from './MuiIconName';\nimport { SVG } from './SVGIcon.styled';\nimport type { SVGIconProps } from '../../decs';\nimport { useCustomColor } from '../../../utils/helpers';\n\nconst SVGIcon: React.FC<PropsWithChildren<SVGIconProps>> = ({\n    children,\n    color,\n    height,\n    iconSrc,\n    muiIconName,\n    size,\n    sx: _sx,\n    width,\n    ...props\n}): React.ReactElement | React.ReactNode => {\n    const [customColor, muiColor] = useCustomColor(color);\n    const iconName = muiIconName || (typeof children === 'string' ? children : undefined);\n    const sx = { display: 'flex', justifyContent: 'center', alignItems: 'center', ..._sx };\n\n    if (children && isValidElement(children)) {\n        return children;\n    }\n\n    return (\n        <MuiIconName\n            name={iconName}\n            color={customColor}\n            width={size ?? width}\n            height={size ?? height}\n            sx={sx}\n            {...props}\n        >\n            {iconSrc ? (\n                <SVG\n                    src={iconSrc}\n                    fill={customColor}\n                    width={size ?? width}\n                    height={size ?? height}\n                    sx={sx}\n                    {...props}\n                />\n            ) : (\n                children\n            )}\n        </MuiIconName>\n    );\n};\n\nSVGIcon.displayName = 'SVGIcon';\n\nexport type { SVGIconProps } from '../../decs';\n\nexport default SVGIcon;\n"],"names":[],"sourceRoot":""}