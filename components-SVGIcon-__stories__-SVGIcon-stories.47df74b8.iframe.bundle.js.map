{"version":3,"file":"components-SVGIcon-__stories__-SVGIcon-stories.47df74b8.iframe.bundle.js","mappings":";;;;;;AAWA;;;ACEA;AAGA;AAIA;;AAEA;;;;AAIA;;;;;;AAMA;;;AAGA;;;AAKA;;AAKA;;;;;AAMA;;;;AAIA;AAGA;AACA;;AAKA;;;ACvBA;;AAGA;;AAxBA;;;;;AAUA;;;;;AAMA;AAhCA;;;;;AAQA;;;;;AAMA;AAmCA;;AAkBA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAIA","sources":["webpack://@hdriel/mui-simple/./src/components/SVGIcon/SVGIcon.styled.tsx","webpack://@hdriel/mui-simple/./src/components/ToggleButtonGroup/ToggleButtonGroup.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Typography/Typography.styled.tsx"],"sourcesContent":["import { styled } from \"@mui/material/styles\";\nimport InlineSVG from \"react-inlinesvg\";\n\nexport const SVG = styled(InlineSVG, {\n  shouldForwardProp: (propName) => ![\"color\"].includes(propName),\n})`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  svg {\n    ${(props) => ({ ...props })}\n  }\n`;\n","import React from \"react\";\nimport { styled, css } from \"@mui/material/styles\";\nimport {\n  ToggleButton as MuiToggleButton,\n  ToggleButtonGroup as MuiToggleButtonGroup,\n  Paper as MuiPaper,\n  alpha,\n  Divider as MuiDivider,\n} from \"@mui/material\";\n\nexport const Divider = styled(({ ...props }) => (\n  <MuiDivider flexItem orientation=\"vertical\" {...props} />\n))`\n  margin: ${(props) => props.theme.spacing(1, 0.5)};\n`;\n\nexport const ToggleButtonGroups = styled(\n  ({ ...props }) => <MuiPaper elevation={0} {...props} />,\n  { shouldForwardProp: (propName) => ![\"fullWidth\"].includes(propName) }\n)`\n  width: ${(props) => (props.fullWidth ? \"100%\" : \"max-content\")};\n  display: flex;\n  border: ${({ theme }) => `1px solid ${theme.palette.divider}`};\n  flex-wrap: wrap;\n\n  & .MuiToggleButtonGroup-grouped {\n    margin: ${(props) => props.theme.spacing(0.5)};\n    border: 0;\n    &.Mui-disabled {\n      border: 0;\n    }\n    &:not(:first-of-type) {\n      border-radius: ${(props) => props.theme.shape.borderRadius};\n    }\n    &:first-of-type {\n      border-radius: ${(props) => props.theme.shape.borderRadius};\n    }\n  }\n`;\n\nexport const ToggleButtonGroup = styled(\n  ({ ...props }) => <MuiToggleButtonGroup {...props} />,\n  { shouldForwardProp: (propName) => ![\"customColor\"].includes(propName) }\n)`\n  & .MuiToggleButton-root:hover {\n    background-color: ${(props) =>\n      props.customColor && alpha(props.customColor, 0.2)};\n  }\n\n  & .Mui-selected,\n  & .MuiTouchRipple-root {\n    color: ${(props) => props.customColor};\n  }\n\n  & .Mui-selected {\n    ${(props) => {\n      const color = props.customColor && alpha(props.customColor, 0.2);\n      return css`\n        background-color: ${color ? `${color} !important` : \"\"};\n      `;\n    }}\n  }\n`;\n\nexport const ToggleButton = styled(\n  ({ value, disabled, disableRipple, onChange, ...props }) => (\n    <MuiToggleButton\n      value={value}\n      disabled={disabled}\n      onChange={onChange}\n      disableRipple={disableRipple}\n      {...props}\n    />\n  )\n)`\n  width: max-content;\n`;\n","import { Box, Typography as MuiTypography } from \"@mui/material\";\nimport { styled, css } from \"@mui/material/styles\";\nimport { numberToPx } from \"../../utils/helpers\";\n\nfunction ellipsisRow1(props) {\n  if (props.noWrap || props.rows !== 1) return css``;\n\n  return css`\n    text-overflow: ellipsis;\n    white-space: normal;\n    overflow: hidden;\n    display: -webkit-box !important;\n    -webkit-line-clamp: ${props.rows};\n    -webkit-box-orient: vertical;\n    & > * {\n      white-space: unset !important;\n    }\n  `;\n}\n\nfunction ellipsisRows(props) {\n  if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\n    return css``;\n  }\n\n  return css`\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: normal;\n    display: -webkit-box !important;\n    -webkit-line-clamp: ${props.rows};\n    -webkit-box-orient: vertical;\n    & > * {\n      white-space: unset !important;\n    }\n  `;\n}\n\nexport const Border = styled(Box, {\n  shouldForwardProp: (propName) => ![\"autoWidth\", \"noWrap\"].includes(propName),\n})`\n  width: ${(props) =>\n    numberToPx(props.width) ?? (props.autoWidth ? \"auto\" : \"100%\")};\n  display: flex;\n  border: ${(props) =>\n    props.border && typeof props.border === \"boolean\"\n      ? \"1px solid black\"\n      : props.border};\n\n  ${ellipsisRows}\n  ${ellipsisRow1}\n`;\n\nexport const Typography = styled(MuiTypography, {\n  shouldForwardProp: (propName) =>\n    ![\n      \"fontSize\",\n      \"customColor\",\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"charsCase\",\n      \"sup\",\n      \"sub\",\n      \"monospace\",\n      \"lineHeight\",\n      \"bgColor\",\n    ].includes(propName),\n})`\n  width: 100%;\n  color: ${(props) => props.customColor};\n  background-color: ${(props) => props.bgColor};\n  font-weight: ${(props) =>\n    props.bold && typeof props.bold === \"boolean\" ? \"bold\" : props.bold};\n\n  font-size: ${(props) => numberToPx(props.fontSize)};\n  font-style: ${(props) => (props.italic ? \"italic\" : undefined)};\n  text-decoration: ${(props) => (props.underline ? \"underline\" : undefined)};\n  text-decoration: ${(props) => (props.strike ? \"line-through\" : undefined)};\n  text-transform: ${(props) =>\n    ({ upper: \"uppercase\", lower: \"lowercase\", capital: \"capitalize\" }[\n      props.charsCase\n    ])};\n  vertical-align: ${(props) =>\n    props.sup ? \"super\" : props.sub ? \"sub\" : undefined};\n  line-height: ${(props) => props.lineHeight};\n  ${(props) =>\n    props.monospace\n      ? css`\n          font-family: monospace;\n        `\n      : undefined};\n  white-space: normal;\n\n  &:has(:not(:empty)) {\n    display: inherit;\n  }\n`;\n"],"names":[],"sourceRoot":""}