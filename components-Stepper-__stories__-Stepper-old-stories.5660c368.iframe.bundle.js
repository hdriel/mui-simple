"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[2072],{"./node_modules/@mui/material/Paper/Paper.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>Paper_Paper});var objectWithoutPropertiesLoose=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),clsx_m=__webpack_require__("./node_modules/clsx/dist/clsx.m.js"),composeClasses=__webpack_require__("./node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js");const styles_getOverlayAlpha=elevation=>{let alphaValue;return alphaValue=elevation<1?5.11916*elevation**2:4.5*Math.log(elevation+1)+2,(alphaValue/100).toFixed(2)};var useThemeProps=__webpack_require__("./node_modules/@mui/material/styles/useThemeProps.js"),generateUtilityClasses=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),generateUtilityClass=__webpack_require__("./node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function getPaperUtilityClass(slot){return(0,generateUtilityClass.Z)("MuiPaper",slot)}(0,generateUtilityClasses.Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const _excluded=["className","component","elevation","square","variant"],PaperRoot=(0,styled.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(props,styles)=>{const{ownerState}=props;return[styles.root,styles[ownerState.variant],!ownerState.square&&styles.rounded,"elevation"===ownerState.variant&&styles[`elevation${ownerState.elevation}`]]}})((({theme,ownerState})=>{var _theme$vars$overlays;return(0,esm_extends.Z)({backgroundColor:(theme.vars||theme).palette.background.paper,color:(theme.vars||theme).palette.text.primary,transition:theme.transitions.create("box-shadow")},!ownerState.square&&{borderRadius:theme.shape.borderRadius},"outlined"===ownerState.variant&&{border:`1px solid ${(theme.vars||theme).palette.divider}`},"elevation"===ownerState.variant&&(0,esm_extends.Z)({boxShadow:(theme.vars||theme).shadows[ownerState.elevation]},!theme.vars&&"dark"===theme.palette.mode&&{backgroundImage:`linear-gradient(${(0,colorManipulator.Fq)("#fff",styles_getOverlayAlpha(ownerState.elevation))}, ${(0,colorManipulator.Fq)("#fff",styles_getOverlayAlpha(ownerState.elevation))})`},theme.vars&&{backgroundImage:null==(_theme$vars$overlays=theme.vars.overlays)?void 0:_theme$vars$overlays[ownerState.elevation]}))})),Paper_Paper=react.forwardRef((function Paper(inProps,ref){const props=(0,useThemeProps.Z)({props:inProps,name:"MuiPaper"}),{className,component="div",elevation=1,square=!1,variant="elevation"}=props,other=(0,objectWithoutPropertiesLoose.Z)(props,_excluded),ownerState=(0,esm_extends.Z)({},props,{component,elevation,square,variant}),classes=(ownerState=>{const{square,elevation,variant,classes}=ownerState,slots={root:["root",variant,!square&&"rounded","elevation"===variant&&`elevation${elevation}`]};return(0,composeClasses.Z)(slots,getPaperUtilityClass,classes)})(ownerState);return(0,jsx_runtime.jsx)(PaperRoot,(0,esm_extends.Z)({as:component,ownerState,className:(0,clsx_m.default)(classes.root,className),ref},other))}))},"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{aD:()=>chunk_AY7I2SME.aD});var chunk_AY7I2SME=__webpack_require__("./node_modules/@storybook/addon-actions/dist/chunk-AY7I2SME.mjs")},"./src/components/Stepper/__stories__/Stepper-old.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomStepper:()=>CustomStepper,Default:()=>Default,QontoCustomStepper:()=>QontoCustomStepper,QontoStepper:()=>QontoStepper,SimpleStepper:()=>SimpleStepper,StepsBottomLabelStepper:()=>StepsBottomLabelStepper,VerticalStepper:()=>VerticalStepper,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@mui/icons-material/esm/AddLocation.js"),_mui_icons_material__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@mui/icons-material/esm/Send.js"),_Stepper__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Stepper/Stepper.tsx"),_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Stepper/Stepper.styled.tsx"),_Stepper_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/Stepper/Stepper.utils.tsx"),_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/components/_FIXED/ToggleButtonGroup/ToggleButtonGroup.tsx"),_FIXED_ToggleButtonGroup_ToggleButtonGroups__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/components/_FIXED/ToggleButtonGroup/ToggleButtonGroups.tsx"),__spreadArray=function(to,from,pack){if(pack||2===arguments.length)for(var ar,i=0,l=from.length;i<l;i++)!ar&&i in from||(ar||(ar=Array.prototype.slice.call(from,0,i)),ar[i]=from[i]);return to.concat(ar||Array.prototype.slice.call(from))};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport { action } from '@storybook/addon-actions';\nimport { AddLocation as AddLocationIcon, Send as SendIcon } from '@mui/icons-material';\nimport Stepper from '../Stepper';\nimport { Typography } from '../Stepper.styled';\nimport { useSimpleStepper } from '../Stepper.utils';\nimport ToggleButtonGroup from '../../_FIXED/ToggleButtonGroup/ToggleButtonGroup';\nimport ToggleButtonGroups from '../../_FIXED/ToggleButtonGroup/ToggleButtonGroups';\nexport default {\n  title: 'Navigation/StepperOld',\n  component: Stepper,\n  decorators: [Story => <div style={{\n    height: '750px',\n    width: '750px',\n    backgroundColor: 'rgba(255,255,255,0.8)',\n    border: '1px solid black',\n    padding: '1em'\n  }}>\n                <Story />\n            </div>]\n};\nconst actions = {\n  onClick: action('onClick')\n};\nconst steps = [{\n  label: 'Select campaign settings',\n  optional: true,\n  error: true\n}, {\n  label: 'Create an ad group',\n  color: 'secondary'\n}, 'Create an ad'];\nexport const Default = () => {\n  return <Stepper {...actions} />;\n};\nexport const SimpleStepper = () => {\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary'\n  }, 'Create an ad'];\n  return <Stepper {...actions} {...stepperProps} steps={steps} onDone={stepperProps.onReset} allCompletedCmp={<Typography sx={{\n    mt: 2,\n    mb: 1\n  }}>All steps completed - you&apos;re finished</Typography>}>\n            <div>Step A</div>\n            <div>Step B</div>\n            <div>Step C</div>\n        </Stepper>;\n};\nexport const StepsBottomLabelStepper = () => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [skipSteps, setSkipSteps] = useState([]);\n  return <Stepper {...actions} steps={steps} stepIndex={activeStep} onReset={index => {\n    setSkipSteps([]);\n    setActiveStep(0);\n  }} onNext={index => {\n    setSkipSteps(a => a.filter(i => i !== index));\n    setActiveStep(index + 1);\n  }} onBack={index => setActiveStep(index - 1)} onSkip={index => {\n    setSkipSteps(a => a.includes(index) ? a : [...a, index]);\n    setActiveStep(index + 1);\n  }} onDone={() => {}} stepsIndexSkipped={skipSteps} stepsBottomLabel allCompletedCmp={<Typography sx={{\n    mt: 2,\n    mb: 1\n  }}>All steps completed - you&apos;re finished</Typography>}>\n            <div>Step A</div>\n            <div>Step B</div>\n            <div>Step C</div>\n        </Stepper>;\n};\nexport const VerticalStepper = () => {\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary'\n  }, 'Create an ad'];\n  return <Stepper {...actions} {...stepperProps} steps={steps} customStyleProps={{\n    fontSize: 25,\n    background: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    lineColor: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    padding: 3,\n    lineWidth: 5,\n    marginContent: 26\n  }} orientation=\"vertical\" allCompletedCmp={<Typography sx={{\n    mt: 2,\n    mb: 1\n  }}>All steps completed - you&apos;re finished</Typography>}>\n            <div>\n                For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                conversions, which networks and geographical locations you want your ads to show on, and more.\n            </div>\n            <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n            <div>\n                Try out different ad text to see what brings in the most customers, and learn how to enhance your ads\n                using features like ad extensions. If you run into any problems with your ads, find out how to tell if\n                they're running and how to resolve approval issues.\n            </div>\n        </Stepper>;\n};\nexport const CustomStepper = () => {\n  const data1 = [{\n    value: 'horizontal',\n    component: 'horizontal'\n  }, {\n    value: 'vertical',\n    component: 'vertical'\n  }];\n  const [orientation, setOrientation] = useState('horizontal');\n  const data2 = [{\n    value: true,\n    component: 'alternative labels'\n  }];\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true,\n    icon: <AddLocationIcon />\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary',\n    icon: <SendIcon />\n  }, 'Create an ad'];\n  const customStyleProps = {\n    fontSize: 25,\n    background: '#D0DD0D',\n    lineColor: '#124962',\n    padding: 3,\n    lineWidth: 5\n  };\n  return <>\n            <ToggleButtonGroups sx={{\n      mb: 4\n    }}>\n                <ToggleButtonGroup value={orientation} exclusive onChange={(event, value) => setOrientation(value)} data={data1} />\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={(event, value) => setStepsBottomLabel(value)} data={data2} />\n            </ToggleButtonGroups>\n\n            <Stepper {...actions} {...stepperProps} steps={steps} stepsBottomLabel={stepsBottomLabel} customStyleProps={customStyleProps} orientation={orientation} allCompletedCmp={<Typography sx={{\n      mt: 2,\n      mb: 1\n    }}>All steps completed - you&apos;re finished</Typography>}>\n                <div>\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\n                </div>\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n                <div>\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\n                    tell if they're running and how to resolve approval issues.\n                </div>\n            </Stepper>\n        </>;\n};\nexport const QontoStepper = () => {\n  const data1 = [{\n    value: 'horizontal',\n    component: 'horizontal'\n  }, {\n    value: 'vertical',\n    component: 'vertical'\n  }];\n  const [orientation, setOrientation] = useState('horizontal');\n  const data2 = [{\n    value: true,\n    component: 'alternative labels'\n  }];\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true,\n    icon: <AddLocationIcon />\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary',\n    icon: <SendIcon />\n  }, 'Create an ad'];\n  return <>\n            <ToggleButtonGroups sx={{\n      mb: 4\n    }}>\n                <ToggleButtonGroup value={orientation} exclusive onChange={value => setOrientation(value)} data={data1} />\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={value => setStepsBottomLabel(value)} data={data2} />\n            </ToggleButtonGroups>\n\n            <Stepper {...actions} {...stepperProps} qontoStyle color=\"secondary\" steps={steps} stepsBottomLabel={stepsBottomLabel} orientation={orientation} allCompletedCmp={<Typography sx={{\n      mt: 2,\n      mb: 1\n    }}>All steps completed - you&apos;re finished</Typography>}>\n                <div>\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\n                </div>\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n                <div>\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\n                    tell if they're running and how to resolve approval issues.\n                </div>\n            </Stepper>\n        </>;\n};\nexport const QontoCustomStepper = () => {\n  const data1 = [{\n    value: 'horizontal',\n    component: 'horizontal'\n  }, {\n    value: 'vertical',\n    component: 'vertical'\n  }];\n  const [orientation, setOrientation] = useState('horizontal');\n  const data2 = [{\n    value: true,\n    component: 'alternative labels'\n  }];\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true,\n    icon: <AddLocationIcon />\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary',\n    icon: <SendIcon />\n  }, 'Create an ad'];\n  const customStyleProps = {\n    fontSize: 35,\n    background: '#D0DD0D',\n    lineColor: '#124962',\n    lineWidth: 6,\n    padding: 10,\n    checkIcon: <SendIcon sx={{\n      fontSize: 35\n    }} />,\n    dotIcon: <AddLocationIcon sx={{\n      fontSize: 35\n    }} />\n  };\n  return <>\n            <ToggleButtonGroups sx={{\n      mb: 4\n    }}>\n                <ToggleButtonGroup value={orientation} exclusive onChange={value => setOrientation(value)} data={data1} />\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={value => setStepsBottomLabel(value)} data={data2} />\n            </ToggleButtonGroups>\n\n            <Stepper {...actions} {...stepperProps} qontoStyle steps={steps} stepsBottomLabel={stepsBottomLabel} customStyleProps={customStyleProps} orientation={orientation} allCompletedCmp={<Typography sx={{\n      mt: 2,\n      mb: 1\n    }}>All steps completed - you&apos;re finished</Typography>}>\n                <div>\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\n                </div>\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n                <div>\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\n                    tell if they're running and how to resolve approval issues.\n                </div>\n            </Stepper>\n        </>;\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <Stepper {...actions} />;\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSimpleStepper.parameters = {\n  ...SimpleStepper.parameters,\n  docs: {\n    ...SimpleStepper.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const stepperProps = useSimpleStepper();\\n  const steps = [{\\n    label: 'Select campaign settings',\\n    optional: true\\n  }, {\\n    label: 'Create an ad group',\\n    color: 'secondary'\\n  }, 'Create an ad'];\\n  return <Stepper {...actions} {...stepperProps} steps={steps} onDone={stepperProps.onReset} allCompletedCmp={<Typography sx={{\\n    mt: 2,\\n    mb: 1\\n  }}>All steps completed - you&apos;re finished</Typography>}>\\n            <div>Step A</div>\\n            <div>Step B</div>\\n            <div>Step C</div>\\n        </Stepper>;\\n}\",\n      ...SimpleStepper.parameters?.docs?.source\n    }\n  }\n};\nStepsBottomLabelStepper.parameters = {\n  ...StepsBottomLabelStepper.parameters,\n  docs: {\n    ...StepsBottomLabelStepper.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const [activeStep, setActiveStep] = useState(0);\\n  const [skipSteps, setSkipSteps] = useState([]);\\n  return <Stepper {...actions} steps={steps} stepIndex={activeStep} onReset={index => {\\n    setSkipSteps([]);\\n    setActiveStep(0);\\n  }} onNext={index => {\\n    setSkipSteps(a => a.filter(i => i !== index));\\n    setActiveStep(index + 1);\\n  }} onBack={index => setActiveStep(index - 1)} onSkip={index => {\\n    setSkipSteps(a => a.includes(index) ? a : [...a, index]);\\n    setActiveStep(index + 1);\\n  }} onDone={() => {}} stepsIndexSkipped={skipSteps} stepsBottomLabel allCompletedCmp={<Typography sx={{\\n    mt: 2,\\n    mb: 1\\n  }}>All steps completed - you&apos;re finished</Typography>}>\\n            <div>Step A</div>\\n            <div>Step B</div>\\n            <div>Step C</div>\\n        </Stepper>;\\n}\",\n      ...StepsBottomLabelStepper.parameters?.docs?.source\n    }\n  }\n};\nVerticalStepper.parameters = {\n  ...VerticalStepper.parameters,\n  docs: {\n    ...VerticalStepper.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const stepperProps = useSimpleStepper();\\n  const steps = [{\\n    label: 'Select campaign settings',\\n    optional: true\\n  }, {\\n    label: 'Create an ad group',\\n    color: 'secondary'\\n  }, 'Create an ad'];\\n  return <Stepper {...actions} {...stepperProps} steps={steps} customStyleProps={{\\n    fontSize: 25,\\n    background: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\\n    lineColor: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\\n    padding: 3,\\n    lineWidth: 5,\\n    marginContent: 26\\n  }} orientation=\\\"vertical\\\" allCompletedCmp={<Typography sx={{\\n    mt: 2,\\n    mb: 1\\n  }}>All steps completed - you&apos;re finished</Typography>}>\\n            <div>\\n                For each ad campaign that you create, you can control how much you're willing to spend on clicks and\\n                conversions, which networks and geographical locations you want your ads to show on, and more.\\n            </div>\\n            <div>An ad group contains one or more ads which target a shared set of keywords.</div>\\n            <div>\\n                Try out different ad text to see what brings in the most customers, and learn how to enhance your ads\\n                using features like ad extensions. If you run into any problems with your ads, find out how to tell if\\n                they're running and how to resolve approval issues.\\n            </div>\\n        </Stepper>;\\n}\",\n      ...VerticalStepper.parameters?.docs?.source\n    }\n  }\n};\nCustomStepper.parameters = {\n  ...CustomStepper.parameters,\n  docs: {\n    ...CustomStepper.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const data1 = [{\\n    value: 'horizontal',\\n    component: 'horizontal'\\n  }, {\\n    value: 'vertical',\\n    component: 'vertical'\\n  }];\\n  const [orientation, setOrientation] = useState('horizontal');\\n  const data2 = [{\\n    value: true,\\n    component: 'alternative labels'\\n  }];\\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\\n  const stepperProps = useSimpleStepper();\\n  const steps = [{\\n    label: 'Select campaign settings',\\n    optional: true,\\n    icon: <AddLocationIcon />\\n  }, {\\n    label: 'Create an ad group',\\n    color: 'secondary',\\n    icon: <SendIcon />\\n  }, 'Create an ad'];\\n  const customStyleProps = {\\n    fontSize: 25,\\n    background: '#D0DD0D',\\n    lineColor: '#124962',\\n    padding: 3,\\n    lineWidth: 5\\n  };\\n  return <>\\n            <ToggleButtonGroups sx={{\\n      mb: 4\\n    }}>\\n                <ToggleButtonGroup value={orientation} exclusive onChange={(event, value) => setOrientation(value)} data={data1} />\\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={(event, value) => setStepsBottomLabel(value)} data={data2} />\\n            </ToggleButtonGroups>\\n\\n            <Stepper {...actions} {...stepperProps} steps={steps} stepsBottomLabel={stepsBottomLabel} customStyleProps={customStyleProps} orientation={orientation} allCompletedCmp={<Typography sx={{\\n      mt: 2,\\n      mb: 1\\n    }}>All steps completed - you&apos;re finished</Typography>}>\\n                <div>\\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\\n                </div>\\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\\n                <div>\\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\\n                    tell if they're running and how to resolve approval issues.\\n                </div>\\n            </Stepper>\\n        </>;\\n}\",\n      ...CustomStepper.parameters?.docs?.source\n    }\n  }\n};\nQontoStepper.parameters = {\n  ...QontoStepper.parameters,\n  docs: {\n    ...QontoStepper.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const data1 = [{\\n    value: 'horizontal',\\n    component: 'horizontal'\\n  }, {\\n    value: 'vertical',\\n    component: 'vertical'\\n  }];\\n  const [orientation, setOrientation] = useState('horizontal');\\n  const data2 = [{\\n    value: true,\\n    component: 'alternative labels'\\n  }];\\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\\n  const stepperProps = useSimpleStepper();\\n  const steps = [{\\n    label: 'Select campaign settings',\\n    optional: true,\\n    icon: <AddLocationIcon />\\n  }, {\\n    label: 'Create an ad group',\\n    color: 'secondary',\\n    icon: <SendIcon />\\n  }, 'Create an ad'];\\n  return <>\\n            <ToggleButtonGroups sx={{\\n      mb: 4\\n    }}>\\n                <ToggleButtonGroup value={orientation} exclusive onChange={value => setOrientation(value)} data={data1} />\\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={value => setStepsBottomLabel(value)} data={data2} />\\n            </ToggleButtonGroups>\\n\\n            <Stepper {...actions} {...stepperProps} qontoStyle color=\\\"secondary\\\" steps={steps} stepsBottomLabel={stepsBottomLabel} orientation={orientation} allCompletedCmp={<Typography sx={{\\n      mt: 2,\\n      mb: 1\\n    }}>All steps completed - you&apos;re finished</Typography>}>\\n                <div>\\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\\n                </div>\\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\\n                <div>\\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\\n                    tell if they're running and how to resolve approval issues.\\n                </div>\\n            </Stepper>\\n        </>;\\n}\",\n      ...QontoStepper.parameters?.docs?.source\n    }\n  }\n};\nQontoCustomStepper.parameters = {\n  ...QontoCustomStepper.parameters,\n  docs: {\n    ...QontoCustomStepper.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const data1 = [{\\n    value: 'horizontal',\\n    component: 'horizontal'\\n  }, {\\n    value: 'vertical',\\n    component: 'vertical'\\n  }];\\n  const [orientation, setOrientation] = useState('horizontal');\\n  const data2 = [{\\n    value: true,\\n    component: 'alternative labels'\\n  }];\\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\\n  const stepperProps = useSimpleStepper();\\n  const steps = [{\\n    label: 'Select campaign settings',\\n    optional: true,\\n    icon: <AddLocationIcon />\\n  }, {\\n    label: 'Create an ad group',\\n    color: 'secondary',\\n    icon: <SendIcon />\\n  }, 'Create an ad'];\\n  const customStyleProps = {\\n    fontSize: 35,\\n    background: '#D0DD0D',\\n    lineColor: '#124962',\\n    lineWidth: 6,\\n    padding: 10,\\n    checkIcon: <SendIcon sx={{\\n      fontSize: 35\\n    }} />,\\n    dotIcon: <AddLocationIcon sx={{\\n      fontSize: 35\\n    }} />\\n  };\\n  return <>\\n            <ToggleButtonGroups sx={{\\n      mb: 4\\n    }}>\\n                <ToggleButtonGroup value={orientation} exclusive onChange={value => setOrientation(value)} data={data1} />\\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={value => setStepsBottomLabel(value)} data={data2} />\\n            </ToggleButtonGroups>\\n\\n            <Stepper {...actions} {...stepperProps} qontoStyle steps={steps} stepsBottomLabel={stepsBottomLabel} customStyleProps={customStyleProps} orientation={orientation} allCompletedCmp={<Typography sx={{\\n      mt: 2,\\n      mb: 1\\n    }}>All steps completed - you&apos;re finished</Typography>}>\\n                <div>\\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\\n                </div>\\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\\n                <div>\\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\\n                    tell if they're running and how to resolve approval issues.\\n                </div>\\n            </Stepper>\\n        </>;\\n}\",\n      ...QontoCustomStepper.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{default:{startLoc:{col:23,line:33},endLoc:{col:1,line:35},startBody:{col:23,line:33},endBody:{col:1,line:35}},"simple-stepper":{startLoc:{col:29,line:36},endLoc:{col:1,line:53},startBody:{col:29,line:36},endBody:{col:1,line:53}},"steps-bottom-label-stepper":{startLoc:{col:39,line:54},endLoc:{col:1,line:74},startBody:{col:39,line:54},endBody:{col:1,line:74}},"vertical-stepper":{startLoc:{col:31,line:75},endLoc:{col:1,line:106},startBody:{col:31,line:75},endBody:{col:1,line:106}},"custom-stepper":{startLoc:{col:29,line:107},endLoc:{col:1,line:162},startBody:{col:29,line:107},endBody:{col:1,line:162}},"qonto-stepper":{startLoc:{col:28,line:163},endLoc:{col:1,line:211},startBody:{col:28,line:163},endBody:{col:1,line:211}},"qonto-custom-stepper":{startLoc:{col:34,line:212},endLoc:{col:1,line:273},startBody:{col:34,line:212},endBody:{col:1,line:273}}}}},title:"Navigation/StepperOld",component:_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,decorators:[function(Story){return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{height:"750px",width:"750px",backgroundColor:"rgba(255,255,255,0.8)",border:"1px solid black",padding:"1em"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null))}]};var actions={onClick:(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_1__.aD)("onClick")},steps=[{label:"Select campaign settings",optional:!0,error:!0},{label:"Create an ad group",color:"secondary"},"Create an ad"],Default=function(){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,actions)};Default.displayName="Default";var SimpleStepper=function(){var stepperProps=(0,_Stepper_utils__WEBPACK_IMPORTED_MODULE_4__.X)();return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},actions,stepperProps,{steps:[{label:"Select campaign settings",optional:!0},{label:"Create an ad group",color:"secondary"},"Create an ad"],onDone:stepperProps.onReset,allCompletedCmp:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__.ZT,{sx:{mt:2,mb:1}},"All steps completed - you're finished")}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Step A"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Step B"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Step C"))};SimpleStepper.displayName="SimpleStepper";var StepsBottomLabelStepper=function(){var _a=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0),activeStep=_a[0],setActiveStep=_a[1],_b=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),skipSteps=_b[0],setSkipSteps=_b[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},actions,{steps,stepIndex:activeStep,onReset:function(index){setSkipSteps([]),setActiveStep(0)},onNext:function(index){setSkipSteps((function(a){return a.filter((function(i){return i!==index}))})),setActiveStep(index+1)},onBack:function(index){return setActiveStep(index-1)},onSkip:function(index){setSkipSteps((function(a){return a.includes(index)?a:__spreadArray(__spreadArray([],a,!0),[index],!1)})),setActiveStep(index+1)},onDone:function(){},stepsIndexSkipped:skipSteps,stepsBottomLabel:!0,allCompletedCmp:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__.ZT,{sx:{mt:2,mb:1}},"All steps completed - you're finished")}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Step A"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Step B"),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Step C"))};StepsBottomLabelStepper.displayName="StepsBottomLabelStepper";var VerticalStepper=function(){var stepperProps=(0,_Stepper_utils__WEBPACK_IMPORTED_MODULE_4__.X)();return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},actions,stepperProps,{steps:[{label:"Select campaign settings",optional:!0},{label:"Create an ad group",color:"secondary"},"Create an ad"],customStyleProps:{fontSize:25,background:"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)",lineColor:"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)",padding:3,lineWidth:5,marginContent:26},orientation:"vertical",allCompletedCmp:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__.ZT,{sx:{mt:2,mb:1}},"All steps completed - you're finished")}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"For each ad campaign that you create, you can control how much you're willing to spend on clicks and conversions, which networks and geographical locations you want your ads to show on, and more."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"An ad group contains one or more ads which target a shared set of keywords."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Try out different ad text to see what brings in the most customers, and learn how to enhance your ads using features like ad extensions. If you run into any problems with your ads, find out how to tell if they're running and how to resolve approval issues."))};VerticalStepper.displayName="VerticalStepper";var CustomStepper=function(){var _a=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("horizontal"),orientation=_a[0],setOrientation=_a[1],_b=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),stepsBottomLabel=_b[0],setStepsBottomLabel=_b[1],stepperProps=(0,_Stepper_utils__WEBPACK_IMPORTED_MODULE_4__.X)(),steps=[{label:"Select campaign settings",optional:!0,icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__.Z,null)},{label:"Create an ad group",color:"secondary",icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_8__.Z,null)},"Create an ad"];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroups__WEBPACK_IMPORTED_MODULE_6__.Z,{sx:{mb:4}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__.Z,{value:orientation,exclusive:!0,onChange:function(event,value){return setOrientation(value)},data:[{value:"horizontal",component:"horizontal"},{value:"vertical",component:"vertical"}]}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__.Z,{value:stepsBottomLabel,exclusive:!0,onChange:function(event,value){return setStepsBottomLabel(value)},data:[{value:!0,component:"alternative labels"}]})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},actions,stepperProps,{steps,stepsBottomLabel,customStyleProps:{fontSize:25,background:"#D0DD0D",lineColor:"#124962",padding:3,lineWidth:5},orientation,allCompletedCmp:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__.ZT,{sx:{mt:2,mb:1}},"All steps completed - you're finished")}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"For each ad campaign that you create, you can control how much you're willing to spend on clicks and conversions, which networks and geographical locations you want your ads to show on, and more."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"An ad group contains one or more ads which target a shared set of keywords."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Try out different ad text to see what brings in the most customers, and learn how to enhance your ads using features like ad extensions. If you run into any problems with your ads, find out how to tell if they're running and how to resolve approval issues.")))},QontoStepper=function(){var _a=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("horizontal"),orientation=_a[0],setOrientation=_a[1],_b=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),stepsBottomLabel=_b[0],setStepsBottomLabel=_b[1],stepperProps=(0,_Stepper_utils__WEBPACK_IMPORTED_MODULE_4__.X)(),steps=[{label:"Select campaign settings",optional:!0,icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__.Z,null)},{label:"Create an ad group",color:"secondary",icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_8__.Z,null)},"Create an ad"];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroups__WEBPACK_IMPORTED_MODULE_6__.Z,{sx:{mb:4}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__.Z,{value:orientation,exclusive:!0,onChange:function(value){return setOrientation(value)},data:[{value:"horizontal",component:"horizontal"},{value:"vertical",component:"vertical"}]}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__.Z,{value:stepsBottomLabel,exclusive:!0,onChange:function(value){return setStepsBottomLabel(value)},data:[{value:!0,component:"alternative labels"}]})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},actions,stepperProps,{qontoStyle:!0,color:"secondary",steps,stepsBottomLabel,orientation,allCompletedCmp:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__.ZT,{sx:{mt:2,mb:1}},"All steps completed - you're finished")}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"For each ad campaign that you create, you can control how much you're willing to spend on clicks and conversions, which networks and geographical locations you want your ads to show on, and more."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"An ad group contains one or more ads which target a shared set of keywords."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Try out different ad text to see what brings in the most customers, and learn how to enhance your ads using features like ad extensions. If you run into any problems with your ads, find out how to tell if they're running and how to resolve approval issues.")))},QontoCustomStepper=function(){var _a=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("horizontal"),orientation=_a[0],setOrientation=_a[1],_b=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),stepsBottomLabel=_b[0],setStepsBottomLabel=_b[1],stepperProps=(0,_Stepper_utils__WEBPACK_IMPORTED_MODULE_4__.X)(),steps=[{label:"Select campaign settings",optional:!0,icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__.Z,null)},{label:"Create an ad group",color:"secondary",icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_8__.Z,null)},"Create an ad"],customStyleProps={fontSize:35,background:"#D0DD0D",lineColor:"#124962",lineWidth:6,padding:10,checkIcon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_8__.Z,{sx:{fontSize:35}}),dotIcon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_icons_material__WEBPACK_IMPORTED_MODULE_7__.Z,{sx:{fontSize:35}})};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroups__WEBPACK_IMPORTED_MODULE_6__.Z,{sx:{mb:4}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__.Z,{value:orientation,exclusive:!0,onChange:function(value){return setOrientation(value)},data:[{value:"horizontal",component:"horizontal"},{value:"vertical",component:"vertical"}]}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_FIXED_ToggleButtonGroup_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_5__.Z,{value:stepsBottomLabel,exclusive:!0,onChange:function(value){return setStepsBottomLabel(value)},data:[{value:!0,component:"alternative labels"}]})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper__WEBPACK_IMPORTED_MODULE_2__.Z,_extends({},actions,stepperProps,{qontoStyle:!0,steps,stepsBottomLabel,customStyleProps,orientation,allCompletedCmp:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Stepper_styled__WEBPACK_IMPORTED_MODULE_3__.ZT,{sx:{mt:2,mb:1}},"All steps completed - you're finished")}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"For each ad campaign that you create, you can control how much you're willing to spend on clicks and conversions, which networks and geographical locations you want your ads to show on, and more."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"An ad group contains one or more ads which target a shared set of keywords."),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,"Try out different ad text to see what brings in the most customers, and learn how to enhance your ads using features like ad extensions. If you run into any problems with your ads, find out how to tell if they're running and how to resolve approval issues.")))};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{},{source:_objectSpread({originalSource:"() => {\n  return <Stepper {...actions} />;\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),SimpleStepper.parameters=_objectSpread(_objectSpread({},SimpleStepper.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_d=SimpleStepper.parameters)||void 0===_d?void 0:_d.docs),{},{source:_objectSpread({originalSource:"() => {\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary'\n  }, 'Create an ad'];\n  return <Stepper {...actions} {...stepperProps} steps={steps} onDone={stepperProps.onReset} allCompletedCmp={<Typography sx={{\n    mt: 2,\n    mb: 1\n  }}>All steps completed - you&apos;re finished</Typography>}>\n            <div>Step A</div>\n            <div>Step B</div>\n            <div>Step C</div>\n        </Stepper>;\n}"},null===(_f=null===(_e=SimpleStepper.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),StepsBottomLabelStepper.parameters=_objectSpread(_objectSpread({},StepsBottomLabelStepper.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_g=StepsBottomLabelStepper.parameters)||void 0===_g?void 0:_g.docs),{},{source:_objectSpread({originalSource:"() => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [skipSteps, setSkipSteps] = useState([]);\n  return <Stepper {...actions} steps={steps} stepIndex={activeStep} onReset={index => {\n    setSkipSteps([]);\n    setActiveStep(0);\n  }} onNext={index => {\n    setSkipSteps(a => a.filter(i => i !== index));\n    setActiveStep(index + 1);\n  }} onBack={index => setActiveStep(index - 1)} onSkip={index => {\n    setSkipSteps(a => a.includes(index) ? a : [...a, index]);\n    setActiveStep(index + 1);\n  }} onDone={() => {}} stepsIndexSkipped={skipSteps} stepsBottomLabel allCompletedCmp={<Typography sx={{\n    mt: 2,\n    mb: 1\n  }}>All steps completed - you&apos;re finished</Typography>}>\n            <div>Step A</div>\n            <div>Step B</div>\n            <div>Step C</div>\n        </Stepper>;\n}"},null===(_j=null===(_h=StepsBottomLabelStepper.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),VerticalStepper.parameters=_objectSpread(_objectSpread({},VerticalStepper.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_k=VerticalStepper.parameters)||void 0===_k?void 0:_k.docs),{},{source:_objectSpread({originalSource:"() => {\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary'\n  }, 'Create an ad'];\n  return <Stepper {...actions} {...stepperProps} steps={steps} customStyleProps={{\n    fontSize: 25,\n    background: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    lineColor: 'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\n    padding: 3,\n    lineWidth: 5,\n    marginContent: 26\n  }} orientation=\"vertical\" allCompletedCmp={<Typography sx={{\n    mt: 2,\n    mb: 1\n  }}>All steps completed - you&apos;re finished</Typography>}>\n            <div>\n                For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                conversions, which networks and geographical locations you want your ads to show on, and more.\n            </div>\n            <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n            <div>\n                Try out different ad text to see what brings in the most customers, and learn how to enhance your ads\n                using features like ad extensions. If you run into any problems with your ads, find out how to tell if\n                they're running and how to resolve approval issues.\n            </div>\n        </Stepper>;\n}"},null===(_m=null===(_l=VerticalStepper.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),CustomStepper.parameters=_objectSpread(_objectSpread({},CustomStepper.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_o=CustomStepper.parameters)||void 0===_o?void 0:_o.docs),{},{source:_objectSpread({originalSource:"() => {\n  const data1 = [{\n    value: 'horizontal',\n    component: 'horizontal'\n  }, {\n    value: 'vertical',\n    component: 'vertical'\n  }];\n  const [orientation, setOrientation] = useState('horizontal');\n  const data2 = [{\n    value: true,\n    component: 'alternative labels'\n  }];\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true,\n    icon: <AddLocationIcon />\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary',\n    icon: <SendIcon />\n  }, 'Create an ad'];\n  const customStyleProps = {\n    fontSize: 25,\n    background: '#D0DD0D',\n    lineColor: '#124962',\n    padding: 3,\n    lineWidth: 5\n  };\n  return <>\n            <ToggleButtonGroups sx={{\n      mb: 4\n    }}>\n                <ToggleButtonGroup value={orientation} exclusive onChange={(event, value) => setOrientation(value)} data={data1} />\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={(event, value) => setStepsBottomLabel(value)} data={data2} />\n            </ToggleButtonGroups>\n\n            <Stepper {...actions} {...stepperProps} steps={steps} stepsBottomLabel={stepsBottomLabel} customStyleProps={customStyleProps} orientation={orientation} allCompletedCmp={<Typography sx={{\n      mt: 2,\n      mb: 1\n    }}>All steps completed - you&apos;re finished</Typography>}>\n                <div>\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\n                </div>\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n                <div>\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\n                    tell if they're running and how to resolve approval issues.\n                </div>\n            </Stepper>\n        </>;\n}"},null===(_q=null===(_p=CustomStepper.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),QontoStepper.parameters=_objectSpread(_objectSpread({},QontoStepper.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_r=QontoStepper.parameters)||void 0===_r?void 0:_r.docs),{},{source:_objectSpread({originalSource:"() => {\n  const data1 = [{\n    value: 'horizontal',\n    component: 'horizontal'\n  }, {\n    value: 'vertical',\n    component: 'vertical'\n  }];\n  const [orientation, setOrientation] = useState('horizontal');\n  const data2 = [{\n    value: true,\n    component: 'alternative labels'\n  }];\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true,\n    icon: <AddLocationIcon />\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary',\n    icon: <SendIcon />\n  }, 'Create an ad'];\n  return <>\n            <ToggleButtonGroups sx={{\n      mb: 4\n    }}>\n                <ToggleButtonGroup value={orientation} exclusive onChange={value => setOrientation(value)} data={data1} />\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={value => setStepsBottomLabel(value)} data={data2} />\n            </ToggleButtonGroups>\n\n            <Stepper {...actions} {...stepperProps} qontoStyle color=\"secondary\" steps={steps} stepsBottomLabel={stepsBottomLabel} orientation={orientation} allCompletedCmp={<Typography sx={{\n      mt: 2,\n      mb: 1\n    }}>All steps completed - you&apos;re finished</Typography>}>\n                <div>\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\n                </div>\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n                <div>\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\n                    tell if they're running and how to resolve approval issues.\n                </div>\n            </Stepper>\n        </>;\n}"},null===(_t=null===(_s=QontoStepper.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),QontoCustomStepper.parameters=_objectSpread(_objectSpread({},QontoCustomStepper.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_u=QontoCustomStepper.parameters)||void 0===_u?void 0:_u.docs),{},{source:_objectSpread({originalSource:"() => {\n  const data1 = [{\n    value: 'horizontal',\n    component: 'horizontal'\n  }, {\n    value: 'vertical',\n    component: 'vertical'\n  }];\n  const [orientation, setOrientation] = useState('horizontal');\n  const data2 = [{\n    value: true,\n    component: 'alternative labels'\n  }];\n  const [stepsBottomLabel, setStepsBottomLabel] = useState(true);\n  const stepperProps = useSimpleStepper();\n  const steps = [{\n    label: 'Select campaign settings',\n    optional: true,\n    icon: <AddLocationIcon />\n  }, {\n    label: 'Create an ad group',\n    color: 'secondary',\n    icon: <SendIcon />\n  }, 'Create an ad'];\n  const customStyleProps = {\n    fontSize: 35,\n    background: '#D0DD0D',\n    lineColor: '#124962',\n    lineWidth: 6,\n    padding: 10,\n    checkIcon: <SendIcon sx={{\n      fontSize: 35\n    }} />,\n    dotIcon: <AddLocationIcon sx={{\n      fontSize: 35\n    }} />\n  };\n  return <>\n            <ToggleButtonGroups sx={{\n      mb: 4\n    }}>\n                <ToggleButtonGroup value={orientation} exclusive onChange={value => setOrientation(value)} data={data1} />\n                <ToggleButtonGroup value={stepsBottomLabel} exclusive onChange={value => setStepsBottomLabel(value)} data={data2} />\n            </ToggleButtonGroups>\n\n            <Stepper {...actions} {...stepperProps} qontoStyle steps={steps} stepsBottomLabel={stepsBottomLabel} customStyleProps={customStyleProps} orientation={orientation} allCompletedCmp={<Typography sx={{\n      mt: 2,\n      mb: 1\n    }}>All steps completed - you&apos;re finished</Typography>}>\n                <div>\n                    For each ad campaign that you create, you can control how much you're willing to spend on clicks and\n                    conversions, which networks and geographical locations you want your ads to show on, and more.\n                </div>\n                <div>An ad group contains one or more ads which target a shared set of keywords.</div>\n                <div>\n                    Try out different ad text to see what brings in the most customers, and learn how to enhance your\n                    ads using features like ad extensions. If you run into any problems with your ads, find out how to\n                    tell if they're running and how to resolve approval issues.\n                </div>\n            </Stepper>\n        </>;\n}"},null===(_w=null===(_v=QontoCustomStepper.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})});var __namedExportsOrder=["Default","SimpleStepper","StepsBottomLabelStepper","VerticalStepper","CustomStepper","QontoStepper","QontoCustomStepper"]}}]);