"use strict";(self.webpackChunk_hdriel_mui_simple=self.webpackChunk_hdriel_mui_simple||[]).push([[2719],{"./src/components/Badge/__stories__/Badge.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AnchorPosition:()=>AnchorPosition,Default:()=>Default,Hide:()=>Hide,Max99:()=>Max99,Overlap:()=>Overlap,ShowZero:()=>ShowZero,ThemedAndColored:()=>ThemedAndColored,Variant:()=>Variant,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Badge_stories});var react=__webpack_require__("./node_modules/react/index.js"),Mail=__webpack_require__("./node_modules/@mui/icons-material/esm/Mail.js"),Stack=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),Button=__webpack_require__("./node_modules/@mui/material/Button/Button.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),Badge=__webpack_require__("./node_modules/@mui/material/Badge/Badge.js");const Badge_styled_Badge=(0,__webpack_require__("./node_modules/@mui/material/styles/styled.js").ZP)(Badge.Z,{shouldForwardProp:propName=>!["customColor"].includes(propName)})`
  & .MuiBadge-badge {
    border: 1.5px solid ${props=>props.theme.palette.background.paper};
    background-color: ${props=>props.customColor};
  }
`;try{Badge_styled_Badge.displayName="Badge",Badge_styled_Badge.__docgenInfo={description:"",displayName:"Badge",props:{anchorOrigin:{defaultValue:{value:"{\nvertical: 'top',\nhorizontal: 'right',\n}"},description:"The anchor of the badge.",name:"anchorOrigin",required:!1,type:{name:"BadgeOrigin"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<BadgeClasses> & Partial<ClassNameMap<never>>"}},className:{defaultValue:null,description:"@ignore",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:{value:"'default'"},description:"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).",name:"color",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"primary"'},{value:'"error"'},{value:'"success"'},{value:'"warning"'},{value:'"info"'},{value:'"secondary"'}]}},componentsProps:{defaultValue:{value:"{}"},description:"The extra props for the slot components.\nYou can override the existing props or add new ones.\n\nThis prop is an alias for the `slotProps` prop.\nIt's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.",name:"componentsProps",required:!1,type:{name:'{ root?: SlotComponentProps<"span", BadgeRootSlotPropsOverrides, { badgeContent: ReactNode; children?: ReactNode; invisible: boolean; max: number; slotProps?: ...; slots?: BadgeSlots; showZero: boolean; }>; badge?: SlotComponentProps<...>; }'}},components:{defaultValue:{value:"{}"},description:"The components used for each slot inside.\n\nThis prop is an alias for the `slots` prop.\nIt's recommended to use the `slots` prop instead.",name:"components",required:!1,type:{name:"{ Root?: ElementType<any>; Badge?: ElementType<any>; }"}},overlap:{defaultValue:{value:"'rectangular'"},description:"Wrapped shape the badge should overlap.",name:"overlap",required:!1,type:{name:"enum",value:[{value:'"circular"'},{value:'"rectangular"'}]}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},variant:{defaultValue:{value:"'standard'"},description:"The variant to use.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"standard"'},{value:'"dot"'}]}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLSpanElement>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Badge/Badge.styled.tsx#Badge"]={docgenInfo:Badge_styled_Badge.__docgenInfo,name:"Badge",path:"src/components/Badge/Badge.styled.tsx#Badge"})}catch(__react_docgen_typescript_loader_error){}var helpers=__webpack_require__("./src/utils/helpers.ts");const _excluded=["variant","color","content","hide","showZero","max","overlap","vertical","horizontal"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function Badge_Badge(_ref){let{variant,color,content,hide,showZero,max,overlap,vertical,horizontal}=_ref,props=_objectWithoutProperties(_ref,_excluded);const[customColor,muiColor]=(0,helpers.Ek)(color);return react.createElement(Badge_styled_Badge,_extends({color:muiColor,customColor:muiColor?void 0:customColor,badgeContent:content,variant,invisible:hide,showZero,max,overlap,anchorOrigin:(vertical||horizontal)&&{vertical:vertical??"top",horizontal:horizontal??"right"}},props))}Badge_Badge.displayName="Badge",Badge_Badge.propTypes={color:prop_types_default().string,content:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().number]),variant:prop_types_default().oneOf(["dot"]),hide:prop_types_default().bool,showZero:prop_types_default().bool,max:prop_types_default().number,overlap:prop_types_default().oneOf(["circular"]),vertical:prop_types_default().oneOf(["top","bottom"]),horizontal:prop_types_default().oneOf(["right","left"])},Badge_Badge.defaultProps={color:void 0,content:0,variant:void 0,hide:void 0,showZero:void 0,max:void 0,overlap:void 0,vertical:void 0,horizontal:void 0};try{Badge_Badge.displayName="Badge",Badge_Badge.__docgenInfo={description:"",displayName:"Badge",props:{variant:{defaultValue:{value:"undefined"},description:"",name:"variant",required:!1,type:{name:"any"}},color:{defaultValue:{value:"undefined"},description:"",name:"color",required:!1,type:{name:"any"}},content:{defaultValue:{value:"0"},description:"",name:"content",required:!1,type:{name:"any"}},hide:{defaultValue:{value:"undefined"},description:"",name:"hide",required:!1,type:{name:"any"}},showZero:{defaultValue:{value:"undefined"},description:"",name:"showZero",required:!1,type:{name:"any"}},max:{defaultValue:{value:"undefined"},description:"",name:"max",required:!1,type:{name:"any"}},overlap:{defaultValue:{value:"undefined"},description:"",name:"overlap",required:!1,type:{name:"any"}},vertical:{defaultValue:{value:"undefined"},description:"",name:"vertical",required:!1,type:{name:"any"}},horizontal:{defaultValue:{value:"undefined"},description:"",name:"horizontal",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Badge/Badge.tsx#Badge"]={docgenInfo:Badge_Badge.__docgenInfo,name:"Badge",path:"src/components/Badge/Badge.tsx#Badge"})}catch(__react_docgen_typescript_loader_error){}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function Badge_stories_extends(){return Badge_stories_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},Badge_stories_extends.apply(this,arguments)}const Badge_stories={parameters:{storySource:{source:'import React, { useState } from "react";\nimport { Mail as MainIcon } from "@mui/icons-material";\nimport { Stack, Button, Box } from "@mui/material";\nimport Badge from "../Badge";\nexport default {\n  title: "Data-Display/Badge",\n  component: Badge\n};\nconst actions = {};\nexport const Default = () => {\n  return <Badge {...actions}>\r\n      <MainIcon />\r\n    </Badge>;\n};\nexport const ThemedAndColored = () => {\n  return <Stack direction="row" spacing={3}>\r\n      {[undefined, "primary", "secondary", "info", "success", "warning", "error", "#d05e00"].map((color, index) => <Badge key={index} {...actions} content={1} color={color}>\r\n          <MainIcon />\r\n        </Badge>)}\r\n    </Stack>;\n};\nexport const Variant = () => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={"b"} color="secondary">\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={"b"} color="secondary" variant="dot">\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n};\nexport const Hide = () => {\n  const [hide, setHide] = useState(false);\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Button color="secondary" onClick={() => setHide(h => !h)}>\r\n        {hide ? "show" : "hide"}\r\n      </Button>\r\n      <Badge {...actions} content={"b"} color="secondary" hide={hide}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} color="secondary" hide={hide}>\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n};\nexport const ShowZero = () => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={0} color="secondary" showZero={false}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={0} color="secondary" showZero={true}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={0} color="secondary">\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n};\nexport const Max99 = () => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={9}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={99}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={999}>\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n};\nconst shapeStyles = {\n  bgcolor: "secondary.main",\n  width: 40,\n  height: 40\n};\nconst shapeCircleStyles = {\n  borderRadius: "50%"\n};\nconst rectangle = <Box component="span" sx={shapeStyles} />;\nconst circle = <Box component="span" sx={{\n  ...shapeStyles,\n  ...shapeCircleStyles\n}} />;\nexport const Overlap = () => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={" "}>\r\n        {rectangle}\r\n      </Badge>\r\n      <Badge {...actions} content={" "} variant="dot">\r\n        {rectangle}\r\n      </Badge>\r\n      <Badge {...actions} content={" "} overlap={"circular"}>\r\n        {circle}\r\n      </Badge>\r\n      <Badge {...actions} content={" "} overlap={"circular"} variant="dot">\r\n        {circle}\r\n      </Badge>\r\n    </Stack>;\n};\nexport const AnchorPosition = () => {\n  return <Stack direction="column" spacing={3} alignItems={"center"}>\r\n      <Stack direction="row" spacing={5} alignItems={"center"}>\r\n        <Badge {...actions} content={"T"} vertical="top">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"B"} vertical="bottom">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"R"} horizontal="right">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"L"} horizontal="left">\r\n          <MainIcon />\r\n        </Badge>\r\n      </Stack>\r\n      <Stack direction="row" spacing={5} alignItems={"center"}>\r\n        <Badge {...actions} content={"TR"} vertical="top" horizontal="right">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"TL"} vertical="top" horizontal="left">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"BR"} vertical="bottom" horizontal="right">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"BL"} vertical="bottom" horizontal="left">\r\n          <MainIcon />\r\n        </Badge>\r\n      </Stack>\r\n    </Stack>;\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Badge {...actions}>\\r\\n      <MainIcon />\\r\\n    </Badge>;\\n}",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nThemedAndColored.parameters = {\n  ...ThemedAndColored.parameters,\n  docs: {\n    ...ThemedAndColored.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Stack direction=\\"row\\" spacing={3}>\\r\\n      {[undefined, \\"primary\\", \\"secondary\\", \\"info\\", \\"success\\", \\"warning\\", \\"error\\", \\"#d05e00\\"].map((color, index) => <Badge key={index} {...actions} content={1} color={color}>\\r\\n          <MainIcon />\\r\\n        </Badge>)}\\r\\n    </Stack>;\\n}",\n      ...ThemedAndColored.parameters?.docs?.source\n    }\n  }\n};\nVariant.parameters = {\n  ...Variant.parameters,\n  docs: {\n    ...Variant.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Stack direction=\\"row\\" spacing={3} alignItems={\\"center\\"}>\\r\\n      <Badge {...actions} content={\\"b\\"} color=\\"secondary\\">\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={\\"b\\"} color=\\"secondary\\" variant=\\"dot\\">\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n    </Stack>;\\n}",\n      ...Variant.parameters?.docs?.source\n    }\n  }\n};\nHide.parameters = {\n  ...Hide.parameters,\n  docs: {\n    ...Hide.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  const [hide, setHide] = useState(false);\\n  return <Stack direction=\\"row\\" spacing={3} alignItems={\\"center\\"}>\\r\\n      <Button color=\\"secondary\\" onClick={() => setHide(h => !h)}>\\r\\n        {hide ? \\"show\\" : \\"hide\\"}\\r\\n      </Button>\\r\\n      <Badge {...actions} content={\\"b\\"} color=\\"secondary\\" hide={hide}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n      <Badge {...actions} color=\\"secondary\\" hide={hide}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n    </Stack>;\\n}",\n      ...Hide.parameters?.docs?.source\n    }\n  }\n};\nShowZero.parameters = {\n  ...ShowZero.parameters,\n  docs: {\n    ...ShowZero.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Stack direction=\\"row\\" spacing={3} alignItems={\\"center\\"}>\\r\\n      <Badge {...actions} content={0} color=\\"secondary\\" showZero={false}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={0} color=\\"secondary\\" showZero={true}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={0} color=\\"secondary\\">\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n    </Stack>;\\n}",\n      ...ShowZero.parameters?.docs?.source\n    }\n  }\n};\nMax99.parameters = {\n  ...Max99.parameters,\n  docs: {\n    ...Max99.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Stack direction=\\"row\\" spacing={3} alignItems={\\"center\\"}>\\r\\n      <Badge {...actions} content={9}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={99}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={999}>\\r\\n        <MainIcon />\\r\\n      </Badge>\\r\\n    </Stack>;\\n}",\n      ...Max99.parameters?.docs?.source\n    }\n  }\n};\nOverlap.parameters = {\n  ...Overlap.parameters,\n  docs: {\n    ...Overlap.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Stack direction=\\"row\\" spacing={3} alignItems={\\"center\\"}>\\r\\n      <Badge {...actions} content={\\" \\"}>\\r\\n        {rectangle}\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={\\" \\"} variant=\\"dot\\">\\r\\n        {rectangle}\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={\\" \\"} overlap={\\"circular\\"}>\\r\\n        {circle}\\r\\n      </Badge>\\r\\n      <Badge {...actions} content={\\" \\"} overlap={\\"circular\\"} variant=\\"dot\\">\\r\\n        {circle}\\r\\n      </Badge>\\r\\n    </Stack>;\\n}",\n      ...Overlap.parameters?.docs?.source\n    }\n  }\n};\nAnchorPosition.parameters = {\n  ...AnchorPosition.parameters,\n  docs: {\n    ...AnchorPosition.parameters?.docs,\n    source: {\n      originalSource: "() => {\\n  return <Stack direction=\\"column\\" spacing={3} alignItems={\\"center\\"}>\\r\\n      <Stack direction=\\"row\\" spacing={5} alignItems={\\"center\\"}>\\r\\n        <Badge {...actions} content={\\"T\\"} vertical=\\"top\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n        <Badge {...actions} content={\\"B\\"} vertical=\\"bottom\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n        <Badge {...actions} content={\\"R\\"} horizontal=\\"right\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n        <Badge {...actions} content={\\"L\\"} horizontal=\\"left\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n      </Stack>\\r\\n      <Stack direction=\\"row\\" spacing={5} alignItems={\\"center\\"}>\\r\\n        <Badge {...actions} content={\\"TR\\"} vertical=\\"top\\" horizontal=\\"right\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n        <Badge {...actions} content={\\"TL\\"} vertical=\\"top\\" horizontal=\\"left\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n        <Badge {...actions} content={\\"BR\\"} vertical=\\"bottom\\" horizontal=\\"right\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n        <Badge {...actions} content={\\"BL\\"} vertical=\\"bottom\\" horizontal=\\"left\\">\\r\\n          <MainIcon />\\r\\n        </Badge>\\r\\n      </Stack>\\r\\n    </Stack>;\\n}",\n      ...AnchorPosition.parameters?.docs?.source\n    }\n  }\n};',locationsMap:{default:{startLoc:{col:23,line:10},endLoc:{col:1,line:14},startBody:{col:23,line:10},endBody:{col:1,line:14}},"themed-and-colored":{startLoc:{col:32,line:15},endLoc:{col:1,line:21},startBody:{col:32,line:15},endBody:{col:1,line:21}},variant:{startLoc:{col:23,line:22},endLoc:{col:1,line:31},startBody:{col:23,line:22},endBody:{col:1,line:31}},hide:{startLoc:{col:20,line:32},endLoc:{col:1,line:45},startBody:{col:20,line:32},endBody:{col:1,line:45}},"show-zero":{startLoc:{col:24,line:46},endLoc:{col:1,line:58},startBody:{col:24,line:46},endBody:{col:1,line:58}},"max-99":{startLoc:{col:21,line:59},endLoc:{col:1,line:71},startBody:{col:21,line:59},endBody:{col:1,line:71}},overlap:{startLoc:{col:23,line:85},endLoc:{col:1,line:100},startBody:{col:23,line:85},endBody:{col:1,line:100}},"anchor-position":{startLoc:{col:30,line:101},endLoc:{col:1,line:132},startBody:{col:30,line:101},endBody:{col:1,line:132}}}}},title:"Data-Display/Badge",component:Badge_Badge},actions={},Default=()=>react.createElement(Badge_Badge,actions,react.createElement(Mail.Z,null));Default.displayName="Default";const ThemedAndColored=()=>react.createElement(Stack.Z,{direction:"row",spacing:3},[void 0,"primary","secondary","info","success","warning","error","#d05e00"].map(((color,index)=>react.createElement(Badge_Badge,Badge_stories_extends({key:index},actions,{content:1,color}),react.createElement(Mail.Z,null)))));ThemedAndColored.displayName="ThemedAndColored";const Variant=()=>react.createElement(Stack.Z,{direction:"row",spacing:3,alignItems:"center"},react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"b",color:"secondary"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"b",color:"secondary",variant:"dot"}),react.createElement(Mail.Z,null)));Variant.displayName="Variant";const Hide=()=>{const[hide,setHide]=(0,react.useState)(!1);return react.createElement(Stack.Z,{direction:"row",spacing:3,alignItems:"center"},react.createElement(Button.Z,{color:"secondary",onClick:()=>setHide((h=>!h))},hide?"show":"hide"),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"b",color:"secondary",hide}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{color:"secondary",hide}),react.createElement(Mail.Z,null)))};Hide.displayName="Hide";const ShowZero=()=>react.createElement(Stack.Z,{direction:"row",spacing:3,alignItems:"center"},react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:0,color:"secondary",showZero:!1}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:0,color:"secondary",showZero:!0}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:0,color:"secondary"}),react.createElement(Mail.Z,null)));ShowZero.displayName="ShowZero";const Max99=()=>react.createElement(Stack.Z,{direction:"row",spacing:3,alignItems:"center"},react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:9}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:99}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:999}),react.createElement(Mail.Z,null)));Max99.displayName="Max99";const shapeStyles={bgcolor:"secondary.main",width:40,height:40},rectangle=react.createElement(Box.Z,{component:"span",sx:shapeStyles}),circle=react.createElement(Box.Z,{component:"span",sx:_objectSpread(_objectSpread({},shapeStyles),{borderRadius:"50%"})}),Overlap=()=>react.createElement(Stack.Z,{direction:"row",spacing:3,alignItems:"center"},react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:" "}),rectangle),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:" ",variant:"dot"}),rectangle),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:" ",overlap:"circular"}),circle),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:" ",overlap:"circular",variant:"dot"}),circle));Overlap.displayName="Overlap";const AnchorPosition=()=>react.createElement(Stack.Z,{direction:"column",spacing:3,alignItems:"center"},react.createElement(Stack.Z,{direction:"row",spacing:5,alignItems:"center"},react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"T",vertical:"top"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"B",vertical:"bottom"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"R",horizontal:"right"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"L",horizontal:"left"}),react.createElement(Mail.Z,null))),react.createElement(Stack.Z,{direction:"row",spacing:5,alignItems:"center"},react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"TR",vertical:"top",horizontal:"right"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"TL",vertical:"top",horizontal:"left"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"BR",vertical:"bottom",horizontal:"right"}),react.createElement(Mail.Z,null)),react.createElement(Badge_Badge,Badge_stories_extends({},actions,{content:"BL",vertical:"bottom",horizontal:"left"}),react.createElement(Mail.Z,null))));AnchorPosition.displayName="AnchorPosition",Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},Default.parameters?.docs),{},{source:_objectSpread({originalSource:"() => {\n  return <Badge {...actions}>\r\n      <MainIcon />\r\n    </Badge>;\n}"},Default.parameters?.docs?.source)})}),ThemedAndColored.parameters=_objectSpread(_objectSpread({},ThemedAndColored.parameters),{},{docs:_objectSpread(_objectSpread({},ThemedAndColored.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  return <Stack direction="row" spacing={3}>\r\n      {[undefined, "primary", "secondary", "info", "success", "warning", "error", "#d05e00"].map((color, index) => <Badge key={index} {...actions} content={1} color={color}>\r\n          <MainIcon />\r\n        </Badge>)}\r\n    </Stack>;\n}'},ThemedAndColored.parameters?.docs?.source)})}),Variant.parameters=_objectSpread(_objectSpread({},Variant.parameters),{},{docs:_objectSpread(_objectSpread({},Variant.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={"b"} color="secondary">\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={"b"} color="secondary" variant="dot">\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n}'},Variant.parameters?.docs?.source)})}),Hide.parameters=_objectSpread(_objectSpread({},Hide.parameters),{},{docs:_objectSpread(_objectSpread({},Hide.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  const [hide, setHide] = useState(false);\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Button color="secondary" onClick={() => setHide(h => !h)}>\r\n        {hide ? "show" : "hide"}\r\n      </Button>\r\n      <Badge {...actions} content={"b"} color="secondary" hide={hide}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} color="secondary" hide={hide}>\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n}'},Hide.parameters?.docs?.source)})}),ShowZero.parameters=_objectSpread(_objectSpread({},ShowZero.parameters),{},{docs:_objectSpread(_objectSpread({},ShowZero.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={0} color="secondary" showZero={false}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={0} color="secondary" showZero={true}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={0} color="secondary">\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n}'},ShowZero.parameters?.docs?.source)})}),Max99.parameters=_objectSpread(_objectSpread({},Max99.parameters),{},{docs:_objectSpread(_objectSpread({},Max99.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={9}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={99}>\r\n        <MainIcon />\r\n      </Badge>\r\n      <Badge {...actions} content={999}>\r\n        <MainIcon />\r\n      </Badge>\r\n    </Stack>;\n}'},Max99.parameters?.docs?.source)})}),Overlap.parameters=_objectSpread(_objectSpread({},Overlap.parameters),{},{docs:_objectSpread(_objectSpread({},Overlap.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  return <Stack direction="row" spacing={3} alignItems={"center"}>\r\n      <Badge {...actions} content={" "}>\r\n        {rectangle}\r\n      </Badge>\r\n      <Badge {...actions} content={" "} variant="dot">\r\n        {rectangle}\r\n      </Badge>\r\n      <Badge {...actions} content={" "} overlap={"circular"}>\r\n        {circle}\r\n      </Badge>\r\n      <Badge {...actions} content={" "} overlap={"circular"} variant="dot">\r\n        {circle}\r\n      </Badge>\r\n    </Stack>;\n}'},Overlap.parameters?.docs?.source)})}),AnchorPosition.parameters=_objectSpread(_objectSpread({},AnchorPosition.parameters),{},{docs:_objectSpread(_objectSpread({},AnchorPosition.parameters?.docs),{},{source:_objectSpread({originalSource:'() => {\n  return <Stack direction="column" spacing={3} alignItems={"center"}>\r\n      <Stack direction="row" spacing={5} alignItems={"center"}>\r\n        <Badge {...actions} content={"T"} vertical="top">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"B"} vertical="bottom">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"R"} horizontal="right">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"L"} horizontal="left">\r\n          <MainIcon />\r\n        </Badge>\r\n      </Stack>\r\n      <Stack direction="row" spacing={5} alignItems={"center"}>\r\n        <Badge {...actions} content={"TR"} vertical="top" horizontal="right">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"TL"} vertical="top" horizontal="left">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"BR"} vertical="bottom" horizontal="right">\r\n          <MainIcon />\r\n        </Badge>\r\n        <Badge {...actions} content={"BL"} vertical="bottom" horizontal="left">\r\n          <MainIcon />\r\n        </Badge>\r\n      </Stack>\r\n    </Stack>;\n}'},AnchorPosition.parameters?.docs?.source)})});const __namedExportsOrder=["Default","ThemedAndColored","Variant","Hide","ShowZero","Max99","Overlap","AnchorPosition"]},"./src/utils/helpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$K:()=>isDefined,Ek:()=>useCustomColor,F2:()=>generatePassword,_f:()=>numberToPx,_v:()=>sleep,im:()=>getCapitalLetters,mY:()=>getTextWidth,q4:()=>getCustomColor,u_:()=>stringToColor,vQ:()=>copyToClipboard});var lodash_es__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/lodash-es/get.js"),_mui_material__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator.js"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js");const toHex=__webpack_require__("./node_modules/colornames/index.js");function getCapitalLetters(str){const chars=str?.split(" ").filter((v=>!!v)).map((word=>word[0].toUpperCase()))??void 0;if(!chars)return;const[firstChar,secondChar]=[chars?.[0],chars?.slice(-1)];return chars.length>1?[firstChar,secondChar]:[firstChar]}function stringToColor(string){if(!string)return;let i,hash=0;for(i=0;i<string.length;i+=1)hash=string.charCodeAt(i)+((hash<<5)-hash);let color="#";for(i=0;i<3;i+=1){color+=`00${(hash>>8*i&255).toString(16)}`.slice(-2)}return color}function numberToPx(field){return"number"==typeof field?`${field}px`:field}function isDefined(value){return null!=value}function useCustomColor(color,options){return getCustomColor({theme:(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_0__.Z)(),customColor:color},options)}function getCustomColor(props,{field,muiLevel="main",opacity=1,darken:_darken,lighten:_lighten}={}){const customColor=props?.[field]??props?.customColor;if(!customColor)return[];if(Array.isArray(customColor))return customColor;if("inherit"===customColor)return[void 0,"inherit"];let color=(0,lodash_es__WEBPACK_IMPORTED_MODULE_1__.Z)(props,`theme.palette.${customColor}.${muiLevel}`)??(0,lodash_es__WEBPACK_IMPORTED_MODULE_1__.Z)(props,`theme.palette.${customColor}`)??toHex(customColor)??customColor;if(!isValidColor(color))return[];const isMuiColor=color&&color!==customColor;return color=isDefined(opacity)?(0,_mui_material__WEBPACK_IMPORTED_MODULE_2__.Fq)(color,opacity):color,color=isDefined(_darken)?(0,_mui_material__WEBPACK_IMPORTED_MODULE_2__._j)(color,_darken):color,color=isDefined(_lighten)?(0,_mui_material__WEBPACK_IMPORTED_MODULE_2__.$n)(color,_lighten):color,[color,isMuiColor?customColor:void 0]}const isValidColor=color=>CSS.supports("color",color),copyToClipboard=value=>{if(!value)return!1;const textField=document.createElement("textarea");return textField.innerText=value,document.body.appendChild(textField),textField.select(),document.execCommand("copy"),textField.remove(),!0},NUMBERS="0123456789",LOWERCASE="abcdefghijklmnopqrstuvwxyz",UPPERCASE="ABCDEFGHIJKLMNOPQRSTUVWXYZ",SYMBOL="!@#$%^&*()";function generatePassword({length=12,numbers=!0,lowercase=!0,uppercase=!0,symbol=!0}={}){const chars=[numbers&&NUMBERS,lowercase&&LOWERCASE,uppercase&&UPPERCASE,symbol&&SYMBOL].filter(Boolean).join("");let password="";for(let i=0;i<=length;i++){const randomNumber=Math.floor(Math.random()*chars.length);password+=chars.substring(randomNumber,randomNumber+1)}return password}function sleep(delay=0){return new Promise((resolve=>setTimeout(resolve,delay)))}function getTextWidth(text){const element=document.createElement("span");element.textContent=text,document.body.appendChild(element);const{offsetWidth,scrollWidth}=element;return element.parentElement.removeChild(element),{offsetWidth,scrollWidth}}}}]);
//# sourceMappingURL=components-Badge-__stories__-Badge-stories.95b5a776.iframe.bundle.js.map