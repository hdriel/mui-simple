"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[506],{"./src/components/_FIXED/Select/__stories__/InputMultipleSelect.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoWidth:()=>AutoWidth,CheckboxMarker:()=>CheckboxMarker,Chips:()=>Chips,Colors:()=>Colors,Components:()=>Components,Default:()=>Default,Disabled:()=>Disabled,Error:()=>Error,ExternalComponents:()=>ExternalComponents,GroupBy:()=>GroupBy,HelperText:()=>HelperText,Label:()=>Label,Margin:()=>Margin,MultiCheckbox:()=>MultiCheckbox,MultiMax:()=>MultiMax,Nullable:()=>Nullable,OnEvents:()=>OnEvents,Options:()=>Options,PlaceholderOption:()=>PlaceholderOption,ReadOnly:()=>ReadOnly,RenderValue:()=>RenderValue,Required:()=>Required,SelectAll:()=>SelectAll,SelectedIndicator:()=>SelectedIndicator,Size_:()=>Size_,SquaredChips:()=>SquaredChips,Variant_:()=>Variant_,__namedExportsOrder:()=>__namedExportsOrder,default:()=>InputMultipleSelect_stories,fullWidth:()=>fullWidth});var react=__webpack_require__("./node_modules/react/index.js"),Stack=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),IndeterminateCheckBox=__webpack_require__("./node_modules/@mui/icons-material/esm/IndeterminateCheckBox.js"),Check=__webpack_require__("./node_modules/@mui/icons-material/esm/Check.js"),InputSelect=__webpack_require__("./src/components/_FIXED/Select/InputSelect.tsx"),Chip=__webpack_require__("./src/components/_FIXED/Chip/Chip.tsx"),helpers=__webpack_require__("./src/utils/helpers.ts"),Checkbox=__webpack_require__("./src/components/_FIXED/Checkbox/Checkbox.tsx"),InputSelect_styled=__webpack_require__("./src/components/_FIXED/Select/InputSelect.styled.tsx"),InputSelect_hooks=__webpack_require__("./src/components/_FIXED/Select/InputSelect.hooks.tsx"),ListItem=__webpack_require__("./src/components/List/ListItem.tsx"),SVGIcon=__webpack_require__("./src/components/SVGIcon/SVGIcon.tsx"),_excluded=["value","chips","renderValue","onChange","max","name","label","squaredChips","selectedIndicator","selectAll","options","groupBy","SELECT_ALL_LABEL","HIDE_ALL_LABEL","SELECTED_ITEMS_LABEL","checkboxMarker"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var RenderValuesAsChips=function(_a){_a.value;var options=_a.option;return react.createElement(Box.Z,{sx:{display:"flex",flexWrap:"wrap",gap:.5}},null==options?void 0:options.map((function(_a){var value=_a.value,label=_a.label;return react.createElement(Chip.Z,{key:value,label,rounded:!0})})))};RenderValuesAsChips.displayName="RenderValuesAsChips";var RenderValuesAsSquaredChips=function(_a){_a.value;var options=_a.option;return react.createElement(Box.Z,{sx:{display:"flex",flexWrap:"wrap",gap:.5}},null==options?void 0:options.map((function(_a){var value=_a.value,label=_a.label;return react.createElement(Chip.Z,{key:value,label,rounded:!1})})))};RenderValuesAsSquaredChips.displayName="RenderValuesAsSquaredChips";var InputMultipleSelect=function(_ref){var value=_ref.value,chips=_ref.chips,renderValue=_ref.renderValue,onChange=_ref.onChange,max=_ref.max,name=_ref.name,_label=_ref.label,squaredChips=_ref.squaredChips,selectedIndicator=_ref.selectedIndicator,selectAll=_ref.selectAll,_options=_ref.options,groupBy=_ref.groupBy,SELECT_ALL_LABEL=_ref.SELECT_ALL_LABEL,HIDE_ALL_LABEL=_ref.HIDE_ALL_LABEL,SELECTED_ITEMS_LABEL=_ref.SELECTED_ITEMS_LABEL,_checkboxMarker=_ref.checkboxMarker,props=_objectWithoutProperties(_ref,_excluded),options=(0,InputSelect_hooks.FW)({options:_options}),convertedOptions=(0,InputSelect_hooks.cA)({options,groupBy}),availableValuesLen=options.filter((function(option){return!option.disabled||value.includes(option.value)})).length,setClickAllState=(0,react.useState)(!1)[1],_b=(0,react.useState)(!1),isClickedAll=_b[0],setClickAll=_b[1],checkboxMarker=_checkboxMarker&&"string"==typeof _checkboxMarker?react.createElement(SVGIcon.Z,null,_checkboxMarker):_checkboxMarker,n=null==value?void 0:value.length,label=selectedIndicator&&n?"".concat(null!=_label?_label:""," ").concat(null==SELECTED_ITEMS_LABEL?void 0:SELECTED_ITEMS_LABEL.replace("{n}",String(n))):_label,handleSelectAllChange=(0,react.useCallback)((function(){setClickAll((function(isClickedAll){var allValues=isClickedAll?Object.values(null!=convertedOptions?convertedOptions:{}).flat().map((function(option){return option.value})):[];return null==onChange||onChange({target:{name,value:allValues}}),isClickedAll}))}),[]),onClickMenuItemHandler=(0,react.useCallback)((function(event){setClickAllState((function(isClickAllState){if(isClickAllState)handleSelectAllChange();else{var values=event.target.value;(!(0,helpers.$K)(max)||(null==values?void 0:values.length)<=max)&&(null==onChange||onChange(event))}return!1}))}),[max,handleSelectAllChange]);return(0,react.useEffect)((function(){!(null==value?void 0:value.length)&&isClickedAll&&setClickAll(!1),(null==value?void 0:value.length)&&(null==value?void 0:value.length)>=availableValuesLen&&!isClickedAll&&setClickAll(!0)}),[null==value?void 0:value.length]),react.createElement(InputSelect.Z,_extends({value:[].concat(value).filter(Boolean),multiple:!0,max,label,renderValue:squaredChips?react.createElement(RenderValuesAsSquaredChips,null):chips?react.createElement(RenderValuesAsChips,null):renderValue,onChange:onClickMenuItemHandler,checkbox:checkboxMarker,selectAll,options,convertedOptions,selectAllOption:!(0,helpers.$K)(max)&&selectAll?react.createElement(InputSelect_styled.sN,{onClick:function(){setClickAllState(!0),setClickAll((function(v){return!v}))}},"boolean"==typeof checkboxMarker&&checkboxMarker&&react.createElement(Checkbox.Z,{checked:!(!(null==value?void 0:value.length)&&!isClickedAll),checkedIcon:!(null==value?void 0:value.length)||(null==value?void 0:value.length)>=availableValuesLen?void 0:react.createElement(IndeterminateCheckBox.Z,null)}),react.createElement(ListItem.Z,{disableGutters:!0,itemProps:{title:isClickedAll&&(!(0,helpers.$K)(checkboxMarker)||"boolean"==typeof checkboxMarker&&checkboxMarker)?HIDE_ALL_LABEL:SELECT_ALL_LABEL,actions:isClickedAll?checkboxMarker:void 0,bold:!0},buttonItems:!0,alignItems:"flex-start",isControl:!0,enableSubtitle:!0})):void 0},props))};InputMultipleSelect.displayName="InputMultipleSelect",InputMultipleSelect.defaultProps={value:void 0,chips:!0,squaredChips:!0,checkboxMarker:react.createElement(Check.Z,null),max:void 0,selectedIndicator:!0,selectAll:!0,SELECT_ALL_LABEL:"Select All",HIDE_ALL_LABEL:"Hide All",SELECTED_ITEMS_LABEL:"({n} selected)"};const Select_InputMultipleSelect=InputMultipleSelect;try{InputMultipleSelect.displayName="InputMultipleSelect",InputMultipleSelect.__docgenInfo={description:"",displayName:"InputMultipleSelect",props:{value:{defaultValue:{value:"undefined"},description:"",name:"value",required:!1,type:{name:"(string | number | boolean)[]"}},chips:{defaultValue:{value:"true"},description:"",name:"chips",required:!1,type:{name:"boolean"}},squaredChips:{defaultValue:{value:"true"},description:"",name:"squaredChips",required:!1,type:{name:"boolean"}},checkboxMarker:{defaultValue:{value:"<CheckIcon />"},description:"",name:"checkboxMarker",required:!1,type:{name:"ReactNode"}},max:{defaultValue:{value:"undefined"},description:"",name:"max",required:!1,type:{name:"number"}},selectedIndicator:{defaultValue:{value:"true"},description:"",name:"selectedIndicator",required:!1,type:{name:"boolean"}},selectAll:{defaultValue:{value:"true"},description:"",name:"selectAll",required:!1,type:{name:"boolean"}},SELECT_ALL_LABEL:{defaultValue:{value:"Select All"},description:"",name:"SELECT_ALL_LABEL",required:!1,type:{name:"string"}},HIDE_ALL_LABEL:{defaultValue:{value:"Hide All"},description:"",name:"HIDE_ALL_LABEL",required:!1,type:{name:"string"}},SELECTED_ITEMS_LABEL:{defaultValue:{value:"({n} selected)"},description:"",name:"SELECTED_ITEMS_LABEL",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Select/InputMultipleSelect.tsx#InputMultipleSelect"]={docgenInfo:InputMultipleSelect.__docgenInfo,name:"InputMultipleSelect",path:"src/components/_FIXED/Select/InputMultipleSelect.tsx#InputMultipleSelect"})}catch(__react_docgen_typescript_loader_error){}var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function InputMultipleSelect_stories_extends(){return InputMultipleSelect_stories_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},InputMultipleSelect_stories_extends.apply(this,arguments)}const InputMultipleSelect_stories={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Stack } from '@mui/material';\nimport InputMultipleSelect from '../InputMultipleSelect';\nconst meta: Meta<typeof InputMultipleSelect> = {\n  title: 'Inputs/Inputs/InputMultipleSelect',\n  component: InputMultipleSelect,\n  tags: ['autodocs']\n};\nexport default meta;\ntype Story = StoryObj<typeof InputMultipleSelect>;\nexport const Default: Story = {\n  args: {}\n};\nconst options = ['javascript', 'python', 'C#', 'C++'];\nexport const AutoWidth: Story = {\n  args: {},\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const Components: Story = {\n  args: {\n    alignActions: 'flex-start',\n    startCmp: 'Email',\n    endCmp: 'Fingerprint',\n    options,\n    label: 'Align Actions',\n    value: [options[0]],\n    cmpSpacing: 3,\n    nullable: true,\n    hideStartActionsOnEmpty: true\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const ExternalComponents: Story = {\n  args: {\n    alignActionsExternal: 'flex-start',\n    startCmpExternal: 'Email',\n    endCmpExternal: 'Fingerprint',\n    options,\n    label: 'Align Actions',\n    value: [options[0]],\n    cmpSpacing: 3\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const Colors: Story = {\n  args: {\n    options,\n    label: 'colors',\n    value: [options[0]],\n    colorActive: '#D001D0',\n    colorLabel: 'secondary',\n    colorText: 'warning.dark'\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const HelperText: Story = {\n  args: {\n    options,\n    label: 'colors',\n    value: [options[0]],\n    helperText: 'choose you best language'\n  }\n};\nexport const Error: Story = {\n  args: {\n    options,\n    label: 'Error',\n    value: [options[0]],\n    helperText: 'choose you best language',\n    error: true\n  }\n};\nexport const Disabled: Story = {\n  args: {\n    options,\n    label: 'Disabled',\n    value: [options[0]],\n    disabled: true\n  }\n};\nexport const ReadOnly: Story = {\n  args: {\n    options,\n    label: 'ReadOnly',\n    value: [options[0]],\n    readOnly: true\n  }\n};\nexport const Label: Story = {\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Languages'\n  }\n};\nexport const fullWidth: Story = {\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Full Width',\n    fullWidth: true\n  }\n};\nexport const Nullable: Story = {\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Nullable',\n    nullable: true\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const PlaceholderOption: Story = {\n  args: {\n    options,\n    value: [undefined],\n    label: 'Placeholder Option',\n    placeholderOption: 'placeholder option here',\n    nullable: true\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const Required: Story = {\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Required',\n    required: true\n  }\n};\nexport const OnEvents: Story = {\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Focused',\n    focused: true,\n    onBlur: event => console.log('onBlur', event),\n    onChange: event => console.log('onChange', event),\n    onFocus: event => console.log('onFocus', event)\n  }\n};\nexport const Margin: Story = {\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Margin',\n    margin: 'dense'\n  }\n};\nexport const Size_ = args => {\n  const [value, setValue] = useState(args.value ?? []);\n  return <Stack spacing={3}>\n            <InputMultipleSelect options={options} label=\"Small\" size=\"small\" value={value} onChange={e => setValue(e.target.value)} />\n            <InputMultipleSelect options={options} label=\"Medium\" size=\"medium\" value={value} onChange={e => setValue(e.target.value)} />\n        </Stack>;\n};\nexport const Variant_ = args => {\n  const [value, setValue] = useState(args.value ?? []);\n  return <Stack spacing={3}>\n            <InputMultipleSelect options={options} label=\"Filled\" variant=\"filled\" value={value} onChange={e => setValue(e.target.value)} nullable />\n            <InputMultipleSelect options={options} label=\"Outlined\" variant=\"outlined\" value={value} onChange={e => setValue(e.target.value)} nullable />\n            <InputMultipleSelect options={options} label=\"Standard\" variant=\"standard\" value={value} onChange={e => setValue(e.target.value)} nullable />\n        </Stack>;\n};\nexport const Options: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Options'\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const GroupBy: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Group By',\n    groupBy: 'category'\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const RenderValue: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Render Value',\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const MultiMax: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'MultiMax Label',\n    max: 3,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const SelectAll: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Select All Label',\n    selectAll: true,\n    selectAllOption: true,\n    nullable: 'None Selection',\n    placeholderOption: 'Choose from list:',\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const MultiCheckbox: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'MultiCheckbox Label',\n    checkbox: true,\n    selectAll: true,\n    selectAllOption: true,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const SelectedIndicator: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Not SelectedIndicator Label',\n    selectAll: true,\n    selectedIndicator: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const Chips: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Non Display as Chips Label',\n    selectAll: true,\n    chips: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const CheckboxMarker: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'CheckboxMarker Label',\n    checkbox: true,\n    checkboxMarker: 'Send',\n    selectAll: true,\n    chips: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\nexport const SquaredChips: Story = {\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: ['t1'],\n    label: 'CheckboxMarker Label',\n    checkbox: true,\n    checkboxMarker: true,\n    selectAll: true,\n    chips: true,\n    squaredChips: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n};\n\n// SELECT_ALL_LABEL: string;\n// HIDE_ALL_LABEL: string;\n// SELECTED_ITEMS_LABEL: string;\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {}\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nAutoWidth.parameters = {\n  ...AutoWidth.parameters,\n  docs: {\n    ...AutoWidth.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {},\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...AutoWidth.parameters?.docs?.source\n    }\n  }\n};\nComponents.parameters = {\n  ...Components.parameters,\n  docs: {\n    ...Components.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    alignActions: 'flex-start',\\n    startCmp: 'Email',\\n    endCmp: 'Fingerprint',\\n    options,\\n    label: 'Align Actions',\\n    value: [options[0]],\\n    cmpSpacing: 3,\\n    nullable: true,\\n    hideStartActionsOnEmpty: true\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...Components.parameters?.docs?.source\n    }\n  }\n};\nExternalComponents.parameters = {\n  ...ExternalComponents.parameters,\n  docs: {\n    ...ExternalComponents.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    alignActionsExternal: 'flex-start',\\n    startCmpExternal: 'Email',\\n    endCmpExternal: 'Fingerprint',\\n    options,\\n    label: 'Align Actions',\\n    value: [options[0]],\\n    cmpSpacing: 3\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...ExternalComponents.parameters?.docs?.source\n    }\n  }\n};\nColors.parameters = {\n  ...Colors.parameters,\n  docs: {\n    ...Colors.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    label: 'colors',\\n    value: [options[0]],\\n    colorActive: '#D001D0',\\n    colorLabel: 'secondary',\\n    colorText: 'warning.dark'\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...Colors.parameters?.docs?.source\n    }\n  }\n};\nHelperText.parameters = {\n  ...HelperText.parameters,\n  docs: {\n    ...HelperText.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    label: 'colors',\\n    value: [options[0]],\\n    helperText: 'choose you best language'\\n  }\\n}\",\n      ...HelperText.parameters?.docs?.source\n    }\n  }\n};\nError.parameters = {\n  ...Error.parameters,\n  docs: {\n    ...Error.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    label: 'Error',\\n    value: [options[0]],\\n    helperText: 'choose you best language',\\n    error: true\\n  }\\n}\",\n      ...Error.parameters?.docs?.source\n    }\n  }\n};\nDisabled.parameters = {\n  ...Disabled.parameters,\n  docs: {\n    ...Disabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    label: 'Disabled',\\n    value: [options[0]],\\n    disabled: true\\n  }\\n}\",\n      ...Disabled.parameters?.docs?.source\n    }\n  }\n};\nReadOnly.parameters = {\n  ...ReadOnly.parameters,\n  docs: {\n    ...ReadOnly.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    label: 'ReadOnly',\\n    value: [options[0]],\\n    readOnly: true\\n  }\\n}\",\n      ...ReadOnly.parameters?.docs?.source\n    }\n  }\n};\nLabel.parameters = {\n  ...Label.parameters,\n  docs: {\n    ...Label.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [options[0]],\\n    label: 'Languages'\\n  }\\n}\",\n      ...Label.parameters?.docs?.source\n    }\n  }\n};\nfullWidth.parameters = {\n  ...fullWidth.parameters,\n  docs: {\n    ...fullWidth.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [options[0]],\\n    label: 'Full Width',\\n    fullWidth: true\\n  }\\n}\",\n      ...fullWidth.parameters?.docs?.source\n    }\n  }\n};\nNullable.parameters = {\n  ...Nullable.parameters,\n  docs: {\n    ...Nullable.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [options[0]],\\n    label: 'Nullable',\\n    nullable: true\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...Nullable.parameters?.docs?.source\n    }\n  }\n};\nPlaceholderOption.parameters = {\n  ...PlaceholderOption.parameters,\n  docs: {\n    ...PlaceholderOption.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [undefined],\\n    label: 'Placeholder Option',\\n    placeholderOption: 'placeholder option here',\\n    nullable: true\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...PlaceholderOption.parameters?.docs?.source\n    }\n  }\n};\nRequired.parameters = {\n  ...Required.parameters,\n  docs: {\n    ...Required.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [options[0]],\\n    label: 'Required',\\n    required: true\\n  }\\n}\",\n      ...Required.parameters?.docs?.source\n    }\n  }\n};\nOnEvents.parameters = {\n  ...OnEvents.parameters,\n  docs: {\n    ...OnEvents.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [options[0]],\\n    label: 'Focused',\\n    focused: true,\\n    onBlur: event => console.log('onBlur', event),\\n    onChange: event => console.log('onChange', event),\\n    onFocus: event => console.log('onFocus', event)\\n  }\\n}\",\n      ...OnEvents.parameters?.docs?.source\n    }\n  }\n};\nMargin.parameters = {\n  ...Margin.parameters,\n  docs: {\n    ...Margin.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options,\\n    value: [options[0]],\\n    label: 'Margin',\\n    margin: 'dense'\\n  }\\n}\",\n      ...Margin.parameters?.docs?.source\n    }\n  }\n};\nSize_.parameters = {\n  ...Size_.parameters,\n  docs: {\n    ...Size_.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const [value, setValue] = useState(args.value ?? []);\\n  return <Stack spacing={3}>\\n            <InputMultipleSelect options={options} label=\\\"Small\\\" size=\\\"small\\\" value={value} onChange={e => setValue(e.target.value)} />\\n            <InputMultipleSelect options={options} label=\\\"Medium\\\" size=\\\"medium\\\" value={value} onChange={e => setValue(e.target.value)} />\\n        </Stack>;\\n}\",\n      ...Size_.parameters?.docs?.source\n    }\n  }\n};\nVariant_.parameters = {\n  ...Variant_.parameters,\n  docs: {\n    ...Variant_.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const [value, setValue] = useState(args.value ?? []);\\n  return <Stack spacing={3}>\\n            <InputMultipleSelect options={options} label=\\\"Filled\\\" variant=\\\"filled\\\" value={value} onChange={e => setValue(e.target.value)} nullable />\\n            <InputMultipleSelect options={options} label=\\\"Outlined\\\" variant=\\\"outlined\\\" value={value} onChange={e => setValue(e.target.value)} nullable />\\n            <InputMultipleSelect options={options} label=\\\"Standard\\\" variant=\\\"standard\\\" value={value} onChange={e => setValue(e.target.value)} nullable />\\n        </Stack>;\\n}\",\n      ...Variant_.parameters?.docs?.source\n    }\n  }\n};\nOptions.parameters = {\n  ...Options.parameters,\n  docs: {\n    ...Options.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'Options'\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...Options.parameters?.docs?.source\n    }\n  }\n};\nGroupBy.parameters = {\n  ...GroupBy.parameters,\n  docs: {\n    ...GroupBy.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'Group By',\\n    groupBy: 'category'\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...GroupBy.parameters?.docs?.source\n    }\n  }\n};\nRenderValue.parameters = {\n  ...RenderValue.parameters,\n  docs: {\n    ...RenderValue.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'Render Value',\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...RenderValue.parameters?.docs?.source\n    }\n  }\n};\nMultiMax.parameters = {\n  ...MultiMax.parameters,\n  docs: {\n    ...MultiMax.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'MultiMax Label',\\n    max: 3,\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...MultiMax.parameters?.docs?.source\n    }\n  }\n};\nSelectAll.parameters = {\n  ...SelectAll.parameters,\n  docs: {\n    ...SelectAll.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'Select All Label',\\n    selectAll: true,\\n    selectAllOption: true,\\n    nullable: 'None Selection',\\n    placeholderOption: 'Choose from list:',\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...SelectAll.parameters?.docs?.source\n    }\n  }\n};\nMultiCheckbox.parameters = {\n  ...MultiCheckbox.parameters,\n  docs: {\n    ...MultiCheckbox.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'MultiCheckbox Label',\\n    checkbox: true,\\n    selectAll: true,\\n    selectAllOption: true,\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...MultiCheckbox.parameters?.docs?.source\n    }\n  }\n};\nSelectedIndicator.parameters = {\n  ...SelectedIndicator.parameters,\n  docs: {\n    ...SelectedIndicator.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'Not SelectedIndicator Label',\\n    selectAll: true,\\n    selectedIndicator: false,\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...SelectedIndicator.parameters?.docs?.source\n    }\n  }\n};\nChips.parameters = {\n  ...Chips.parameters,\n  docs: {\n    ...Chips.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'Non Display as Chips Label',\\n    selectAll: true,\\n    chips: false,\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...Chips.parameters?.docs?.source\n    }\n  }\n};\nCheckboxMarker.parameters = {\n  ...CheckboxMarker.parameters,\n  docs: {\n    ...CheckboxMarker.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: [options[0]],\\n    label: 'CheckboxMarker Label',\\n    checkbox: true,\\n    checkboxMarker: 'Send',\\n    selectAll: true,\\n    chips: false,\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...CheckboxMarker.parameters?.docs?.source\n    }\n  }\n};\nSquaredChips.parameters = {\n  ...SquaredChips.parameters,\n  docs: {\n    ...SquaredChips.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    options: [{\\n      label: 'Test',\\n      category: 'coding',\\n      value: 't1'\\n    }, {\\n      label: 'Figma',\\n      category: 'UI/UX',\\n      value: 'f1'\\n    }, {\\n      label: 'Adobe',\\n      category: 'UI/UX',\\n      value: 'a1'\\n    }, {\\n      label: 'React',\\n      category: 'coding',\\n      value: 'r1'\\n    }, {\\n      label: 'Jira',\\n      category: 'management',\\n      value: 'j1'\\n    }],\\n    value: ['t1'],\\n    label: 'CheckboxMarker Label',\\n    checkbox: true,\\n    checkboxMarker: true,\\n    selectAll: true,\\n    chips: true,\\n    squaredChips: false,\\n    renderValue: value => value\\n  },\\n  render: args => {\\n    const [value, setValue] = useState(args.value);\\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\\n  }\\n}\",\n      ...SquaredChips.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{default:{startLoc:{col:30,line:12},endLoc:{col:1,line:14},startBody:{col:30,line:12},endBody:{col:1,line:14}},"auto-width":{startLoc:{col:32,line:16},endLoc:{col:1,line:22},startBody:{col:32,line:16},endBody:{col:1,line:22}},components:{startLoc:{col:33,line:23},endLoc:{col:1,line:39},startBody:{col:33,line:23},endBody:{col:1,line:39}},"external-components":{startLoc:{col:41,line:40},endLoc:{col:1,line:54},startBody:{col:41,line:40},endBody:{col:1,line:54}},colors:{startLoc:{col:29,line:55},endLoc:{col:1,line:68},startBody:{col:29,line:55},endBody:{col:1,line:68}},"helper-text":{startLoc:{col:33,line:69},endLoc:{col:1,line:76},startBody:{col:33,line:69},endBody:{col:1,line:76}},error:{startLoc:{col:28,line:77},endLoc:{col:1,line:85},startBody:{col:28,line:77},endBody:{col:1,line:85}},disabled:{startLoc:{col:31,line:86},endLoc:{col:1,line:93},startBody:{col:31,line:86},endBody:{col:1,line:93}},"read-only":{startLoc:{col:31,line:94},endLoc:{col:1,line:101},startBody:{col:31,line:94},endBody:{col:1,line:101}},label:{startLoc:{col:28,line:102},endLoc:{col:1,line:108},startBody:{col:28,line:102},endBody:{col:1,line:108}},"full-width":{startLoc:{col:32,line:109},endLoc:{col:1,line:116},startBody:{col:32,line:109},endBody:{col:1,line:116}},nullable:{startLoc:{col:31,line:117},endLoc:{col:1,line:128},startBody:{col:31,line:117},endBody:{col:1,line:128}},"placeholder-option":{startLoc:{col:40,line:129},endLoc:{col:1,line:141},startBody:{col:40,line:129},endBody:{col:1,line:141}},required:{startLoc:{col:31,line:142},endLoc:{col:1,line:149},startBody:{col:31,line:142},endBody:{col:1,line:149}},"on-events":{startLoc:{col:31,line:150},endLoc:{col:1,line:160},startBody:{col:31,line:150},endBody:{col:1,line:160}},margin:{startLoc:{col:29,line:161},endLoc:{col:1,line:168},startBody:{col:29,line:161},endBody:{col:1,line:168}},size:{startLoc:{col:21,line:169},endLoc:{col:1,line:175},startBody:{col:21,line:169},endBody:{col:1,line:175}},variant:{startLoc:{col:24,line:176},endLoc:{col:1,line:183},startBody:{col:24,line:176},endBody:{col:1,line:183}},options:{startLoc:{col:30,line:184},endLoc:{col:1,line:214},startBody:{col:30,line:184},endBody:{col:1,line:214}},"group-by":{startLoc:{col:30,line:215},endLoc:{col:1,line:246},startBody:{col:30,line:215},endBody:{col:1,line:246}},"render-value":{startLoc:{col:34,line:247},endLoc:{col:1,line:278},startBody:{col:34,line:247},endBody:{col:1,line:278}},"multi-max":{startLoc:{col:31,line:279},endLoc:{col:1,line:311},startBody:{col:31,line:279},endBody:{col:1,line:311}},"select-all":{startLoc:{col:32,line:312},endLoc:{col:1,line:347},startBody:{col:32,line:312},endBody:{col:1,line:347}},"multi-checkbox":{startLoc:{col:36,line:348},endLoc:{col:1,line:382},startBody:{col:36,line:348},endBody:{col:1,line:382}},"selected-indicator":{startLoc:{col:40,line:383},endLoc:{col:1,line:416},startBody:{col:40,line:383},endBody:{col:1,line:416}},chips:{startLoc:{col:28,line:417},endLoc:{col:1,line:450},startBody:{col:28,line:417},endBody:{col:1,line:450}},"checkbox-marker":{startLoc:{col:37,line:451},endLoc:{col:1,line:486},startBody:{col:37,line:451},endBody:{col:1,line:486}},"squared-chips":{startLoc:{col:35,line:487},endLoc:{col:1,line:523},startBody:{col:35,line:487},endBody:{col:1,line:523}}}}},title:"Inputs/Inputs/InputMultipleSelect",component:Select_InputMultipleSelect,tags:["autodocs"]};var Default={args:{}},options=["javascript","python","C#","C++"],AutoWidth={args:{},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},Components={args:{alignActions:"flex-start",startCmp:"Email",endCmp:"Fingerprint",options,label:"Align Actions",value:[options[0]],cmpSpacing:3,nullable:!0,hideStartActionsOnEmpty:!0},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},ExternalComponents={args:{alignActionsExternal:"flex-start",startCmpExternal:"Email",endCmpExternal:"Fingerprint",options,label:"Align Actions",value:[options[0]],cmpSpacing:3},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},Colors={args:{options,label:"colors",value:[options[0]],colorActive:"#D001D0",colorLabel:"secondary",colorText:"warning.dark"},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},HelperText={args:{options,label:"colors",value:[options[0]],helperText:"choose you best language"}},Error={args:{options,label:"Error",value:[options[0]],helperText:"choose you best language",error:!0}},Disabled={args:{options,label:"Disabled",value:[options[0]],disabled:!0}},ReadOnly={args:{options,label:"ReadOnly",value:[options[0]],readOnly:!0}},Label={args:{options,value:[options[0]],label:"Languages"}},fullWidth={args:{options,value:[options[0]],label:"Full Width",fullWidth:!0}},Nullable={args:{options,value:[options[0]],label:"Nullable",nullable:!0},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},PlaceholderOption={args:{options,value:[void 0],label:"Placeholder Option",placeholderOption:"placeholder option here",nullable:!0},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},Required={args:{options,value:[options[0]],label:"Required",required:!0}},OnEvents={args:{options,value:[options[0]],label:"Focused",focused:!0,onBlur:function(event){return console.log("onBlur",event)},onChange:function(event){return console.log("onChange",event)},onFocus:function(event){return console.log("onFocus",event)}}},Margin={args:{options,value:[options[0]],label:"Margin",margin:"dense"}},Size_=function(args){var _a,_b=(0,react.useState)(null!==(_a=args.value)&&void 0!==_a?_a:[]),value=_b[0],setValue=_b[1];return react.createElement(Stack.Z,{spacing:3},react.createElement(Select_InputMultipleSelect,{options,label:"Small",size:"small",value,onChange:function(e){return setValue(e.target.value)}}),react.createElement(Select_InputMultipleSelect,{options,label:"Medium",size:"medium",value,onChange:function(e){return setValue(e.target.value)}}))};Size_.displayName="Size_";var Variant_=function(args){var _a,_b=(0,react.useState)(null!==(_a=args.value)&&void 0!==_a?_a:[]),value=_b[0],setValue=_b[1];return react.createElement(Stack.Z,{spacing:3},react.createElement(Select_InputMultipleSelect,{options,label:"Filled",variant:"filled",value,onChange:function(e){return setValue(e.target.value)},nullable:!0}),react.createElement(Select_InputMultipleSelect,{options,label:"Outlined",variant:"outlined",value,onChange:function(e){return setValue(e.target.value)},nullable:!0}),react.createElement(Select_InputMultipleSelect,{options,label:"Standard",variant:"standard",value,onChange:function(e){return setValue(e.target.value)},nullable:!0}))};Variant_.displayName="Variant_";var Options={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"Options"},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},GroupBy={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"Group By",groupBy:"category"},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},RenderValue={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"Render Value",renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},MultiMax={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"MultiMax Label",max:3,renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},SelectAll={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"Select All Label",selectAll:!0,selectAllOption:!0,nullable:"None Selection",placeholderOption:"Choose from list:",renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},MultiCheckbox={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"MultiCheckbox Label",checkbox:!0,selectAll:!0,selectAllOption:!0,renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},SelectedIndicator={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"Not SelectedIndicator Label",selectAll:!0,selectedIndicator:!1,renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},Chips={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"Non Display as Chips Label",selectAll:!0,chips:!1,renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},CheckboxMarker={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:[options[0]],label:"CheckboxMarker Label",checkbox:!0,checkboxMarker:"Send",selectAll:!0,chips:!1,renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}},SquaredChips={args:{options:[{label:"Test",category:"coding",value:"t1"},{label:"Figma",category:"UI/UX",value:"f1"},{label:"Adobe",category:"UI/UX",value:"a1"},{label:"React",category:"coding",value:"r1"},{label:"Jira",category:"management",value:"j1"}],value:["t1"],label:"CheckboxMarker Label",checkbox:!0,checkboxMarker:!0,selectAll:!0,chips:!0,squaredChips:!1,renderValue:function(value){return value}},render:function(args){var _a=(0,react.useState)(args.value),value=_a[0],setValue=_a[1];return react.createElement(Select_InputMultipleSelect,InputMultipleSelect_stories_extends({},args,{value,onChange:function(e){return setValue(e.target.value)}}))}};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{},{source:_objectSpread({originalSource:"{\n  args: {}\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),AutoWidth.parameters=_objectSpread(_objectSpread({},AutoWidth.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_d=AutoWidth.parameters)||void 0===_d?void 0:_d.docs),{},{source:_objectSpread({originalSource:"{\n  args: {},\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_f=null===(_e=AutoWidth.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),Components.parameters=_objectSpread(_objectSpread({},Components.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_g=Components.parameters)||void 0===_g?void 0:_g.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    alignActions: 'flex-start',\n    startCmp: 'Email',\n    endCmp: 'Fingerprint',\n    options,\n    label: 'Align Actions',\n    value: [options[0]],\n    cmpSpacing: 3,\n    nullable: true,\n    hideStartActionsOnEmpty: true\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_j=null===(_h=Components.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),ExternalComponents.parameters=_objectSpread(_objectSpread({},ExternalComponents.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_k=ExternalComponents.parameters)||void 0===_k?void 0:_k.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    alignActionsExternal: 'flex-start',\n    startCmpExternal: 'Email',\n    endCmpExternal: 'Fingerprint',\n    options,\n    label: 'Align Actions',\n    value: [options[0]],\n    cmpSpacing: 3\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_m=null===(_l=ExternalComponents.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),Colors.parameters=_objectSpread(_objectSpread({},Colors.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_o=Colors.parameters)||void 0===_o?void 0:_o.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    label: 'colors',\n    value: [options[0]],\n    colorActive: '#D001D0',\n    colorLabel: 'secondary',\n    colorText: 'warning.dark'\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_q=null===(_p=Colors.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),HelperText.parameters=_objectSpread(_objectSpread({},HelperText.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_r=HelperText.parameters)||void 0===_r?void 0:_r.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    label: 'colors',\n    value: [options[0]],\n    helperText: 'choose you best language'\n  }\n}"},null===(_t=null===(_s=HelperText.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),Error.parameters=_objectSpread(_objectSpread({},Error.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_u=Error.parameters)||void 0===_u?void 0:_u.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    label: 'Error',\n    value: [options[0]],\n    helperText: 'choose you best language',\n    error: true\n  }\n}"},null===(_w=null===(_v=Error.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})}),Disabled.parameters=_objectSpread(_objectSpread({},Disabled.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_x=Disabled.parameters)||void 0===_x?void 0:_x.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    label: 'Disabled',\n    value: [options[0]],\n    disabled: true\n  }\n}"},null===(_z=null===(_y=Disabled.parameters)||void 0===_y?void 0:_y.docs)||void 0===_z?void 0:_z.source)})}),ReadOnly.parameters=_objectSpread(_objectSpread({},ReadOnly.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_0=ReadOnly.parameters)||void 0===_0?void 0:_0.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    label: 'ReadOnly',\n    value: [options[0]],\n    readOnly: true\n  }\n}"},null===(_2=null===(_1=ReadOnly.parameters)||void 0===_1?void 0:_1.docs)||void 0===_2?void 0:_2.source)})}),Label.parameters=_objectSpread(_objectSpread({},Label.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_3=Label.parameters)||void 0===_3?void 0:_3.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Languages'\n  }\n}"},null===(_5=null===(_4=Label.parameters)||void 0===_4?void 0:_4.docs)||void 0===_5?void 0:_5.source)})}),fullWidth.parameters=_objectSpread(_objectSpread({},fullWidth.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_6=fullWidth.parameters)||void 0===_6?void 0:_6.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Full Width',\n    fullWidth: true\n  }\n}"},null===(_8=null===(_7=fullWidth.parameters)||void 0===_7?void 0:_7.docs)||void 0===_8?void 0:_8.source)})}),Nullable.parameters=_objectSpread(_objectSpread({},Nullable.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_9=Nullable.parameters)||void 0===_9?void 0:_9.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Nullable',\n    nullable: true\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_11=null===(_10=Nullable.parameters)||void 0===_10?void 0:_10.docs)||void 0===_11?void 0:_11.source)})}),PlaceholderOption.parameters=_objectSpread(_objectSpread({},PlaceholderOption.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_12=PlaceholderOption.parameters)||void 0===_12?void 0:_12.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [undefined],\n    label: 'Placeholder Option',\n    placeholderOption: 'placeholder option here',\n    nullable: true\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_14=null===(_13=PlaceholderOption.parameters)||void 0===_13?void 0:_13.docs)||void 0===_14?void 0:_14.source)})}),Required.parameters=_objectSpread(_objectSpread({},Required.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_15=Required.parameters)||void 0===_15?void 0:_15.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Required',\n    required: true\n  }\n}"},null===(_17=null===(_16=Required.parameters)||void 0===_16?void 0:_16.docs)||void 0===_17?void 0:_17.source)})}),OnEvents.parameters=_objectSpread(_objectSpread({},OnEvents.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_18=OnEvents.parameters)||void 0===_18?void 0:_18.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Focused',\n    focused: true,\n    onBlur: event => console.log('onBlur', event),\n    onChange: event => console.log('onChange', event),\n    onFocus: event => console.log('onFocus', event)\n  }\n}"},null===(_20=null===(_19=OnEvents.parameters)||void 0===_19?void 0:_19.docs)||void 0===_20?void 0:_20.source)})}),Margin.parameters=_objectSpread(_objectSpread({},Margin.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_21=Margin.parameters)||void 0===_21?void 0:_21.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options,\n    value: [options[0]],\n    label: 'Margin',\n    margin: 'dense'\n  }\n}"},null===(_23=null===(_22=Margin.parameters)||void 0===_22?void 0:_22.docs)||void 0===_23?void 0:_23.source)})}),Size_.parameters=_objectSpread(_objectSpread({},Size_.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_24=Size_.parameters)||void 0===_24?void 0:_24.docs),{},{source:_objectSpread({originalSource:'args => {\n  const [value, setValue] = useState(args.value ?? []);\n  return <Stack spacing={3}>\n            <InputMultipleSelect options={options} label="Small" size="small" value={value} onChange={e => setValue(e.target.value)} />\n            <InputMultipleSelect options={options} label="Medium" size="medium" value={value} onChange={e => setValue(e.target.value)} />\n        </Stack>;\n}'},null===(_26=null===(_25=Size_.parameters)||void 0===_25?void 0:_25.docs)||void 0===_26?void 0:_26.source)})}),Variant_.parameters=_objectSpread(_objectSpread({},Variant_.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_27=Variant_.parameters)||void 0===_27?void 0:_27.docs),{},{source:_objectSpread({originalSource:'args => {\n  const [value, setValue] = useState(args.value ?? []);\n  return <Stack spacing={3}>\n            <InputMultipleSelect options={options} label="Filled" variant="filled" value={value} onChange={e => setValue(e.target.value)} nullable />\n            <InputMultipleSelect options={options} label="Outlined" variant="outlined" value={value} onChange={e => setValue(e.target.value)} nullable />\n            <InputMultipleSelect options={options} label="Standard" variant="standard" value={value} onChange={e => setValue(e.target.value)} nullable />\n        </Stack>;\n}'},null===(_29=null===(_28=Variant_.parameters)||void 0===_28?void 0:_28.docs)||void 0===_29?void 0:_29.source)})}),Options.parameters=_objectSpread(_objectSpread({},Options.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_30=Options.parameters)||void 0===_30?void 0:_30.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Options'\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_32=null===(_31=Options.parameters)||void 0===_31?void 0:_31.docs)||void 0===_32?void 0:_32.source)})}),GroupBy.parameters=_objectSpread(_objectSpread({},GroupBy.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_33=GroupBy.parameters)||void 0===_33?void 0:_33.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Group By',\n    groupBy: 'category'\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_35=null===(_34=GroupBy.parameters)||void 0===_34?void 0:_34.docs)||void 0===_35?void 0:_35.source)})}),RenderValue.parameters=_objectSpread(_objectSpread({},RenderValue.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_36=RenderValue.parameters)||void 0===_36?void 0:_36.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Render Value',\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_38=null===(_37=RenderValue.parameters)||void 0===_37?void 0:_37.docs)||void 0===_38?void 0:_38.source)})}),MultiMax.parameters=_objectSpread(_objectSpread({},MultiMax.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_39=MultiMax.parameters)||void 0===_39?void 0:_39.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'MultiMax Label',\n    max: 3,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_41=null===(_40=MultiMax.parameters)||void 0===_40?void 0:_40.docs)||void 0===_41?void 0:_41.source)})}),SelectAll.parameters=_objectSpread(_objectSpread({},SelectAll.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_42=SelectAll.parameters)||void 0===_42?void 0:_42.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Select All Label',\n    selectAll: true,\n    selectAllOption: true,\n    nullable: 'None Selection',\n    placeholderOption: 'Choose from list:',\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_44=null===(_43=SelectAll.parameters)||void 0===_43?void 0:_43.docs)||void 0===_44?void 0:_44.source)})}),MultiCheckbox.parameters=_objectSpread(_objectSpread({},MultiCheckbox.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_45=MultiCheckbox.parameters)||void 0===_45?void 0:_45.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'MultiCheckbox Label',\n    checkbox: true,\n    selectAll: true,\n    selectAllOption: true,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_47=null===(_46=MultiCheckbox.parameters)||void 0===_46?void 0:_46.docs)||void 0===_47?void 0:_47.source)})}),SelectedIndicator.parameters=_objectSpread(_objectSpread({},SelectedIndicator.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_48=SelectedIndicator.parameters)||void 0===_48?void 0:_48.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Not SelectedIndicator Label',\n    selectAll: true,\n    selectedIndicator: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_50=null===(_49=SelectedIndicator.parameters)||void 0===_49?void 0:_49.docs)||void 0===_50?void 0:_50.source)})}),Chips.parameters=_objectSpread(_objectSpread({},Chips.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_51=Chips.parameters)||void 0===_51?void 0:_51.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'Non Display as Chips Label',\n    selectAll: true,\n    chips: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_53=null===(_52=Chips.parameters)||void 0===_52?void 0:_52.docs)||void 0===_53?void 0:_53.source)})}),CheckboxMarker.parameters=_objectSpread(_objectSpread({},CheckboxMarker.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_54=CheckboxMarker.parameters)||void 0===_54?void 0:_54.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: [options[0]],\n    label: 'CheckboxMarker Label',\n    checkbox: true,\n    checkboxMarker: 'Send',\n    selectAll: true,\n    chips: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_56=null===(_55=CheckboxMarker.parameters)||void 0===_55?void 0:_55.docs)||void 0===_56?void 0:_56.source)})}),SquaredChips.parameters=_objectSpread(_objectSpread({},SquaredChips.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_57=SquaredChips.parameters)||void 0===_57?void 0:_57.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    options: [{\n      label: 'Test',\n      category: 'coding',\n      value: 't1'\n    }, {\n      label: 'Figma',\n      category: 'UI/UX',\n      value: 'f1'\n    }, {\n      label: 'Adobe',\n      category: 'UI/UX',\n      value: 'a1'\n    }, {\n      label: 'React',\n      category: 'coding',\n      value: 'r1'\n    }, {\n      label: 'Jira',\n      category: 'management',\n      value: 'j1'\n    }],\n    value: ['t1'],\n    label: 'CheckboxMarker Label',\n    checkbox: true,\n    checkboxMarker: true,\n    selectAll: true,\n    chips: true,\n    squaredChips: false,\n    renderValue: value => value\n  },\n  render: args => {\n    const [value, setValue] = useState(args.value);\n    return <InputMultipleSelect {...args} value={value} onChange={e => setValue(e.target.value)} />;\n  }\n}"},null===(_59=null===(_58=SquaredChips.parameters)||void 0===_58?void 0:_58.docs)||void 0===_59?void 0:_59.source)})});var __namedExportsOrder=["Default","AutoWidth","Components","ExternalComponents","Colors","HelperText","Error","Disabled","ReadOnly","Label","fullWidth","Nullable","PlaceholderOption","Required","OnEvents","Margin","Size_","Variant_","Options","GroupBy","RenderValue","MultiMax","SelectAll","MultiCheckbox","SelectedIndicator","Chips","CheckboxMarker","SquaredChips"];try{Size_.displayName="Size_",Size_.__docgenInfo={description:"",displayName:"Size_",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Select/__stories__/InputMultipleSelect.stories.tsx#Size_"]={docgenInfo:Size_.__docgenInfo,name:"Size_",path:"src/components/_FIXED/Select/__stories__/InputMultipleSelect.stories.tsx#Size_"})}catch(__react_docgen_typescript_loader_error){}try{Variant_.displayName="Variant_",Variant_.__docgenInfo={description:"",displayName:"Variant_",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Select/__stories__/InputMultipleSelect.stories.tsx#Variant_"]={docgenInfo:Variant_.__docgenInfo,name:"Variant_",path:"src/components/_FIXED/Select/__stories__/InputMultipleSelect.stories.tsx#Variant_"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/_FIXED/Chip/Chip.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>_FIXED_Chip_Chip});var react=__webpack_require__("./node_modules/react/index.js"),get=__webpack_require__("./node_modules/lodash-es/get.js"),Chip=__webpack_require__("./node_modules/@mui/material/Chip/Chip.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),colorManipulator=__webpack_require__("./node_modules/@mui/system/esm/colorManipulator.js"),styled=__webpack_require__("./node_modules/@mui/material/styles/styled.js"),__makeTemplateObject=function(cooked,raw){return Object.defineProperty?Object.defineProperty(cooked,"raw",{value:raw}):cooked.raw=raw,cooked};var templateObject_1,templateObject_2,templateObject_3,templateObject_4,templateObject_5,templateObject_6,templateObject_7,Chip_styled_Chip=(0,styled.ZP)(Chip.Z,{shouldForwardProp:function(propName){return!["textColor","customColor","multiLine","useStyleBreadCrumb","rounded","alignEndIcon"].includes(propName)}})(templateObject_7||(templateObject_7=__makeTemplateObject(["\n    border-radius: ",";\n    background-color: ",";\n    color: ",";\n    ","\n    ","\n    ","\n"],["\n    border-radius: ",";\n    background-color: ",";\n    color: ",";\n    ","\n    ","\n    ","\n"])),(function(props){return props.rounded?void 0:"4px"}),(function(props){return props.customColor}),(function(props){return props.textColor}),(function multiLineStyle(props){return props.multiLine?(0,emotion_react_browser_esm.iv)(templateObject_4||(templateObject_4=__makeTemplateObject(["\n        height: auto;\n        & .MuiChip-label {\n            display: block;\n            white-space: normal;\n        }\n    "],["\n        height: auto;\n        & .MuiChip-label {\n            display: block;\n            white-space: normal;\n        }\n    "]))):(0,emotion_react_browser_esm.iv)(templateObject_3||(templateObject_3=__makeTemplateObject([""],[""])))}),(function chipBreadCrumbsStyle(props){var _a;if(!props.useStyleBreadCrumb)return(0,emotion_react_browser_esm.iv)(templateObject_1||(templateObject_1=__makeTemplateObject([""],[""])));var theme=props.theme,muiColor=props.color,customColor=props.customColor,_textColor=props.textColor,backgroundColor=(0,get.Z)(theme,"palette.".concat(muiColor,".main"),(null!==(_a=null!=muiColor?muiColor:customColor)&&void 0!==_a?_a:"light"===theme.palette.mode)?theme.palette.grey[100]:theme.palette.grey[800]),textColor=(0,get.Z)(theme,"palette.".concat(muiColor,".contrastText"),null!=_textColor?_textColor:theme.palette.text.primary);return(0,emotion_react_browser_esm.iv)(templateObject_2||(templateObject_2=__makeTemplateObject(["\n        height: ",";\n        color: ",";\n        font-weight: ",";\n        \n        &:hover, &:focus {\n          background-color: ",";\n        }\n        \n        &:active {\n          box-shadow: ",";\n          background-color: ",";\n        },\n  "],["\n        height: ",";\n        color: ",";\n        font-weight: ",";\n        \n        &:hover, &:focus {\n          background-color: ",";\n        }\n        \n        &:active {\n          box-shadow: ",";\n          background-color: ",";\n        },\n  "])),theme.spacing(3),textColor,theme.typography.fontWeightRegular,backgroundColor&&(0,colorManipulator._4)(backgroundColor,.06),theme.shadows[1],backgroundColor&&(0,colorManipulator._4)(backgroundColor,.12))}),(function alignEndIconStyle(props){return props.alignEndIcon?(0,emotion_react_browser_esm.iv)(templateObject_6||(templateObject_6=__makeTemplateObject(["\n        & .MuiChip-deleteIcon {\n            position: absolute;\n            right: 0;\n        }\n    "],["\n        & .MuiChip-deleteIcon {\n            position: absolute;\n            right: 0;\n        }\n    "]))):(0,emotion_react_browser_esm.iv)(templateObject_5||(templateObject_5=__makeTemplateObject([""],[""])))})),helpers=__webpack_require__("./src/utils/helpers.ts"),SVGIcon=__webpack_require__("./src/components/SVGIcon/SVGIcon.tsx"),_excluded=["children","color","endIcon","label","link","minWidth","onDelete","startIcon","sx","textColor","width"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function Chip_Chip(props){var children=props.children,color=props.color,endIcon=props.endIcon,label=props.label,href=props.link,minWidth=props.minWidth,onDelete=props.onDelete,startIcon=props.startIcon,sx=props.sx,_textColor=props.textColor,width=props.width,rest=_objectWithoutProperties(props,_excluded),_a=(0,helpers.Ek)(color),customColor=_a[0],muiColor=_a[1],textColor=(0,helpers.Ek)(_textColor)[0],linkProps=href&&{href,component:"a",clickable:!0},onDeleteHandler=(null!=onDelete?onDelete:endIcon)?function(){}:void 0;return react.createElement(Chip_styled_Chip,_extends({color:muiColor,customColor:muiColor?void 0:customColor,deleteIcon:"string"==typeof endIcon?react.createElement(SVGIcon.Z,null,endIcon):endIcon,icon:"string"==typeof startIcon?react.createElement(SVGIcon.Z,null,startIcon):startIcon,label:null!=label?label:children,onDelete:onDeleteHandler,sx:_objectSpread(_objectSpread({},sx),{},{minWidth,width:null!=width?width:"auto"}),textColor},linkProps,rest))}Chip_Chip.displayName="Chip",Chip_Chip.defaultProps={alignEndIcon:void 0,avatar:void 0,useStyleBreadCrumb:void 0,color:void 0,disabled:void 0,endIcon:void 0,label:void 0,link:void 0,minWidth:void 0,multiLine:void 0,onClick:void 0,onDelete:void 0,rounded:!0,size:void 0,startIcon:void 0,width:void 0};const _FIXED_Chip_Chip=Chip_Chip;try{Chip_Chip.displayName="Chip",Chip_Chip.__docgenInfo={description:"",displayName:"Chip",props:{alignEndIcon:{defaultValue:{value:"undefined"},description:"",name:"alignEndIcon",required:!1,type:{name:"boolean"}},avatar:{defaultValue:{value:"undefined"},description:"",name:"avatar",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},useStyleBreadCrumb:{defaultValue:{value:"undefined"},description:"",name:"useStyleBreadCrumb",required:!1,type:{name:"boolean"}},color:{defaultValue:{value:"undefined"},description:"",name:"color",required:!1,type:{name:"string"}},disabled:{defaultValue:{value:"undefined"},description:"",name:"disabled",required:!1,type:{name:"boolean"}},endIcon:{defaultValue:{value:"undefined"},description:"",name:"endIcon",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},label:{defaultValue:{value:"undefined"},description:"",name:"label",required:!1,type:{name:"string"}},link:{defaultValue:{value:"undefined"},description:"",name:"link",required:!1,type:{name:"string"}},minWidth:{defaultValue:{value:"undefined"},description:"",name:"minWidth",required:!1,type:{name:"string | number"}},multiLine:{defaultValue:{value:"undefined"},description:"",name:"multiLine",required:!1,type:{name:"boolean"}},onClick:{defaultValue:{value:"undefined"},description:"",name:"onClick",required:!1,type:{name:"() => void"}},onDelete:{defaultValue:{value:"undefined"},description:"",name:"onDelete",required:!1,type:{name:"() => void"}},rounded:{defaultValue:{value:"true"},description:"",name:"rounded",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"undefined"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"medium"'},{value:'"small"'}]}},startIcon:{defaultValue:{value:"undefined"},description:"",name:"startIcon",required:!1,type:{name:"ReactNode"}},sx:{defaultValue:null,description:"",name:"sx",required:!1,type:{name:"SxProps"}},textColor:{defaultValue:null,description:"",name:"textColor",required:!1,type:{name:"string"}},width:{defaultValue:{value:"undefined"},description:"",name:"width",required:!1,type:{name:"string | number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Chip/Chip.tsx#Chip"]={docgenInfo:Chip_Chip.__docgenInfo,name:"Chip",path:"src/components/_FIXED/Chip/Chip.tsx#Chip"})}catch(__react_docgen_typescript_loader_error){}}}]);