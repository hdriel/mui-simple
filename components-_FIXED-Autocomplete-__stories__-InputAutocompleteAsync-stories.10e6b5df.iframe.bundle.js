"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[3437],{"./src/components/_FIXED/Autocomplete/__stories__/InputAutocompleteAsync.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,FilmOptions:()=>FilmOptions,GroupBy:()=>GroupBy,IncludeInputInList:()=>IncludeInputInList,Keys:()=>Keys,OptionsConverter:()=>OptionsConverter,OptionsObjectList:()=>OptionsObjectList,OptionsStringList:()=>OptionsStringList,OptionsWithDisabled:()=>OptionsWithDisabled,Placeholder:()=>Placeholder,RenderOption:()=>RenderOption,Sort:()=>Sort,StartCmpExternal:()=>StartCmpExternal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>InputAutocompleteAsync_stories});var react=__webpack_require__("./node_modules/react/index.js"),Stack=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),Box=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),InputAutocomplete=__webpack_require__("./src/components/_FIXED/Autocomplete/InputAutocomplete.tsx"),useAutoCompleteAsync=__webpack_require__("./src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx");const _excluded=["getOptionsPromise","sleep","getOptionsCallback","fetchOptionsOnFocus","LOADING_LABEL"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const InputAutocompleteAsync=_ref=>{let{getOptionsPromise,sleep=0,getOptionsCallback,fetchOptionsOnFocus,LOADING_LABEL}=_ref,props=function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}(_ref,_excluded);const asyncProps=(0,useAutoCompleteAsync.c)({LOADING_LABEL,getOptionsPromise,sleep,getOptionsCallback,fetchOptionsOnFocus});return react.createElement(InputAutocomplete.A,_extends({},props,asyncProps))};InputAutocompleteAsync.displayName="InputAutocompleteAsync",InputAutocompleteAsync.displayName="InputAutocompleteAsync";const Autocomplete_InputAutocompleteAsync=InputAutocompleteAsync;try{InputAutocompleteAsync.displayName="InputAutocompleteAsync",InputAutocompleteAsync.__docgenInfo={description:"",displayName:"InputAutocompleteAsync",props:{autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"boolean"}},autoHighlight:{defaultValue:null,description:"",name:"autoHighlight",required:!1,type:{name:"boolean"}},blurOnSelect:{defaultValue:null,description:"",name:"blurOnSelect",required:!1,type:{name:"boolean"}},chipProps:{defaultValue:null,description:"",name:"chipProps",required:!1,type:{name:"ChipProps | ((props: any) => ChipProps)"}},clearOnBlur:{defaultValue:null,description:"",name:"clearOnBlur",required:!1,type:{name:"boolean"}},clearOnPressEscape:{defaultValue:null,description:"",name:"clearOnPressEscape",required:!1,type:{name:"boolean"}},creationAllowed:{defaultValue:null,description:"",name:"creationAllowed",required:!1,type:{name:"boolean"}},CREATION_PREFIX_LABEL:{defaultValue:null,description:"",name:"CREATION_PREFIX_LABEL",required:!1,type:{name:"string"}},NO_OPTIONS_LABEL:{defaultValue:null,description:"",name:"NO_OPTIONS_LABEL",required:!1,type:{name:"string"}},disableClearableSolo:{defaultValue:null,description:"",name:"disableClearableSolo",required:!1,type:{name:"boolean"}},disableCloseOnSelect:{defaultValue:null,description:"",name:"disableCloseOnSelect",required:!1,type:{name:"boolean"}},disableListWrap:{defaultValue:null,description:"",name:"disableListWrap",required:!1,type:{name:"boolean"}},disablePortal:{defaultValue:null,description:"",name:"disablePortal",required:!1,type:{name:"boolean"}},fieldId:{defaultValue:null,description:"",name:"fieldId",required:!1,type:{name:"string"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((...args: any) => ElementType) | { ignoreAccents?: boolean; ignoreCase?: boolean; limitResultOptions?: number; matchFrom?: string; stringify?: string | (() => void); trim?: boolean; }"}},filterSelectedOptions:{defaultValue:null,description:"",name:"filterSelectedOptions",required:!1,type:{name:"boolean"}},freeSolo:{defaultValue:null,description:"",name:"freeSolo",required:!1,type:{name:"boolean"}},getOptionLabel:{defaultValue:null,description:"",name:"getOptionLabel",required:!1,type:{name:"string | ((option: any) => string)"}},groupBy:{defaultValue:null,description:"",name:"groupBy",required:!1,type:{name:"string | ((option: any) => any)"}},handleHomeEndKeys:{defaultValue:null,description:"",name:"handleHomeEndKeys",required:!1,type:{name:"boolean"}},hideStartActionsOnEmpty:{defaultValue:null,description:"",name:"hideStartActionsOnEmpty",required:!1,type:{name:"boolean"}},highlightField:{defaultValue:null,description:"",name:"highlightField",required:!1,type:{name:"string"}},highlightSearchResults:{defaultValue:null,description:"",name:"highlightSearchResults",required:!1,type:{name:"boolean"}},includeInputInList:{defaultValue:null,description:"",name:"includeInputInList",required:!1,type:{name:"boolean"}},multiple:{defaultValue:null,description:"",name:"multiple",required:!1,type:{name:"boolean"}},openOnFocus:{defaultValue:null,description:"",name:"openOnFocus",required:!1,type:{name:"boolean"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"(string | number | Record<string, any> | InputAutoCompleteOptionItem)[]"}},optionConverter:{defaultValue:null,description:"",name:"optionConverter",required:!1,type:{name:"(item: any, index: number) => InputAutoCompleteOptionItem"}},padding:{defaultValue:null,description:"",name:"padding",required:!1,type:{name:"string | number"}},raiseSelectedToTop:{defaultValue:null,description:"",name:"raiseSelectedToTop",required:!1,type:{name:"boolean"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"(props: object, option: any, { selected }: { selected: boolean; }) => ElementType"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"any"}},selectOnFocus:{defaultValue:null,description:"",name:"selectOnFocus",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(event: any, optionId: string | number, action?: string) => void"}},sortBy:{defaultValue:null,description:"",name:"sortBy",required:!1,type:{name:"string | (() => void)"}},sortDir:{defaultValue:null,description:"",name:"sortDir",required:!1,type:{name:"number | boolean"}},getOptionsPromise:{defaultValue:null,description:"",name:"getOptionsPromise",required:!1,type:{name:"() => void"}},sleep:{defaultValue:{value:"0"},description:"",name:"sleep",required:!1,type:{name:"number"}},fetchOptionsOnFocus:{defaultValue:null,description:"",name:"fetchOptionsOnFocus",required:!1,type:{name:"boolean"}},LOADING_LABEL:{defaultValue:null,description:"",name:"LOADING_LABEL",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Autocomplete/InputAutocompleteAsync.tsx#InputAutocompleteAsync"]={docgenInfo:InputAutocompleteAsync.__docgenInfo,name:"InputAutocompleteAsync",path:"src/components/_FIXED/Autocomplete/InputAutocompleteAsync.tsx#InputAutocompleteAsync"})}catch(__react_docgen_typescript_loader_error){}var InputAutocomplete_mocks=__webpack_require__("./src/components/_FIXED/Autocomplete/__stories__/InputAutocomplete.mocks.ts");const InputAutocompleteAsync_stories_excluded=["title"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==typeof i?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function InputAutocompleteAsync_stories_extends(){return InputAutocompleteAsync_stories_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},InputAutocompleteAsync_stories_extends.apply(null,arguments)}const InputAutocompleteAsync_stories={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Box, Stack } from '@mui/material';\n\nimport InputAutocompleteAsync from '../InputAutocompleteAsync';\nimport { countries, timeSlots, top100Films, top100FilmsWithFirstLetters } from './InputAutocomplete.mocks';\n\nconst meta: Meta<typeof InputAutocompleteAsync> = {\n    title: 'Inputs/Inputs/Autocomplete/InputAutocompleteAsync',\n    component: InputAutocompleteAsync,\n    tags: ['autodocs'],\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof InputAutocompleteAsync>;\n\nexport const Default: Story = {\n    args: {},\n};\n\nconst OPTIONS = [\n    { title: 'The Shawshank Redemption', year: 1994, id: 0 },\n    { title: 'The Godfather', year: 1972, id: 1 },\n    { title: 'The Godfather: Part II', year: 1974, id: 2 },\n    { title: 'The Dark Knight', year: 2008, id: 3 },\n    { title: '12 Angry Men', year: 1957, id: 4 },\n    { title: \"Schindler's List\", year: 1993, id: 5 },\n    { title: 'Pulp Fiction', year: 1994, id: 6 },\n];\n\nconst render = (args) => {\n    const [selectedOption, setSelectedOption] = useState(args.value ?? null);\n\n    return (\n        <InputAutocompleteAsync {...args} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} />\n    );\n};\n\nexport const IncludeInputInList: Story = {\n    args: {\n        label: 'Movie',\n        includeInputInList: false,\n        sleep: 1e3,\n        getOptionsPromise: async () => OPTIONS.map(({ title, ...item }) => ({ ...item, label: title })),\n    },\n    render,\n};\n\nexport const OptionsStringList: Story = {\n    args: {\n        label: 'Movie',\n        getOptionsPromise: async () => OPTIONS.map((o) => o.title),\n        sleep: 1e3,\n        value: ['The Dark Knight'],\n    },\n    render,\n};\n\nexport const OptionsObjectList: Story = {\n    args: {\n        label: 'Movie',\n        getOptionsPromise: async () => OPTIONS,\n        sleep: 1e3,\n        getOptionLabel: 'title',\n    },\n    render,\n};\n\nexport const OptionsConverter: Story = {\n    args: {\n        label: 'Movie',\n        getOptionsPromise: async () => OPTIONS,\n        sleep: 1e3,\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const Placeholder: Story = {\n    args: {\n        label: 'Movie',\n        getOptionsPromise: async () => OPTIONS,\n        placeholder: 'choose you movie name',\n        sleep: 1e3,\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const StartCmpExternal: Story = {\n    args: {\n        label: 'Movie',\n        getOptionsPromise: async () => OPTIONS,\n        startCmpExternal: 'Tv',\n        sleep: 1e3,\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const Sort: Story = {\n    args: {\n        label: 'Movie',\n        getOptionsPromise: async () => OPTIONS,\n        sortBy: 'year',\n        sortDir: -1,\n        sleep: 1e3,\n        optionConverter: (item, index) => ({ id: index, label: `${item.title} (${item.year})`, year: item.year }),\n    },\n    render,\n};\n\nexport const FilmOptions = () => {\n    const [selectedOption, setSelectedOption] = useState(null);\n\n    return (\n        <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map((variant) => (\n                <InputAutocompleteAsync\n                    key={variant}\n                    // getOptionLabel={(option) => option.title}\n                    label=\"Movie\"\n                    optionConverter={(film, index) => ({ id: index, label: `${film.title} (${film.year})` })}\n                    getOptionsPromise={async () => top100Films}\n                    value={selectedOption}\n                    onChange={(e, option) => setSelectedOption(option)}\n                    variant={variant}\n                    sleep={1e3}\n                />\n            ))}\n        </Stack>\n    );\n};\n\nexport const RenderOption: Story = {\n    args: {\n        id: 'grouped-demo',\n        label: 'Choose a country',\n        getOptionsPromise: async () => countries,\n        autoHighlight: true,\n        renderOption: (props, option) => (\n            <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n                <img\n                    loading=\"lazy\"\n                    width=\"20\"\n                    src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\n                    srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\n                    alt=\"\"\n                />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n        ),\n    },\n    render,\n};\n\nexport const GroupBy: Story = {\n    args: {\n        id: 'grouped categories',\n        label: 'Categories',\n        getOptionsPromise: async () => top100FilmsWithFirstLetters,\n        groupBy: (option) => option.firstLetter,\n        sleep: 1e3,\n        sortBy: 'title',\n        getOptionLabel: 'title',\n        width: 400,\n    },\n    render,\n};\n\nexport const OptionsWithDisabled: Story = {\n    args: {\n        id: 'grouped-demo',\n        label: 'Disabled options',\n        fetchOptionsOnFocus: true,\n        sleep: 1e3,\n        getOptionsPromise: async () =>\n            timeSlots.slice(0).map((option, index) => ({ id: index, time: option, disabled: index % 4 === 0 })),\n        getOptionLabel: (option) => option.time,\n        width: 200,\n    },\n    render,\n};\n\n/*\n    openOnFocus: true,\n    readOnly: undefined,\n    selectOnFocus: false,\n    size: undefined,\n    variant: 'outlined',\n*/\n\nexport const Keys = () => {\n    const [selectedOption, setSelectedOption] = useState(null);\n\n    return (\n        <InputAutocompleteAsync\n            id=\"grouped-demo\"\n            label=\"Keys\"\n            value={selectedOption}\n            onChange={(e, option) => setSelectedOption(option)}\n            fetchOptionsOnFocus\n            getOptionsPromise={async () => [\n                {\n                    key: '37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4',\n                    Key: 'videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4',\n                },\n                {\n                    key: 'ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4',\n                    Key: 'videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4',\n                },\n            ]}\n            getOptionLabel=\"key\"\n            fieldId=\"Key\"\n        />\n    );\n};\n",locationsMap:{default:{startLoc:{col:30,line:18},endLoc:{col:1,line:20},startBody:{col:30,line:18},endBody:{col:1,line:20}},"include-input-in-list":{startLoc:{col:41,line:40},endLoc:{col:1,line:48},startBody:{col:41,line:40},endBody:{col:1,line:48}},"options-string-list":{startLoc:{col:40,line:50},endLoc:{col:1,line:58},startBody:{col:40,line:50},endBody:{col:1,line:58}},"options-object-list":{startLoc:{col:40,line:60},endLoc:{col:1,line:68},startBody:{col:40,line:60},endBody:{col:1,line:68}},"options-converter":{startLoc:{col:39,line:70},endLoc:{col:1,line:78},startBody:{col:39,line:70},endBody:{col:1,line:78}},placeholder:{startLoc:{col:34,line:80},endLoc:{col:1,line:89},startBody:{col:34,line:80},endBody:{col:1,line:89}},"start-cmp-external":{startLoc:{col:39,line:91},endLoc:{col:1,line:100},startBody:{col:39,line:91},endBody:{col:1,line:100}},sort:{startLoc:{col:27,line:102},endLoc:{col:1,line:112},startBody:{col:27,line:102},endBody:{col:1,line:112}},"film-options":{startLoc:{col:27,line:114},endLoc:{col:1,line:134},startBody:{col:27,line:114},endBody:{col:1,line:134}},"render-option":{startLoc:{col:35,line:136},endLoc:{col:1,line:156},startBody:{col:35,line:136},endBody:{col:1,line:156}},"group-by":{startLoc:{col:30,line:158},endLoc:{col:1,line:170},startBody:{col:30,line:158},endBody:{col:1,line:170}},"options-with-disabled":{startLoc:{col:42,line:172},endLoc:{col:1,line:184},startBody:{col:42,line:172},endBody:{col:1,line:184}},keys:{startLoc:{col:20,line:194},endLoc:{col:1,line:218},startBody:{col:20,line:194},endBody:{col:1,line:218}}}}},title:"Inputs/Inputs/Autocomplete/InputAutocompleteAsync",component:Autocomplete_InputAutocompleteAsync,tags:["autodocs"]},Default={args:{}},OPTIONS=[{title:"The Shawshank Redemption",year:1994,id:0},{title:"The Godfather",year:1972,id:1},{title:"The Godfather: Part II",year:1974,id:2},{title:"The Dark Knight",year:2008,id:3},{title:"12 Angry Men",year:1957,id:4},{title:"Schindler's List",year:1993,id:5},{title:"Pulp Fiction",year:1994,id:6}],render=args=>{var _args$value;const[selectedOption,setSelectedOption]=(0,react.useState)(null!==(_args$value=args.value)&&void 0!==_args$value?_args$value:null);return react.createElement(Autocomplete_InputAutocompleteAsync,InputAutocompleteAsync_stories_extends({},args,{value:selectedOption,onChange:(e,option)=>setSelectedOption(option)}))};render.displayName="render";const IncludeInputInList={args:{label:"Movie",includeInputInList:!1,sleep:1e3,getOptionsPromise:async()=>OPTIONS.map((_ref=>{let{title}=_ref;return _objectSpread(_objectSpread({},function InputAutocompleteAsync_stories_objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=function InputAutocompleteAsync_stories_objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}(_ref,InputAutocompleteAsync_stories_excluded)),{},{label:title})}))},render},OptionsStringList={args:{label:"Movie",getOptionsPromise:async()=>OPTIONS.map((o=>o.title)),sleep:1e3,value:["The Dark Knight"]},render},OptionsObjectList={args:{label:"Movie",getOptionsPromise:async()=>OPTIONS,sleep:1e3,getOptionLabel:"title"},render},OptionsConverter={args:{label:"Movie",getOptionsPromise:async()=>OPTIONS,sleep:1e3,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},Placeholder={args:{label:"Movie",getOptionsPromise:async()=>OPTIONS,placeholder:"choose you movie name",sleep:1e3,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},StartCmpExternal={args:{label:"Movie",getOptionsPromise:async()=>OPTIONS,startCmpExternal:"Tv",sleep:1e3,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},Sort={args:{label:"Movie",getOptionsPromise:async()=>OPTIONS,sortBy:"year",sortDir:-1,sleep:1e3,optionConverter:(item,index)=>({id:index,label:`${item.title} (${item.year})`,year:item.year})},render},FilmOptions=()=>{const[selectedOption,setSelectedOption]=(0,react.useState)(null);return react.createElement(Stack.A,{spacing:4},["filled","standard","outlined"].map((variant=>react.createElement(Autocomplete_InputAutocompleteAsync,{key:variant,label:"Movie",optionConverter:(film,index)=>({id:index,label:`${film.title} (${film.year})`}),getOptionsPromise:async()=>InputAutocomplete_mocks.S1,value:selectedOption,onChange:(e,option)=>setSelectedOption(option),variant,sleep:1e3}))))};FilmOptions.displayName="FilmOptions";const RenderOption={args:{id:"grouped-demo",label:"Choose a country",getOptionsPromise:async()=>InputAutocomplete_mocks.Xr,autoHighlight:!0,renderOption:(props,option)=>react.createElement(Box.A,InputAutocompleteAsync_stories_extends({component:"li",sx:{"& > img":{mr:2,flexShrink:0}}},props),react.createElement("img",{loading:"lazy",width:"20",src:`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`,srcSet:`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`,alt:""}),option.label," (",option.code,") +",option.phone)},render},GroupBy={args:{id:"grouped categories",label:"Categories",getOptionsPromise:async()=>InputAutocomplete_mocks.Xx,groupBy:option=>option.firstLetter,sleep:1e3,sortBy:"title",getOptionLabel:"title",width:400},render},OptionsWithDisabled={args:{id:"grouped-demo",label:"Disabled options",fetchOptionsOnFocus:!0,sleep:1e3,getOptionsPromise:async()=>InputAutocomplete_mocks.Vw.slice(0).map(((option,index)=>({id:index,time:option,disabled:index%4==0}))),getOptionLabel:option=>option.time,width:200},render},Keys=()=>{const[selectedOption,setSelectedOption]=(0,react.useState)(null);return react.createElement(Autocomplete_InputAutocompleteAsync,{id:"grouped-demo",label:"Keys",value:selectedOption,onChange:(e,option)=>setSelectedOption(option),fetchOptionsOnFocus:!0,getOptionsPromise:async()=>[{key:"37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4",Key:"videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4"},{key:"ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4",Key:"videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4"}],getOptionLabel:"key",fieldId:"Key"})};Keys.displayName="Keys",Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {}\n}",...Default.parameters?.docs?.source}}},IncludeInputInList.parameters={...IncludeInputInList.parameters,docs:{...IncludeInputInList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    sleep: 1e3,\n    getOptionsPromise: async () => OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n}",...IncludeInputInList.parameters?.docs?.source}}},OptionsStringList.parameters={...OptionsStringList.parameters,docs:{...OptionsStringList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS.map(o => o.title),\n    sleep: 1e3,\n    value: ['The Dark Knight']\n  },\n  render\n}",...OptionsStringList.parameters?.docs?.source}}},OptionsObjectList.parameters={...OptionsObjectList.parameters,docs:{...OptionsObjectList.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sleep: 1e3,\n    getOptionLabel: 'title'\n  },\n  render\n}",...OptionsObjectList.parameters?.docs?.source}}},OptionsConverter.parameters={...OptionsConverter.parameters,docs:{...OptionsConverter.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...OptionsConverter.parameters?.docs?.source}}},Placeholder.parameters={...Placeholder.parameters,docs:{...Placeholder.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    placeholder: 'choose you movie name',\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...Placeholder.parameters?.docs?.source}}},StartCmpExternal.parameters={...StartCmpExternal.parameters,docs:{...StartCmpExternal.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    startCmpExternal: 'Tv',\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...StartCmpExternal.parameters?.docs?.source}}},Sort.parameters={...Sort.parameters,docs:{...Sort.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Movie',\n    getOptionsPromise: async () => OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    sleep: 1e3,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}",...Sort.parameters?.docs?.source}}},FilmOptions.parameters={...FilmOptions.parameters,docs:{...FilmOptions.parameters?.docs,source:{originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocompleteAsync key={variant}\n    // getOptionLabel={(option) => option.title}\n    label=\"Movie\" optionConverter={(film, index) => ({\n      id: index,\n      label: `${film.title} (${film.year})`\n    })} getOptionsPromise={async () => top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} sleep={1e3} />)}\n        </Stack>;\n}",...FilmOptions.parameters?.docs?.source}}},RenderOption.parameters={...RenderOption.parameters,docs:{...RenderOption.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: \'grouped-demo\',\n    label: \'Choose a country\',\n    getOptionsPromise: async () => countries,\n    autoHighlight: true,\n    renderOption: (props, option) => <Box component="li" sx={{\n      \'& > img\': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n}',...RenderOption.parameters?.docs?.source}}},GroupBy.parameters={...GroupBy.parameters,docs:{...GroupBy.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    getOptionsPromise: async () => top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sleep: 1e3,\n    sortBy: 'title',\n    getOptionLabel: 'title',\n    width: 400\n  },\n  render\n}",...GroupBy.parameters?.docs?.source}}},OptionsWithDisabled.parameters={...OptionsWithDisabled.parameters,docs:{...OptionsWithDisabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    fetchOptionsOnFocus: true,\n    sleep: 1e3,\n    getOptionsPromise: async () => timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n}",...OptionsWithDisabled.parameters?.docs?.source}}},Keys.parameters={...Keys.parameters,docs:{...Keys.parameters?.docs,source:{originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <InputAutocompleteAsync id=\"grouped-demo\" label=\"Keys\" value={selectedOption} onChange={(e, option) => setSelectedOption(option)} fetchOptionsOnFocus getOptionsPromise={async () => [{\n    key: '37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4',\n    Key: 'videos/js-full-power/37913a6c-5f35-4299-98dc-c1c31b837b30-1701175439414-156418 (1080p).mp4'\n  }, {\n    key: 'ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4',\n    Key: 'videos/js-full-power/ab8a3070-e675-43ea-a513-8af858b585d0-1701178267985-download_-_74710 (540p).mp4'\n  }]} getOptionLabel=\"key\" fieldId=\"Key\" />;\n}",...Keys.parameters?.docs?.source}}};const __namedExportsOrder=["Default","IncludeInputInList","OptionsStringList","OptionsObjectList","OptionsConverter","Placeholder","StartCmpExternal","Sort","FilmOptions","RenderOption","GroupBy","OptionsWithDisabled","Keys"]},"./src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>useAutoCompleteAsync});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_utils_helpers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/utils/helpers.ts"),_Progress_CircularProgress_CircularProgress__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/_FIXED/Progress/CircularProgress/CircularProgress.tsx");function useAutoCompleteAsync({LOADING_LABEL,getOptionsPromise,sleep:_sleep,getOptionsCallback,fetchOptionsOnFocus}){const[open,setOpen]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[options,setOptions]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),[loading,setLoading]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{let active=!0;if(open&&!options.length)return getOptionsPromise&&(setLoading(!0),getOptionsPromise().then((async options=>(await(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_1__.yy)(_sleep),options))).then((async options=>{var _getOptionsCallback;return null!==(_getOptionsCallback=null==getOptionsCallback?void 0:getOptionsCallback())&&void 0!==_getOptionsCallback?_getOptionsCallback:[...options]})).then((options=>active&&setOptions(options))).finally((()=>setLoading(!1)))),()=>{active=!1}}),[open]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{!open&&fetchOptionsOnFocus&&setOptions([])}),[open,fetchOptionsOnFocus]);const endCmp=loading?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Progress_CircularProgress_CircularProgress__WEBPACK_IMPORTED_MODULE_2__.A,{color:"inherit",size:20}):null;return{onOpen:()=>setOpen(!0),onClose:()=>setOpen(!1),options,open,loading,endCmp,loadingText:LOADING_LABEL}}try{useAutoCompleteAsync.displayName="useAutoCompleteAsync",useAutoCompleteAsync.__docgenInfo={description:"",displayName:"useAutoCompleteAsync",props:{LOADING_LABEL:{defaultValue:null,description:"",name:"LOADING_LABEL",required:!0,type:{name:"any"}},getOptionsPromise:{defaultValue:null,description:"",name:"getOptionsPromise",required:!0,type:{name:"any"}},sleep:{defaultValue:null,description:"",name:"sleep",required:!0,type:{name:"any"}},getOptionsCallback:{defaultValue:null,description:"",name:"getOptionsCallback",required:!0,type:{name:"any"}},fetchOptionsOnFocus:{defaultValue:null,description:"",name:"fetchOptionsOnFocus",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx#useAutoCompleteAsync"]={docgenInfo:useAutoCompleteAsync.__docgenInfo,name:"useAutoCompleteAsync",path:"src/components/_FIXED/Autocomplete/hooks/useAutoCompleteAsync.tsx#useAutoCompleteAsync"})}catch(__react_docgen_typescript_loader_error){}}}]);