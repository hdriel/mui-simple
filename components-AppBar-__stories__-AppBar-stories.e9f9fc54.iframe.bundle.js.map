{"version":3,"file":"components-AppBar-__stories__-AppBar-stories.e9f9fc54.iframe.bundle.js","mappings":";AAQA;AAGA;AAGA;AAGA;AACA;AACA;AAEA;AAMA;AAHA;AAOA;;AAUA;;;;;AAKA;AAMA;AAEA;;AAUA;;;;;AAKA;;AAOA;;;;ACxDA;;;;;;AAMA;;;;;;;;AAUA;;;;;AAOA;;;;;AA4BA;;;ACvCA;;AAEA;;AAEA;;AAEA;;;;AAjCA;;;;;;;;;;AAaA;AACA;AACA;;;AAdA;;ACmCA;;AAGA;;AAxBA;;;;;AAUA;;;;;AAMA;AAhCA;;;;;AAQA;;;;;AAMA;AAmCA;;AAkBA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAIA","sources":["webpack://@hdriel/mui-simple/./src/components/Divider/Divider.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Menu/Menu.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Paper/Paper.styled.tsx","webpack://@hdriel/mui-simple/./src/components/Typography/Typography.styled.tsx"],"sourcesContent":["import { Divider as MuiDivider } from \"@mui/material\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport { numberToPx } from \"../../utils/helpers\";\r\n\r\nfunction getCustomBorderStyle({ color, thicknessValue, borderPosition }) {\r\n  const customColorStyle =\r\n    color &&\r\n    css`\r\n      ${borderPosition}-color: ${color};\r\n    `;\r\n\r\n  const thicknessStyle =\r\n    thicknessValue &&\r\n    css`\r\n      ${borderPosition}-width: ${thicknessValue};\r\n    `;\r\n\r\n  return css`\r\n    ${customColorStyle};\r\n    ${thicknessStyle};\r\n  `;\r\n}\r\n\r\nfunction getCustomColorStyle({ color }) {\r\n  if (!color) return css``;\r\n\r\n  return css`\r\n    color: ${color};\r\n  `;\r\n}\r\n\r\nfunction verticalStyle(props) {\r\n  if (props.orientation !== \"vertical\") return css``;\r\n\r\n  const { thickness, customColor: color } = props;\r\n\r\n  const thicknessValue =\r\n    (thickness !== undefined && numberToPx(thickness)) || \"thin\";\r\n\r\n  return css`\r\n    & .MuiDivider-wrapper {\r\n      ${getCustomColorStyle({ color })};     \r\n    }\r\n    \r\n    &::before,\r\n    &::after {\r\n      ${getCustomBorderStyle({\r\n        color,\r\n        thicknessValue,\r\n        borderPosition: \"border-left\",\r\n      })}   \r\n  `;\r\n}\r\n\r\nfunction horizontalStyle(props) {\r\n  if (props.orientation !== \"horizontal\") return css``;\r\n\r\n  const { thickness, customColor: color } = props;\r\n\r\n  const thicknessValue =\r\n    (thickness !== undefined && numberToPx(thickness)) || \"thin\";\r\n\r\n  return css`\r\n    & .MuiDivider-wrapper {\r\n      ${getCustomColorStyle({ color })};\r\n    }\r\n\r\n    &::before,\r\n    &::after {\r\n      ${getCustomBorderStyle({\r\n        color,\r\n        thicknessValue,\r\n        borderPosition: \"border-top\",\r\n      })}\r\n    }\r\n  `;\r\n}\r\n\r\nexport const Divider = styled(MuiDivider, {\r\n  shouldForwardProp: (propName) => ![\"customColor\"].includes(propName),\r\n})`\r\n  ${verticalStyle}\r\n  ${horizontalStyle}\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  Menu as MuiMenu,\r\n  MenuList as MuiMenuList,\r\n  MenuItem as MuiMenuItem,\r\n  ListItemIcon as MuiListItemIcon,\r\n  ListItemText as MuiListItemText,\r\n  Popper as MuiPopper,\r\n  ClickAwayListener,\r\n  Grow,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport Paper from \"../Paper/Paper\";\r\n\r\nexport const ContextMenuWrapper = styled(Box)`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const MenuWrapper = styled(Box)`\r\n  position: relative;\r\n  overflow: visible;\r\n  margin-top: 1.5px;\r\n\r\n  &::before {\r\n    ${(props) =>\r\n      props.arrow &&\r\n      css`\r\n        content: \"\";\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 14px;\r\n        width: 10px;\r\n        height: 10px;\r\n        background-color: ${props.theme.palette.background.paper};\r\n        transform: translateY(-50%) rotate(45deg);\r\n        z-index: 0;\r\n      `}\r\n  }\r\n`;\r\n\r\nexport const Menu = styled(\r\n  ({ height, width, maxHeight, elevation, ...props }) => (\r\n    <MuiMenu\r\n      PaperProps={{\r\n        elevation,\r\n        sx: {\r\n          height,\r\n          width,\r\n          maxHeight,\r\n          overflowY: \"auto\",\r\n          filter: \"drop-shadow(0px 2px 8px rgba(0,0,0,0.32))\",\r\n          \"& .MuiAvatar-root\": {\r\n            width: 32,\r\n            height: 32,\r\n            ml: -0.5,\r\n            mr: 1,\r\n          },\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n)`\r\n  max-width: 100%;\r\n  & .MuiList-root:focus-visible {\r\n    outline: none;\r\n  }\r\n`;\r\nexport const MenuList = styled(MuiMenuList)``;\r\nexport const MenuItem = styled(MuiMenuItem)``;\r\nexport const ListItemIcon = styled(MuiListItemIcon)``;\r\nexport const ListItemText = styled(MuiListItemText)``;\r\nexport const Popper = styled(({ width, onClickAway, children, ...props }) => (\r\n  <MuiPopper {...props} sx={{ width, ...props.sx }}>\r\n    {({ TransitionProps, placement }) => (\r\n      <Grow\r\n        {...TransitionProps}\r\n        style={{\r\n          transformOrigin:\r\n            placement === \"bottom-start\" ? \"left top\" : \"left bottom\",\r\n        }}\r\n      >\r\n        <Paper>\r\n          <ClickAwayListener onClickAway={onClickAway}>\r\n            {children}\r\n          </ClickAwayListener>\r\n        </Paper>\r\n      </Grow>\r\n    )}\r\n  </MuiPopper>\r\n))`\r\n  max-width: 100%;\r\n`;\r\n","import { get } from 'lodash-es';\r\nimport { Paper as MuiPaper } from '@mui/material';\r\nimport { styled, css } from '@mui/material/styles';\r\nimport { numberToPx } from '../../utils/helpers';\r\n\r\nfunction imageStyle(props) {\r\n    if (!props.imageSrc) return css``;\r\n\r\n    return css`\r\n        background-color: unset;\r\n\r\n        &::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-image: url('${props.imageSrc}');\r\n            background-size: ${props.imageLayout};\r\n            opacity: ${props.imageOpacity};\r\n            z-index: -1;\r\n        }\r\n    `;\r\n}\r\n\r\nexport const Paper = styled(MuiPaper, {\r\n    shouldForwardProp: (propName) =>\r\n        !['muiColor', 'customColor', 'textColor', 'imageSrc', 'imageOpacity', 'imageOpacity', 'imageLayout'].includes(\r\n            propName\r\n        ),\r\n})`\r\n    width: ${(props) => numberToPx(props.width)};\r\n\r\n    height: ${(props) => numberToPx(props.height)};\r\n\r\n    background-color: ${(props) => get(props, `theme.palette.${props.muiColor}.main`, props.customColor)};\r\n\r\n    color: ${(props) => props.textColor ?? get(props, `theme.palette.${props.muiColor}.contrastText`)};\r\n\r\n    position: relative;\r\n    z-index: 0;\r\n    ${imageStyle};\r\n`;\r\n","import { Box, Typography as MuiTypography } from \"@mui/material\";\r\nimport { styled, css } from \"@mui/material/styles\";\r\nimport { numberToPx } from \"../../utils/helpers\";\r\n\r\nfunction ellipsisRow1(props) {\r\n  if (props.noWrap || props.rows !== 1) return css``;\r\n\r\n  return css`\r\n    text-overflow: ellipsis;\r\n    white-space: normal;\r\n    overflow: hidden;\r\n    display: -webkit-box !important;\r\n    -webkit-line-clamp: ${props.rows};\r\n    -webkit-box-orient: vertical;\r\n    & > * {\r\n      white-space: unset !important;\r\n    }\r\n  `;\r\n}\r\n\r\nfunction ellipsisRows(props) {\r\n  if (props.noWrap || !props.rows || (props.rows && props.rows <= 1)) {\r\n    return css``;\r\n  }\r\n\r\n  return css`\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: normal;\r\n    display: -webkit-box !important;\r\n    -webkit-line-clamp: ${props.rows};\r\n    -webkit-box-orient: vertical;\r\n    & > * {\r\n      white-space: unset !important;\r\n    }\r\n  `;\r\n}\r\n\r\nexport const Border = styled(Box, {\r\n  shouldForwardProp: (propName) => ![\"autoWidth\", \"noWrap\"].includes(propName),\r\n})`\r\n  width: ${(props) =>\r\n    numberToPx(props.width) ?? (props.autoWidth ? \"auto\" : \"100%\")};\r\n  display: flex;\r\n  border: ${(props) =>\r\n    props.border && typeof props.border === \"boolean\"\r\n      ? \"1px solid black\"\r\n      : props.border};\r\n\r\n  ${ellipsisRows}\r\n  ${ellipsisRow1}\r\n`;\r\n\r\nexport const Typography = styled(MuiTypography, {\r\n  shouldForwardProp: (propName) =>\r\n    ![\r\n      \"fontSize\",\r\n      \"customColor\",\r\n      \"bold\",\r\n      \"italic\",\r\n      \"underline\",\r\n      \"strike\",\r\n      \"charsCase\",\r\n      \"sup\",\r\n      \"sub\",\r\n      \"monospace\",\r\n      \"lineHeight\",\r\n      \"bgColor\",\r\n    ].includes(propName),\r\n})`\r\n  width: 100%;\r\n  color: ${(props) => props.customColor};\r\n  background-color: ${(props) => props.bgColor};\r\n  font-weight: ${(props) =>\r\n    props.bold && typeof props.bold === \"boolean\" ? \"bold\" : props.bold};\r\n\r\n  font-size: ${(props) => numberToPx(props.fontSize)};\r\n  font-style: ${(props) => (props.italic ? \"italic\" : undefined)};\r\n  text-decoration: ${(props) => (props.underline ? \"underline\" : undefined)};\r\n  text-decoration: ${(props) => (props.strike ? \"line-through\" : undefined)};\r\n  text-transform: ${(props) =>\r\n    ({ upper: \"uppercase\", lower: \"lowercase\", capital: \"capitalize\" }[\r\n      props.charsCase\r\n    ])};\r\n  vertical-align: ${(props) =>\r\n    props.sup ? \"super\" : props.sub ? \"sub\" : undefined};\r\n  line-height: ${(props) => props.lineHeight};\r\n  ${(props) =>\r\n    props.monospace\r\n      ? css`\r\n          font-family: monospace;\r\n        `\r\n      : undefined};\r\n  white-space: normal;\r\n\r\n  &:has(:not(:empty)) {\r\n    display: inherit;\r\n  }\r\n`;\r\n"],"names":[],"sourceRoot":""}