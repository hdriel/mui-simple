"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[4503],{"./node_modules/.pnpm/react-inlinesvg@4.2.0_react@18.3.1/node_modules/react-inlinesvg/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>InlineSVG});var react=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),styleToObject=input=>"string"!=typeof input?{}:input.split(/ ?; ?/).reduce((acc,item)=>{const[key,value]=item.split(/ ?: ?/).map((d,index)=>0===index?d.replace(/\s+/g,""):d.trim());if(key&&value){const nextKey=key.replace(/(\w)-(\w)/g,(_$0,$1,$2)=>`${$1}${$2.toUpperCase()}`);let nextValue=value.trim();Number.isNaN(Number(value))||(nextValue=Number(value)),acc[key.startsWith("-")?key:nextKey]=nextValue}return acc},{});var noTextChildNodes=["br","col","colgroup","dl","hr","iframe","img","input","link","menuitem","meta","ol","param","select","table","tbody","tfoot","thead","tr","ul","wbr"],possibleStandardNames={"accept-charset":"acceptCharset",acceptcharset:"acceptCharset",accesskey:"accessKey",allowfullscreen:"allowFullScreen",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",cellpadding:"cellPadding",cellspacing:"cellSpacing",charset:"charSet",class:"className",classid:"classID",classname:"className",colspan:"colSpan",contenteditable:"contentEditable",contextmenu:"contextMenu",controlslist:"controlsList",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",datetime:"dateTime",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",enctype:"encType",for:"htmlFor",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",innerhtml:"innerHTML",inputmode:"inputMode",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",marginwidth:"marginWidth",marginheight:"marginHeight",maxlength:"maxLength",mediagroup:"mediaGroup",minlength:"minLength",nomodule:"noModule",novalidate:"noValidate",playsinline:"playsInline",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rowspan:"rowSpan",spellcheck:"spellCheck",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",tabindex:"tabIndex",typemustmatch:"typeMustMatch",usemap:"useMap",accentheight:"accentHeight","accent-height":"accentHeight",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",arabicform:"arabicForm","arabic-form":"arabicForm",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",diffuseconstant:"diffuseConstant",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",edgemode:"edgeMode",enablebackground:"enableBackground","enable-background":"enableBackground",externalresourcesrequired:"externalResourcesRequired",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",imagerendering:"imageRendering","image-rendering":"imageRendering",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",vmathematical:"vMathematical","v-mathematical":"vMathematical",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan",onblur:"onBlur",onchange:"onChange",onclick:"onClick",oncontextmenu:"onContextMenu",ondoubleclick:"onDoubleClick",ondrag:"onDrag",ondragend:"onDragEnd",ondragenter:"onDragEnter",ondragexit:"onDragExit",ondragleave:"onDragLeave",ondragover:"onDragOver",ondragstart:"onDragStart",ondrop:"onDrop",onerror:"onError",onfocus:"onFocus",oninput:"onInput",oninvalid:"onInvalid",onkeydown:"onKeyDown",onkeypress:"onKeyPress",onkeyup:"onKeyUp",onload:"onLoad",onmousedown:"onMouseDown",onmouseenter:"onMouseEnter",onmouseleave:"onMouseLeave",onmousemove:"onMouseMove",onmouseout:"onMouseOut",onmouseover:"onMouseOver",onmouseup:"onMouseUp",onscroll:"onScroll",onsubmit:"onSubmit",ontouchcancel:"onTouchCancel",ontouchend:"onTouchEnd",ontouchmove:"onTouchMove",ontouchstart:"onTouchStart",onwheel:"onWheel"};function getReactNode(node,options){const{key,level,...rest}=options;switch(node.nodeType){case 1:return react.createElement(function parseName(nodeName){if(/[a-z]+[A-Z]+[a-z]+/.test(nodeName))return nodeName;return nodeName.toLowerCase()}(node.nodeName),function parseAttributes(node,reactKey){const attributes={key:reactKey};if(node instanceof Element){const nodeClassNames=node.getAttribute("class");nodeClassNames&&(attributes.className=nodeClassNames),[...node.attributes].forEach(d=>{switch(d.name){case"class":break;case"style":attributes[d.name]=styleToObject(d.value);break;case"allowfullscreen":case"allowpaymentrequest":case"async":case"autofocus":case"autoplay":case"checked":case"controls":case"default":case"defer":case"disabled":case"formnovalidate":case"hidden":case"ismap":case"itemscope":case"loop":case"multiple":case"muted":case"nomodule":case"novalidate":case"open":case"readonly":case"required":case"reversed":case"selected":case"typemustmatch":attributes[possibleStandardNames[d.name]||d.name]=!0;break;default:attributes[possibleStandardNames[d.name]||d.name]=d.value}})}return attributes}(node,key),parseChildren(node.childNodes,level,rest));case 3:{const nodeText=node.nodeValue?.toString()??"";if(!rest.allowWhiteSpaces&&/^\s+$/.test(nodeText)&&!/[\u00A0\u202F]/.test(nodeText))return null;if(!node.parentNode)return nodeText;const parentNodeName=node.parentNode.nodeName.toLowerCase();return noTextChildNodes.includes(parentNodeName)?(/\S/.test(nodeText)&&console.warn(`A textNode is not allowed inside '${parentNodeName}'. Your text "${nodeText}" will be ignored`),null):nodeText}case 8:default:return null;case 11:return parseChildren(node.childNodes,level,options)}}function parseChildren(childNodeList,level,options){const children=[...childNodeList].map((node,index)=>convertFromNode(node,{...options,index,level:level+1})).filter(Boolean);return children.length?children:null}function convert(input,options={}){return"string"==typeof input?function convertFromString(input,options={}){if(!input||"string"!=typeof input)return null;const{includeAllNodes=!1,nodeOnly=!1,selector="body > *",type="text/html"}=options;try{const document=(new DOMParser).parseFromString(input,type);if(includeAllNodes){const{childNodes}=document.body;return nodeOnly?childNodes:[...childNodes].map(node2=>convertFromNode(node2,options))}const node=document.querySelector(selector)||document.body.childNodes[0];if(!(node instanceof Node))throw new TypeError("Error parsing input");return nodeOnly?node:convertFromNode(node,options)}catch(error){0}return null}(input,options):input instanceof Node?convertFromNode(input,options):null}function convertFromNode(input,options={}){if(!(input&&input instanceof Node))return null;const{actions=[],index=0,level=0,randomKey}=options;let node=input,key=`${level}-${index}`;const result=[];return randomKey&&0===level&&(key=`${function randomString(length=6){const characters="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";let result="";for(let index=length;index>0;--index)result+=characters[Math.round(61*Math.random())];return result}()}-${key}`),Array.isArray(actions)&&actions.forEach(action=>{action.condition(node,key,level)&&("function"==typeof action.pre&&(node=action.pre(node,key,level),node instanceof Node||(node=input)),"function"==typeof action.post&&result.push(action.post(node,key,level)))}),result.length?result:getReactNode(node,{key,level,...options})}var __defProp=Object.defineProperty,__publicField=(obj,key,value)=>((obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value)(obj,"symbol"!=typeof key?key+"":key,value),STATUS={IDLE:"idle",LOADING:"loading",LOADED:"loaded",FAILED:"failed",READY:"ready",UNSUPPORTED:"unsupported"};function randomCharacter(character){return character[Math.floor(Math.random()*character.length)]}function canUseDOM(){return!("undefined"==typeof window||!window.document?.createElement)}function isSupportedEnvironment(){return function supportsInlineSVG(){if(!document)return!1;const div=document.createElement("div");div.innerHTML="<svg />";const svg=div.firstChild;return!!svg&&"http://www.w3.org/2000/svg"===svg.namespaceURI}()&&"undefined"!=typeof window&&null!==window}async function request(url,options){const response=await fetch(url,options),contentType=response.headers.get("content-type"),[fileType]=(contentType??"").split(/ ?; ?/);if(response.status>299)throw new Error("Not found");if(!["image/svg+xml","text/plain"].some(d=>fileType.includes(d)))throw new Error(`Content type isn't valid: ${fileType}`);return response.text()}function sleep(seconds=1){return new Promise(resolve=>{setTimeout(resolve,1e3*seconds)})}var cacheStore,CacheStore=class{constructor(){__publicField(this,"cacheApi"),__publicField(this,"cacheStore"),__publicField(this,"subscribers",[]),__publicField(this,"isReady",!1),this.cacheStore=new Map;let cacheName="react-inlinesvg",usePersistentCache=!1;canUseDOM()&&(cacheName=window.REACT_INLINESVG_CACHE_NAME??"react-inlinesvg",usePersistentCache=!!window.REACT_INLINESVG_PERSISTENT_CACHE&&"caches"in window),usePersistentCache?caches.open(cacheName).then(cache=>{this.cacheApi=cache}).catch(error=>{console.error(`Failed to open cache: ${error.message}`),this.cacheApi=void 0}).finally(()=>{this.isReady=!0;const callbacks=[...this.subscribers];this.subscribers.length=0,callbacks.forEach(callback=>{try{callback()}catch(error){console.error(`Error in CacheStore subscriber callback: ${error.message}`)}})}):this.isReady=!0}onReady(callback){this.isReady?callback():this.subscribers.push(callback)}async get(url,fetchOptions){return await(this.cacheApi?this.fetchAndAddToPersistentCache(url,fetchOptions):this.fetchAndAddToInternalCache(url,fetchOptions)),this.cacheStore.get(url)?.content??""}set(url,data){this.cacheStore.set(url,data)}isCached(url){return this.cacheStore.get(url)?.status===STATUS.LOADED}async fetchAndAddToInternalCache(url,fetchOptions){const cache=this.cacheStore.get(url);if(cache?.status!==STATUS.LOADING){if(!cache?.content){this.cacheStore.set(url,{content:"",status:STATUS.LOADING});try{const content=await request(url,fetchOptions);this.cacheStore.set(url,{content,status:STATUS.LOADED})}catch(error){throw this.cacheStore.set(url,{content:"",status:STATUS.FAILED}),error}}}else await this.handleLoading(url,async()=>{this.cacheStore.set(url,{content:"",status:STATUS.IDLE}),await this.fetchAndAddToInternalCache(url,fetchOptions)})}async fetchAndAddToPersistentCache(url,fetchOptions){const cache=this.cacheStore.get(url);if(cache?.status===STATUS.LOADED)return;if(cache?.status===STATUS.LOADING)return void await this.handleLoading(url,async()=>{this.cacheStore.set(url,{content:"",status:STATUS.IDLE}),await this.fetchAndAddToPersistentCache(url,fetchOptions)});this.cacheStore.set(url,{content:"",status:STATUS.LOADING});const data=await(this.cacheApi?.match(url));if(data){const content=await data.text();return void this.cacheStore.set(url,{content,status:STATUS.LOADED})}try{await(this.cacheApi?.add(new Request(url,fetchOptions)));const response=await(this.cacheApi?.match(url)),content=await(response?.text())??"";this.cacheStore.set(url,{content,status:STATUS.LOADED})}catch(error){throw this.cacheStore.set(url,{content:"",status:STATUS.FAILED}),error}}async handleLoading(url,callback){for(let retryCount=0;retryCount<10;retryCount++){if(this.cacheStore.get(url)?.status!==STATUS.LOADING)return;await sleep(.1)}await callback()}keys(){return[...this.cacheStore.keys()]}data(){return[...this.cacheStore.entries()].map(([key,value])=>({[key]:value}))}async delete(url){this.cacheApi&&await this.cacheApi.delete(url),this.cacheStore.delete(url)}async clear(){if(this.cacheApi){const keys=await this.cacheApi.keys();await Promise.allSettled(keys.map(key=>this.cacheApi.delete(key)))}this.cacheStore.clear()}};function usePrevious(state){const ref=(0,react.useRef)(void 0);return(0,react.useEffect)(()=>{ref.current=state}),ref.current}function getNode(options){const{baseURL,content,description,handleError,hash,preProcessor,title,uniquifyIDs=!1}=options;try{const svgText=function processSVG(content,preProcessor){if(preProcessor)return preProcessor(content);return content}(content,preProcessor),node=convert(svgText,{nodeOnly:!0});if(!(node&&node instanceof SVGSVGElement))throw new Error("Could not convert the src to a DOM Node");const svg=updateSVGAttributes(node,{baseURL,hash,uniquifyIDs});if(description){const originalDesc=svg.querySelector("desc");originalDesc?.parentNode&&originalDesc.parentNode.removeChild(originalDesc);const descElement=document.createElementNS("http://www.w3.org/2000/svg","desc");descElement.innerHTML=description,svg.prepend(descElement)}if(void 0!==title){const originalTitle=svg.querySelector("title");if(originalTitle?.parentNode&&originalTitle.parentNode.removeChild(originalTitle),title){const titleElement=document.createElementNS("http://www.w3.org/2000/svg","title");titleElement.innerHTML=title,svg.prepend(titleElement)}}return svg}catch(error){return handleError(error)}}function updateSVGAttributes(node,options){const{baseURL="",hash,uniquifyIDs}=options,replaceableAttributes=["id","href","xlink:href","xlink:role","xlink:arcrole"],linkAttributes=["href","xlink:href"];return uniquifyIDs?([...node.children].forEach(d=>{if(d.attributes?.length){const attributes=Object.values(d.attributes).map(a=>{const attribute=a,match=/url\((.*?)\)/.exec(a.value);return match?.[1]&&(attribute.value=a.value.replace(match[0],`url(${baseURL}${match[1]}__${hash})`)),attribute});replaceableAttributes.forEach(r=>{const attribute=attributes.find(a=>a.name===r);var name,value;attribute&&(name=r,value=attribute.value,!linkAttributes.includes(name)||!value||value.includes("#"))&&(attribute.value=`${attribute.value}__${hash}`)})}return d.children.length?updateSVGAttributes(d,options):d}),node):node}function ReactInlineSVG(props){const{cacheRequests=!0,children=null,description,fetchOptions,innerRef,loader=null,onError,onLoad,src,title,uniqueHash}=props,[state,setState]=(0,react.useReducer)((previousState2,nextState)=>({...previousState2,...nextState}),{content:"",element:null,isCached:cacheRequests&&cacheStore.isCached(props.src),status:STATUS.IDLE}),{content,element,isCached,status}=state,previousProps=usePrevious(props),previousState=usePrevious(state),hash=(0,react.useRef)(uniqueHash??function dist_randomString(length){const letters="abcdefghijklmnopqrstuvwxyz",charset=`${letters}${letters.toUpperCase()}1234567890`;let R="";for(let index=0;index<length;index++)R+=randomCharacter(charset);return R}(8)),isActive=(0,react.useRef)(!1),isInitialized=(0,react.useRef)(!1),handleError=(0,react.useCallback)(error=>{isActive.current&&(setState({status:"Browser does not support SVG"===error.message?STATUS.UNSUPPORTED:STATUS.FAILED}),onError?.(error))},[onError]),handleLoad=(0,react.useCallback)((loadedContent,hasCache=!1)=>{isActive.current&&setState({content:loadedContent,isCached:hasCache,status:STATUS.LOADED})},[]),fetchContent=(0,react.useCallback)(async()=>{const responseContent=await request(src,fetchOptions);handleLoad(responseContent)},[fetchOptions,handleLoad,src]),getElement=(0,react.useCallback)(()=>{try{const convertedElement=convert(getNode({...props,handleError,hash:hash.current,content}));if(!convertedElement||!(0,react.isValidElement)(convertedElement))throw new Error("Could not convert the src to a React element");setState({element:convertedElement,status:STATUS.READY})}catch(error){handleError(error)}},[content,handleError,props]),getContent=(0,react.useCallback)(async()=>{const dataURI=/^data:image\/svg[^,]*?(;base64)?,(.*)/u.exec(src);let inlineSrc;if(dataURI?inlineSrc=dataURI[1]?window.atob(dataURI[2]):decodeURIComponent(dataURI[2]):src.includes("<svg")&&(inlineSrc=src),inlineSrc)handleLoad(inlineSrc);else try{if(cacheRequests){const cachedContent=await cacheStore.get(src,fetchOptions);handleLoad(cachedContent,!0)}else await fetchContent()}catch(error){handleError(error)}},[cacheRequests,fetchContent,fetchOptions,handleError,handleLoad,src]),load=(0,react.useCallback)(async()=>{isActive.current&&setState({content:"",element:null,isCached:!1,status:STATUS.LOADING})},[]);(0,react.useEffect)(()=>{if(isActive.current=!0,canUseDOM()&&!isInitialized.current){try{if(status===STATUS.IDLE){if(!isSupportedEnvironment())throw new Error("Browser does not support SVG");if(!src)throw new Error("Missing src");load()}}catch(error){handleError(error)}return isInitialized.current=!0,()=>{isActive.current=!1}}},[]),(0,react.useEffect)(()=>{if(canUseDOM()&&previousProps&&previousProps.src!==src){if(!src)return void handleError(new Error("Missing src"));load()}},[handleError,load,previousProps,src]),(0,react.useEffect)(()=>{status===STATUS.LOADED&&getElement()},[status,getElement]),(0,react.useEffect)(()=>{canUseDOM()&&previousProps&&previousProps.src===src&&(previousProps.title===title&&previousProps.description===description||getElement())},[description,getElement,previousProps,src,title]),(0,react.useEffect)(()=>{if(previousState)switch(status){case STATUS.LOADING:previousState.status!==STATUS.LOADING&&getContent();break;case STATUS.LOADED:previousState.status!==STATUS.LOADED&&getElement();break;case STATUS.READY:previousState.status!==STATUS.READY&&onLoad?.(src,isCached)}},[getContent,getElement,isCached,onLoad,previousState,src,status]);const elementProps=function omit(input,...filter){const output={};for(const key in input)({}).hasOwnProperty.call(input,key)&&(filter.includes(key)||(output[key]=input[key]));return output}(props,"baseURL","cacheRequests","children","description","fetchOptions","innerRef","loader","onError","onLoad","preProcessor","src","title","uniqueHash","uniquifyIDs");return canUseDOM()?element?(0,react.cloneElement)(element,{ref:innerRef,...elementProps}):[STATUS.UNSUPPORTED,STATUS.FAILED].includes(status)?children:loader:loader}function InlineSVG(props){cacheStore||(cacheStore=new CacheStore);const{loader}=props,[isReady,setReady]=(0,react.useState)(cacheStore.isReady);return(0,react.useEffect)(()=>{isReady||cacheStore.onReady(()=>{setReady(!0)})},[isReady]),isReady?react.createElement(ReactInlineSVG,{...props}):loader}}}]);