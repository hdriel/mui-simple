"use strict";(self.webpackChunkmui_simple=self.webpackChunkmui_simple||[]).push([[9004],{"./src/components/Autocomplete/__stories__/InputAutocomplete.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,FilmOptions:()=>FilmOptions,GroupBy:()=>GroupBy,IncludeInputInList:()=>IncludeInputInList,OptionsConverter:()=>OptionsConverter,OptionsObjectList:()=>OptionsObjectList,OptionsStringList:()=>OptionsStringList,OptionsWithDisabled:()=>OptionsWithDisabled,Placeholder:()=>Placeholder,RenderOption:()=>RenderOption,Sort:()=>Sort,StartCmpExternal:()=>StartCmpExternal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v,_w,_x,_y,_z,_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_mui_material__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js"),_mui_material__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Autocomplete/InputAutocomplete.tsx"),_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Autocomplete/__stories__/InputAutocomplete.mocks.ts"),_excluded=["title"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Box, Stack } from '@mui/material';\nimport InputAutocomplete from '../InputAutocomplete';\nimport { countries, timeSlots, top100Films, top100FilmsWithFirstLetters } from './InputAutocomplete.mocks';\nconst meta: Meta<typeof InputAutocomplete> = {\n  title: 'Inputs/Inputs/InputAutocomplete',\n  component: InputAutocomplete,\n  tags: ['autodocs']\n};\nexport default meta;\ntype Story = StoryObj<typeof InputAutocomplete>;\nexport const Default: Story = {\n  args: {}\n};\nconst OPTIONS = [{\n  title: 'The Shawshank Redemption',\n  year: 1994,\n  id: 0\n}, {\n  title: 'The Godfather',\n  year: 1972,\n  id: 1\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974,\n  id: 2\n}, {\n  title: 'The Dark Knight',\n  year: 2008,\n  id: 3\n}, {\n  title: '12 Angry Men',\n  year: 1957,\n  id: 4\n}, {\n  title: \"Schindler's List\",\n  year: 1993,\n  id: 5\n}, {\n  title: 'Pulp Fiction',\n  year: 1994,\n  id: 6\n}];\nconst render = args => {\n  const [selectedOption, setSelectedOption] = useState(args.value ?? null);\n  return <InputAutocomplete {...args} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} />;\n};\nexport const IncludeInputInList: Story = {\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    options: OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n};\nexport const OptionsStringList: Story = {\n  args: {\n    label: 'Movie',\n    options: OPTIONS.map(o => o.title),\n    value: ['The Dark Knight']\n  },\n  render\n};\nexport const OptionsObjectList: Story = {\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    getOptionLabel: 'title'\n  },\n  render\n};\nexport const OptionsConverter: Story = {\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const Placeholder: Story = {\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    placeholder: 'choose you movie name',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const StartCmpExternal: Story = {\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    startCmpExternal: 'Tv',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const Sort: Story = {\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n};\nexport const FilmOptions = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocomplete key={variant}\n    // getOptionLabel={(option) => option.title}\n    label=\"Movie\" optionConverter={film => ({\n      id: film.title,\n      label: `${film.title} (${film.year})`\n    })} options={top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} />)}\n        </Stack>;\n};\nexport const RenderOption: Story = {\n  args: {\n    id: 'grouped-demo',\n    label: 'Choose a country',\n    options: countries,\n    autoHighlight: true,\n    getOptionLabel: option => option.label,\n    renderOption: (props, option) => <Box component=\"li\" sx={{\n      '& > img': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading=\"lazy\" width=\"20\" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt=\"\" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n};\nexport const GroupBy: Story = {\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    options: top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sortBy: 'title',\n    getOptionLabel: option => option.title,\n    width: 400\n  },\n  render\n};\nexport const OptionsWithDisabled: Story = {\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    options: timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n};\n\n/*\n    openOnFocus: true,\n    readOnly: undefined,\n    selectOnFocus: false,\n    size: undefined,\n    variant: 'outlined',\n*/\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {}\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nIncludeInputInList.parameters = {\n  ...IncludeInputInList.parameters,\n  docs: {\n    ...IncludeInputInList.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    includeInputInList: false,\\n    options: OPTIONS.map(({\\n      title,\\n      ...item\\n    }) => ({\\n      ...item,\\n      label: title\\n    }))\\n  },\\n  render\\n}\",\n      ...IncludeInputInList.parameters?.docs?.source\n    }\n  }\n};\nOptionsStringList.parameters = {\n  ...OptionsStringList.parameters,\n  docs: {\n    ...OptionsStringList.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    options: OPTIONS.map(o => o.title),\\n    value: ['The Dark Knight']\\n  },\\n  render\\n}\",\n      ...OptionsStringList.parameters?.docs?.source\n    }\n  }\n};\nOptionsObjectList.parameters = {\n  ...OptionsObjectList.parameters,\n  docs: {\n    ...OptionsObjectList.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    options: OPTIONS,\\n    getOptionLabel: 'title'\\n  },\\n  render\\n}\",\n      ...OptionsObjectList.parameters?.docs?.source\n    }\n  }\n};\nOptionsConverter.parameters = {\n  ...OptionsConverter.parameters,\n  docs: {\n    ...OptionsConverter.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    options: OPTIONS,\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...OptionsConverter.parameters?.docs?.source\n    }\n  }\n};\nPlaceholder.parameters = {\n  ...Placeholder.parameters,\n  docs: {\n    ...Placeholder.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    options: OPTIONS,\\n    placeholder: 'choose you movie name',\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...Placeholder.parameters?.docs?.source\n    }\n  }\n};\nStartCmpExternal.parameters = {\n  ...StartCmpExternal.parameters,\n  docs: {\n    ...StartCmpExternal.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    options: OPTIONS,\\n    startCmpExternal: 'Tv',\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...StartCmpExternal.parameters?.docs?.source\n    }\n  }\n};\nSort.parameters = {\n  ...Sort.parameters,\n  docs: {\n    ...Sort.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    label: 'Movie',\\n    options: OPTIONS,\\n    sortBy: 'year',\\n    sortDir: -1,\\n    optionConverter: (item, index) => ({\\n      id: index,\\n      label: `${item.title} (${item.year})`,\\n      year: item.year\\n    })\\n  },\\n  render\\n}\",\n      ...Sort.parameters?.docs?.source\n    }\n  }\n};\nFilmOptions.parameters = {\n  ...FilmOptions.parameters,\n  docs: {\n    ...FilmOptions.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const [selectedOption, setSelectedOption] = useState(null);\\n  return <Stack spacing={4}>\\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocomplete key={variant}\\n    // getOptionLabel={(option) => option.title}\\n    label=\\\"Movie\\\" optionConverter={film => ({\\n      id: film.title,\\n      label: `${film.title} (${film.year})`\\n    })} options={top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} />)}\\n        </Stack>;\\n}\",\n      ...FilmOptions.parameters?.docs?.source\n    }\n  }\n};\nRenderOption.parameters = {\n  ...RenderOption.parameters,\n  docs: {\n    ...RenderOption.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped-demo',\\n    label: 'Choose a country',\\n    options: countries,\\n    autoHighlight: true,\\n    getOptionLabel: option => option.label,\\n    renderOption: (props, option) => <Box component=\\\"li\\\" sx={{\\n      '& > img': {\\n        mr: 2,\\n        flexShrink: 0\\n      }\\n    }} {...props}>\\n                <img loading=\\\"lazy\\\" width=\\\"20\\\" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt=\\\"\\\" />\\n                {option.label} ({option.code}) +{option.phone}\\n            </Box>\\n  },\\n  render\\n}\",\n      ...RenderOption.parameters?.docs?.source\n    }\n  }\n};\nGroupBy.parameters = {\n  ...GroupBy.parameters,\n  docs: {\n    ...GroupBy.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped categories',\\n    label: 'Categories',\\n    options: top100FilmsWithFirstLetters,\\n    groupBy: option => option.firstLetter,\\n    sortBy: 'title',\\n    getOptionLabel: option => option.title,\\n    width: 400\\n  },\\n  render\\n}\",\n      ...GroupBy.parameters?.docs?.source\n    }\n  }\n};\nOptionsWithDisabled.parameters = {\n  ...OptionsWithDisabled.parameters,\n  docs: {\n    ...OptionsWithDisabled.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    id: 'grouped-demo',\\n    label: 'Disabled options',\\n    options: timeSlots.slice(0).map((option, index) => ({\\n      id: index,\\n      time: option,\\n      disabled: index % 4 === 0\\n    })),\\n    getOptionLabel: option => option.time,\\n    width: 200\\n  },\\n  render\\n}\",\n      ...OptionsWithDisabled.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{default:{startLoc:{col:30,line:13},endLoc:{col:1,line:15},startBody:{col:30,line:13},endBody:{col:1,line:15}},"include-input-in-list":{startLoc:{col:41,line:49},endLoc:{col:1,line:62},startBody:{col:41,line:49},endBody:{col:1,line:62}},"options-string-list":{startLoc:{col:40,line:63},endLoc:{col:1,line:70},startBody:{col:40,line:63},endBody:{col:1,line:70}},"options-object-list":{startLoc:{col:40,line:71},endLoc:{col:1,line:78},startBody:{col:40,line:71},endBody:{col:1,line:78}},"options-converter":{startLoc:{col:39,line:79},endLoc:{col:1,line:90},startBody:{col:39,line:79},endBody:{col:1,line:90}},placeholder:{startLoc:{col:34,line:91},endLoc:{col:1,line:103},startBody:{col:34,line:91},endBody:{col:1,line:103}},"start-cmp-external":{startLoc:{col:39,line:104},endLoc:{col:1,line:116},startBody:{col:39,line:104},endBody:{col:1,line:116}},sort:{startLoc:{col:27,line:117},endLoc:{col:1,line:130},startBody:{col:27,line:117},endBody:{col:1,line:130}},"film-options":{startLoc:{col:27,line:131},endLoc:{col:1,line:141},startBody:{col:27,line:131},endBody:{col:1,line:141}},"render-option":{startLoc:{col:35,line:142},endLoc:{col:1,line:160},startBody:{col:35,line:142},endBody:{col:1,line:160}},"group-by":{startLoc:{col:30,line:161},endLoc:{col:1,line:172},startBody:{col:30,line:161},endBody:{col:1,line:172}},"options-with-disabled":{startLoc:{col:42,line:173},endLoc:{col:1,line:186},startBody:{col:42,line:173},endBody:{col:1,line:186}}}}},title:"Inputs/Inputs/InputAutocomplete",component:_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,tags:["autodocs"]};var Default={args:{}},OPTIONS=[{title:"The Shawshank Redemption",year:1994,id:0},{title:"The Godfather",year:1972,id:1},{title:"The Godfather: Part II",year:1974,id:2},{title:"The Dark Knight",year:2008,id:3},{title:"12 Angry Men",year:1957,id:4},{title:"Schindler's List",year:1993,id:5},{title:"Pulp Fiction",year:1994,id:6}],render=function(args){var _a,_b=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null!==(_a=args.value)&&void 0!==_a?_a:null),selectedOption=_b[0],setSelectedOption=_b[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,_extends({},args,{value:selectedOption,onChange:function(e,option){return setSelectedOption(option)}}))};render.displayName="render";var IncludeInputInList={args:{label:"Movie",includeInputInList:!1,options:OPTIONS.map((function(_ref){var title=_ref.title;return _objectSpread(_objectSpread({},_objectWithoutProperties(_ref,_excluded)),{},{label:title})}))},render},OptionsStringList={args:{label:"Movie",options:OPTIONS.map((function(o){return o.title})),value:["The Dark Knight"]},render},OptionsObjectList={args:{label:"Movie",options:OPTIONS,getOptionLabel:"title"},render},OptionsConverter={args:{label:"Movie",options:OPTIONS,optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},Placeholder={args:{label:"Movie",options:OPTIONS,placeholder:"choose you movie name",optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},StartCmpExternal={args:{label:"Movie",options:OPTIONS,startCmpExternal:"Tv",optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},Sort={args:{label:"Movie",options:OPTIONS,sortBy:"year",sortDir:-1,optionConverter:function(item,index){return{id:index,label:"".concat(item.title," (").concat(item.year,")"),year:item.year}}},render},FilmOptions=function(){var _a=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),selectedOption=_a[0],setSelectedOption=_a[1];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_3__.Z,{spacing:4},["filled","standard","outlined"].map((function(variant){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_InputAutocomplete__WEBPACK_IMPORTED_MODULE_1__.Z,{key:variant,label:"Movie",optionConverter:function(film){return{id:film.title,label:"".concat(film.title," (").concat(film.year,")")}},options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.gE,value:selectedOption,onChange:function(e,option){return setSelectedOption(option)},variant})})))};FilmOptions.displayName="FilmOptions";var RenderOption={args:{id:"grouped-demo",label:"Choose a country",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.hW,autoHighlight:!0,getOptionLabel:function(option){return option.label},renderOption:function(props,option){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Z,_extends({component:"li",sx:{"& > img":{mr:2,flexShrink:0}}},props),react__WEBPACK_IMPORTED_MODULE_0__.createElement("img",{loading:"lazy",width:"20",src:"https://flagcdn.com/w20/".concat(option.code.toLowerCase(),".png"),srcSet:"https://flagcdn.com/w40/".concat(option.code.toLowerCase(),".png 2x"),alt:""}),option.label," (",option.code,") +",option.phone)}},render},GroupBy={args:{id:"grouped categories",label:"Categories",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.K$,groupBy:function(option){return option.firstLetter},sortBy:"title",getOptionLabel:function(option){return option.title},width:400},render},OptionsWithDisabled={args:{id:"grouped-demo",label:"Disabled options",options:_InputAutocomplete_mocks__WEBPACK_IMPORTED_MODULE_2__.bp.slice(0).map((function(option,index){return{id:index,time:option,disabled:index%4==0}})),getOptionLabel:function(option){return option.time},width:200},render};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{},{source:_objectSpread({originalSource:"{\n  args: {}\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),IncludeInputInList.parameters=_objectSpread(_objectSpread({},IncludeInputInList.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_d=IncludeInputInList.parameters)||void 0===_d?void 0:_d.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    includeInputInList: false,\n    options: OPTIONS.map(({\n      title,\n      ...item\n    }) => ({\n      ...item,\n      label: title\n    }))\n  },\n  render\n}"},null===(_f=null===(_e=IncludeInputInList.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})}),OptionsStringList.parameters=_objectSpread(_objectSpread({},OptionsStringList.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_g=OptionsStringList.parameters)||void 0===_g?void 0:_g.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS.map(o => o.title),\n    value: ['The Dark Knight']\n  },\n  render\n}"},null===(_j=null===(_h=OptionsStringList.parameters)||void 0===_h?void 0:_h.docs)||void 0===_j?void 0:_j.source)})}),OptionsObjectList.parameters=_objectSpread(_objectSpread({},OptionsObjectList.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_k=OptionsObjectList.parameters)||void 0===_k?void 0:_k.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    getOptionLabel: 'title'\n  },\n  render\n}"},null===(_m=null===(_l=OptionsObjectList.parameters)||void 0===_l?void 0:_l.docs)||void 0===_m?void 0:_m.source)})}),OptionsConverter.parameters=_objectSpread(_objectSpread({},OptionsConverter.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_o=OptionsConverter.parameters)||void 0===_o?void 0:_o.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_q=null===(_p=OptionsConverter.parameters)||void 0===_p?void 0:_p.docs)||void 0===_q?void 0:_q.source)})}),Placeholder.parameters=_objectSpread(_objectSpread({},Placeholder.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_r=Placeholder.parameters)||void 0===_r?void 0:_r.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    placeholder: 'choose you movie name',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_t=null===(_s=Placeholder.parameters)||void 0===_s?void 0:_s.docs)||void 0===_t?void 0:_t.source)})}),StartCmpExternal.parameters=_objectSpread(_objectSpread({},StartCmpExternal.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_u=StartCmpExternal.parameters)||void 0===_u?void 0:_u.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    startCmpExternal: 'Tv',\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_w=null===(_v=StartCmpExternal.parameters)||void 0===_v?void 0:_v.docs)||void 0===_w?void 0:_w.source)})}),Sort.parameters=_objectSpread(_objectSpread({},Sort.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_x=Sort.parameters)||void 0===_x?void 0:_x.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Movie',\n    options: OPTIONS,\n    sortBy: 'year',\n    sortDir: -1,\n    optionConverter: (item, index) => ({\n      id: index,\n      label: `${item.title} (${item.year})`,\n      year: item.year\n    })\n  },\n  render\n}"},null===(_z=null===(_y=Sort.parameters)||void 0===_y?void 0:_y.docs)||void 0===_z?void 0:_z.source)})}),FilmOptions.parameters=_objectSpread(_objectSpread({},FilmOptions.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_0=FilmOptions.parameters)||void 0===_0?void 0:_0.docs),{},{source:_objectSpread({originalSource:"() => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  return <Stack spacing={4}>\n            {['filled', 'standard', 'outlined'].map(variant => <InputAutocomplete key={variant}\n    // getOptionLabel={(option) => option.title}\n    label=\"Movie\" optionConverter={film => ({\n      id: film.title,\n      label: `${film.title} (${film.year})`\n    })} options={top100Films} value={selectedOption} onChange={(e, option) => setSelectedOption(option)} variant={variant} />)}\n        </Stack>;\n}"},null===(_2=null===(_1=FilmOptions.parameters)||void 0===_1?void 0:_1.docs)||void 0===_2?void 0:_2.source)})}),RenderOption.parameters=_objectSpread(_objectSpread({},RenderOption.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_3=RenderOption.parameters)||void 0===_3?void 0:_3.docs),{},{source:_objectSpread({originalSource:'{\n  args: {\n    id: \'grouped-demo\',\n    label: \'Choose a country\',\n    options: countries,\n    autoHighlight: true,\n    getOptionLabel: option => option.label,\n    renderOption: (props, option) => <Box component="li" sx={{\n      \'& > img\': {\n        mr: 2,\n        flexShrink: 0\n      }\n    }} {...props}>\n                <img loading="lazy" width="20" src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`} srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`} alt="" />\n                {option.label} ({option.code}) +{option.phone}\n            </Box>\n  },\n  render\n}'},null===(_5=null===(_4=RenderOption.parameters)||void 0===_4?void 0:_4.docs)||void 0===_5?void 0:_5.source)})}),GroupBy.parameters=_objectSpread(_objectSpread({},GroupBy.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_6=GroupBy.parameters)||void 0===_6?void 0:_6.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    id: 'grouped categories',\n    label: 'Categories',\n    options: top100FilmsWithFirstLetters,\n    groupBy: option => option.firstLetter,\n    sortBy: 'title',\n    getOptionLabel: option => option.title,\n    width: 400\n  },\n  render\n}"},null===(_8=null===(_7=GroupBy.parameters)||void 0===_7?void 0:_7.docs)||void 0===_8?void 0:_8.source)})}),OptionsWithDisabled.parameters=_objectSpread(_objectSpread({},OptionsWithDisabled.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_9=OptionsWithDisabled.parameters)||void 0===_9?void 0:_9.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    id: 'grouped-demo',\n    label: 'Disabled options',\n    options: timeSlots.slice(0).map((option, index) => ({\n      id: index,\n      time: option,\n      disabled: index % 4 === 0\n    })),\n    getOptionLabel: option => option.time,\n    width: 200\n  },\n  render\n}"},null===(_11=null===(_10=OptionsWithDisabled.parameters)||void 0===_10?void 0:_10.docs)||void 0===_11?void 0:_11.source)})});var __namedExportsOrder=["Default","IncludeInputInList","OptionsStringList","OptionsObjectList","OptionsConverter","Placeholder","StartCmpExternal","Sort","FilmOptions","RenderOption","GroupBy","OptionsWithDisabled"]}}]);