"use strict";(self.webpackChunk_hdriel_mui_simple=self.webpackChunk_hdriel_mui_simple||[]).push([[8382],{"./src/components/TextField/__stories__/InputText.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Limit:()=>Limit,__namedExportsOrder:()=>__namedExportsOrder,default:()=>InputText_stories});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),TextField=__webpack_require__("./src/components/TextField/TextField.tsx"),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function InputText(_a){var _b,{value,showLimitIndicatorFrom,limitIndicator,endCmp}=_a,props=__rest(_a,["value","showLimitIndicatorFrom","limitIndicator","endCmp"]);const count=null!==(_b=null==value?void 0:value.length)&&void 0!==_b?_b:0;return react.createElement(TextField.Z,Object.assign({},props,{value,endCmp:react.createElement("span",{style:Object.assign({},count>limitIndicator&&{color:"red"})},(!showLimitIndicatorFrom||showLimitIndicatorFrom<count)&&limitIndicator?`${count} / ${limitIndicator}`:"",endCmp),type:"text"}))}InputText.propTypes={limitIndicator:prop_types_default().number,showLimitIndicatorFrom:prop_types_default().number},InputText.defaultProps={limitIndicator:void 0,showLimitIndicatorFrom:void 0};try{InputText.displayName="InputText",InputText.__docgenInfo={description:"",displayName:"InputText",props:{value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"any"}},showLimitIndicatorFrom:{defaultValue:{value:"undefined"},description:"",name:"showLimitIndicatorFrom",required:!1,type:{name:"any"}},limitIndicator:{defaultValue:{value:"undefined"},description:"",name:"limitIndicator",required:!1,type:{name:"any"}},endCmp:{defaultValue:null,description:"",name:"endCmp",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TextField/InputText.tsx#InputText"]={docgenInfo:InputText.__docgenInfo,name:"InputText",path:"src/components/TextField/InputText.tsx#InputText"})}catch(__react_docgen_typescript_loader_error){}var _a,_b,_c,_d,_e,_f,Stack=__webpack_require__("./node_modules/@mui/material/Stack/Stack.js");const InputText_stories={parameters:{storySource:{source:'var _a, _b, _c, _d, _e, _f;\nimport React, { useState } from "react";\nimport InputText from "../InputText";\nimport { Stack } from "@mui/material";\nexport default {\n  title: "Inputs/Inputs/InputText",\n  component: InputText,\n  decorators: [Story => /*#__PURE__*/React.createElement("div", {\n    style: {\n      width: "450px",\n      padding: "1em",\n      border: "1px dashed black"\n    }\n  }, /*#__PURE__*/React.createElement(Story, null))]\n};\nexport const Default = () => {\n  return /*#__PURE__*/React.createElement(InputText, null);\n};\nexport const Limit = () => {\n  const [value, setValue] = useState("");\n  return /*#__PURE__*/React.createElement(Stack, {\n    spacing: 3\n  }, /*#__PURE__*/React.createElement(InputText, {\n    label: "Time",\n    value: value,\n    onChange: e => setValue(e.target.value),\n    multiline: true\n  }), /*#__PURE__*/React.createElement(InputText, {\n    label: "Time",\n    value: value,\n    onChange: e => setValue(e.target.value),\n    limitIndicator: 20,\n    multiline: true,\n    rows: 2\n  }), /*#__PURE__*/React.createElement(InputText, {\n    label: "Time",\n    value: value,\n    onChange: e => setValue(e.target.value),\n    showLimitIndicatorFrom: 5,\n    limitIndicator: 20,\n    multiline: true,\n    maxRows: 2\n  }));\n};\nDefault.parameters = Object.assign(Object.assign({}, Default.parameters), {\n  docs: Object.assign(Object.assign({}, (_a = Default.parameters) === null || _a === void 0 ? void 0 : _a.docs), {\n    source: Object.assign({\n      originalSource: "() => {\\n  return <InputText />;\\n}"\n    }, (_c = (_b = Default.parameters) === null || _b === void 0 ? void 0 : _b.docs) === null || _c === void 0 ? void 0 : _c.source)\n  })\n});\nLimit.parameters = Object.assign(Object.assign({}, Limit.parameters), {\n  docs: Object.assign(Object.assign({}, (_d = Limit.parameters) === null || _d === void 0 ? void 0 : _d.docs), {\n    source: Object.assign({\n      originalSource: "() => {\\n  const [value, setValue] = useState(\\"\\");\\n  return <Stack spacing={3}>\\n      <InputText label=\\"Time\\" value={value} onChange={e => setValue(e.target.value)} multiline />\\n      <InputText label=\\"Time\\" value={value} onChange={e => setValue(e.target.value)} limitIndicator={20} multiline rows={2} />\\n      <InputText label=\\"Time\\" value={value} onChange={e => setValue(e.target.value)} showLimitIndicatorFrom={5} limitIndicator={20} multiline maxRows={2} />\\n    </Stack>;\\n}"\n    }, (_f = (_e = Limit.parameters) === null || _e === void 0 ? void 0 : _e.docs) === null || _f === void 0 ? void 0 : _f.source)\n  })\n});',locationsMap:{default:{startLoc:{col:23,line:16},endLoc:{col:1,line:18},startBody:{col:23,line:16},endBody:{col:1,line:18}},limit:{startLoc:{col:21,line:19},endLoc:{col:1,line:44},startBody:{col:21,line:19},endBody:{col:1,line:44}}}}},title:"Inputs/Inputs/InputText",component:InputText,decorators:[Story=>react.createElement("div",{style:{width:"450px",padding:"1em",border:"1px dashed black"}},react.createElement(Story,null))]},Default=()=>react.createElement(InputText,null),Limit=()=>{const[value,setValue]=(0,react.useState)("");return react.createElement(Stack.Z,{spacing:3},react.createElement(InputText,{label:"Time",value,onChange:e=>setValue(e.target.value),multiline:!0}),react.createElement(InputText,{label:"Time",value,onChange:e=>setValue(e.target.value),limitIndicator:20,multiline:!0,rows:2}),react.createElement(InputText,{label:"Time",value,onChange:e=>setValue(e.target.value),showLimitIndicatorFrom:5,limitIndicator:20,multiline:!0,maxRows:2}))};Default.parameters=Object.assign(Object.assign({},Default.parameters),{docs:Object.assign(Object.assign({},null===(_a=Default.parameters)||void 0===_a?void 0:_a.docs),{source:Object.assign({originalSource:"() => {\n  return <InputText />;\n}"},null===(_c=null===(_b=Default.parameters)||void 0===_b?void 0:_b.docs)||void 0===_c?void 0:_c.source)})}),Limit.parameters=Object.assign(Object.assign({},Limit.parameters),{docs:Object.assign(Object.assign({},null===(_d=Limit.parameters)||void 0===_d?void 0:_d.docs),{source:Object.assign({originalSource:'() => {\n  const [value, setValue] = useState("");\n  return <Stack spacing={3}>\n      <InputText label="Time" value={value} onChange={e => setValue(e.target.value)} multiline />\n      <InputText label="Time" value={value} onChange={e => setValue(e.target.value)} limitIndicator={20} multiline rows={2} />\n      <InputText label="Time" value={value} onChange={e => setValue(e.target.value)} showLimitIndicatorFrom={5} limitIndicator={20} multiline maxRows={2} />\n    </Stack>;\n}'},null===(_f=null===(_e=Limit.parameters)||void 0===_e?void 0:_e.docs)||void 0===_f?void 0:_f.source)})});const __namedExportsOrder=["Default","Limit"]}}]);